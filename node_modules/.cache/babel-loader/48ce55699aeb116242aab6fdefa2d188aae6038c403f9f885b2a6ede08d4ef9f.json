{"ast":null,"code":"import _objectSpread from\"/Users/ddm/expense-tracker/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// IndexedDB database utility for expense tracker\nconst DB_NAME='expense-tracker-db';const DB_VERSION=6;// Incremented for recurring transactions\nconst EXPENSES_STORE='expenses';const CATEGORIES_STORE='categories';const TAGS_STORE='tags';const WALLETS_STORE='wallets';const RECURRING_STORE='recurring';// New store for recurring transactions\n// Default categories\nconst DEFAULT_CATEGORIES=[{id:'food',name:'Food'},{id:'transportation',name:'Transportation'},{id:'entertainment',name:'Entertainment'},{id:'utilities',name:'Utilities'},{id:'housing',name:'Housing'},{id:'healthcare',name:'Healthcare'},{id:'other',name:'Other'}];// Default tags\nconst DEFAULT_TAGS=[{id:'essential',name:'Essential'},{id:'recurring',name:'Recurring'},{id:'emergency',name:'Emergency'},{id:'personal',name:'Personal'},{id:'work',name:'Work'},{id:'family',name:'Family'},{id:'vacation',name:'Vacation'},{id:'gift',name:'Gift'},{id:'savings',name:'Savings'},{id:'education',name:'Education'}];// Default wallets\nconst DEFAULT_WALLETS=[{id:'cash',name:'Cash',type:'cash',balance:0},{id:'bank',name:'Bank Account',type:'bank',balance:0},{id:'credit',name:'Credit Card',type:'credit_card',balance:0},{id:'ewallet',name:'E-Wallet',type:'e_wallet',balance:0}];// Initialize the database\nconst initDB=()=>{return new Promise((resolve,reject)=>{// Check if IndexedDB is supported\nif(!window.indexedDB){console.error(\"Your browser doesn't support IndexedDB\");// Fall back to localStorage\nresolve(false);return;}const request=window.indexedDB.open(DB_NAME,DB_VERSION);// Handle database upgrade (first time or version change)\nrequest.onupgradeneeded=event=>{const db=event.target.result;const oldVersion=event.oldVersion;// First time setup or upgrade from version 0\nif(oldVersion<1){// Create expenses store with auto-incrementing id\nif(!db.objectStoreNames.contains(EXPENSES_STORE)){const expensesStore=db.createObjectStore(EXPENSES_STORE,{keyPath:'id'});expensesStore.createIndex('date','date',{unique:false});expensesStore.createIndex('category','category',{unique:false});}// Create categories store\nif(!db.objectStoreNames.contains(CATEGORIES_STORE)){const categoriesStore=db.createObjectStore(CATEGORIES_STORE,{keyPath:'id'});// Add default categories\nDEFAULT_CATEGORIES.forEach(category=>{categoriesStore.add(category);});}}// Upgrade to version 2 - adding tags support\nif(oldVersion<2){// Create tags store if it doesn't exist\nif(!db.objectStoreNames.contains(TAGS_STORE)){const tagsStore=db.createObjectStore(TAGS_STORE,{keyPath:'id'});// Add default tags\nDEFAULT_TAGS.forEach(tag=>{tagsStore.add(tag);});}// Update expenses store to include tags if it exists\nif(db.objectStoreNames.contains(EXPENSES_STORE)){// We can't modify the schema of an existing object store in onupgradeneeded\n// So we need to create a new index for the existing store\nconst transaction=event.target.transaction;const expensesStore=transaction.objectStore(EXPENSES_STORE);// Get all existing expenses\nexpensesStore.openCursor().onsuccess=event=>{const cursor=event.target.result;if(cursor){// Add tags array to existing expenses if they don't have it\nif(!cursor.value.tags){const updatedExpense=_objectSpread(_objectSpread({},cursor.value),{},{tags:[]});cursor.update(updatedExpense);}cursor.continue();}};}}// Upgrade to version 3 - add wallets support\nif(oldVersion<3){if(!db.objectStoreNames.contains(WALLETS_STORE)){const walletsStore=db.createObjectStore(WALLETS_STORE,{keyPath:'id'});DEFAULT_WALLETS.forEach(wallet=>walletsStore.add(wallet));}}// Upgrade to version 4 - add walletId to expenses\nif(oldVersion<4){if(db.objectStoreNames.contains(EXPENSES_STORE)){const transaction=event.target.transaction;const expensesStore=transaction.objectStore(EXPENSES_STORE);expensesStore.openCursor().onsuccess=async event=>{const cursor=event.target.result;if(cursor){if(!cursor.value.walletId){// Assign to 'cash' wallet by default\nconst updatedExpense=_objectSpread(_objectSpread({},cursor.value),{},{walletId:'cash'});cursor.update(updatedExpense);}cursor.continue();}};}}// Upgrade to version 5 - add income tracking, notes and photo support\nif(oldVersion<5){if(db.objectStoreNames.contains(EXPENSES_STORE)){const transaction=event.target.transaction;const expensesStore=transaction.objectStore(EXPENSES_STORE);expensesStore.openCursor().onsuccess=event=>{const cursor=event.target.result;if(cursor){// Add new fields to existing expenses\nconst updatedExpense=_objectSpread(_objectSpread({},cursor.value),{},{isIncome:cursor.value.isIncome||false,notes:cursor.value.notes||'',photoUrl:cursor.value.photoUrl||''});cursor.update(updatedExpense);cursor.continue();}};}}// Upgrade to version 6 - add recurring transactions\nif(oldVersion<6){if(!db.objectStoreNames.contains(RECURRING_STORE)){const recurringStore=db.createObjectStore(RECURRING_STORE,{keyPath:'id'});recurringStore.createIndex('nextDate','nextDate',{unique:false});recurringStore.createIndex('frequency','frequency',{unique:false});}}};request.onsuccess=event=>{const db=event.target.result;resolve(true);db.close();};request.onerror=event=>{console.error('IndexedDB error:',event.target.error);reject(event.target.error);};});};// Expense operations\nconst expenseDB={// Get all expenses\ngetAll:()=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(EXPENSES_STORE,'readonly');const store=transaction.objectStore(EXPENSES_STORE);const getAllRequest=store.getAll();getAllRequest.onsuccess=()=>{resolve(getAllRequest.result);db.close();};getAllRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Add a new expense\nadd:expense=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(EXPENSES_STORE,'readwrite');const store=transaction.objectStore(EXPENSES_STORE);// Make sure ID is a number and include new fields\nconst newExpense=_objectSpread(_objectSpread({},expense),{},{id:expense.id||Date.now(),walletId:expense.walletId||'cash',isIncome:expense.isIncome||false,notes:expense.notes||'',photoUrl:expense.photoUrl||''});const addRequest=store.add(newExpense);addRequest.onsuccess=()=>{resolve(newExpense);db.close();};addRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Update an expense\nupdate:expense=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(EXPENSES_STORE,'readwrite');const store=transaction.objectStore(EXPENSES_STORE);// Preserve all fields including new ones\nconst updatedExpense=_objectSpread(_objectSpread({},expense),{},{walletId:expense.walletId||'cash',isIncome:expense.isIncome||false,notes:expense.notes||'',photoUrl:expense.photoUrl||''});const updateRequest=store.put(updatedExpense);updateRequest.onsuccess=()=>{resolve(expense);db.close();};updateRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Delete an expense\ndelete:id=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(EXPENSES_STORE,'readwrite');const store=transaction.objectStore(EXPENSES_STORE);const deleteRequest=store.delete(id);deleteRequest.onsuccess=()=>{resolve(id);db.close();};deleteRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});}};// Category operations\nconst categoryDB={// Get all categories\ngetAll:()=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(CATEGORIES_STORE,'readonly');const store=transaction.objectStore(CATEGORIES_STORE);const getAllRequest=store.getAll();getAllRequest.onsuccess=()=>{resolve(getAllRequest.result);db.close();};getAllRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Add a new category\nadd:category=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(CATEGORIES_STORE,'readwrite');const store=transaction.objectStore(CATEGORIES_STORE);const addRequest=store.add(category);addRequest.onsuccess=()=>{resolve(category);db.close();};addRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Update a category\nupdate:category=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(CATEGORIES_STORE,'readwrite');const store=transaction.objectStore(CATEGORIES_STORE);const updateRequest=store.put(category);updateRequest.onsuccess=()=>{resolve(category);db.close();};updateRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Delete a category\ndelete:id=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(CATEGORIES_STORE,'readwrite');const store=transaction.objectStore(CATEGORIES_STORE);const deleteRequest=store.delete(id);deleteRequest.onsuccess=()=>{resolve(id);db.close();};deleteRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});}};// Tags operations\nconst tagDB={// Get all tags\ngetAll:()=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(TAGS_STORE,'readonly');const store=transaction.objectStore(TAGS_STORE);const getAllRequest=store.getAll();getAllRequest.onsuccess=()=>{resolve(getAllRequest.result);db.close();};getAllRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Add a new tag\nadd:tag=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(TAGS_STORE,'readwrite');const store=transaction.objectStore(TAGS_STORE);const addRequest=store.add(tag);addRequest.onsuccess=()=>{resolve(tag);db.close();};addRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Update a tag\nupdate:tag=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(TAGS_STORE,'readwrite');const store=transaction.objectStore(TAGS_STORE);const updateRequest=store.put(tag);updateRequest.onsuccess=()=>{resolve(tag);db.close();};updateRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Delete a tag\ndelete:id=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(TAGS_STORE,'readwrite');const store=transaction.objectStore(TAGS_STORE);const deleteRequest=store.delete(id);deleteRequest.onsuccess=()=>{resolve(id);db.close();};deleteRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});}};// Wallets operations\nconst walletDB={getAll:()=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(WALLETS_STORE,'readonly');const store=transaction.objectStore(WALLETS_STORE);const getAllRequest=store.getAll();getAllRequest.onsuccess=()=>{resolve(getAllRequest.result);db.close();};getAllRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},add:wallet=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(WALLETS_STORE,'readwrite');const store=transaction.objectStore(WALLETS_STORE);const addRequest=store.add(wallet);addRequest.onsuccess=()=>{resolve(wallet);db.close();};addRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},update:wallet=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(WALLETS_STORE,'readwrite');const store=transaction.objectStore(WALLETS_STORE);const updateRequest=store.put(wallet);updateRequest.onsuccess=()=>{resolve(wallet);db.close();};updateRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},delete:id=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(WALLETS_STORE,'readwrite');const store=transaction.objectStore(WALLETS_STORE);const deleteRequest=store.delete(id);deleteRequest.onsuccess=()=>{resolve(id);db.close();};deleteRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});}};// Recurring transaction operations\nconst recurringDB={// Get all recurring transactions\ngetAll:()=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(RECURRING_STORE,'readonly');const store=transaction.objectStore(RECURRING_STORE);const getAllRequest=store.getAll();getAllRequest.onsuccess=()=>{resolve(getAllRequest.result);db.close();};getAllRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Get recurring transaction by ID\ngetById:id=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(RECURRING_STORE,'readonly');const store=transaction.objectStore(RECURRING_STORE);const getRequest=store.get(id);getRequest.onsuccess=()=>{resolve(getRequest.result);db.close();};getRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Add new recurring transaction\nadd:recurring=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(RECURRING_STORE,'readwrite');const store=transaction.objectStore(RECURRING_STORE);const addRequest=store.add(recurring);addRequest.onsuccess=()=>{resolve(recurring);db.close();};addRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Update existing recurring transaction\nupdate:recurring=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(RECURRING_STORE,'readwrite');const store=transaction.objectStore(RECURRING_STORE);const updateRequest=store.put(recurring);updateRequest.onsuccess=()=>{resolve(recurring);db.close();};updateRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Delete recurring transaction\ndelete:id=>{return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(RECURRING_STORE,'readwrite');const store=transaction.objectStore(RECURRING_STORE);const deleteRequest=store.delete(id);deleteRequest.onsuccess=()=>{resolve(true);db.close();};deleteRequest.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});},// Get due recurring transactions based on a date\ngetDueTransactions:function(){let date=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Date();return new Promise((resolve,reject)=>{const request=window.indexedDB.open(DB_NAME,DB_VERSION);request.onsuccess=event=>{const db=event.target.result;const transaction=db.transaction(RECURRING_STORE,'readonly');const store=transaction.objectStore(RECURRING_STORE);const nextDateIndex=store.index('nextDate');// Format date to YYYY-MM-DD for comparison\nconst formatDate=date=>{return date.toISOString().split('T')[0];};// Get all recurring transactions with nextDate less than or equal to the provided date\nconst dateStr=formatDate(date);const range=IDBKeyRange.upperBound(dateStr);const request=nextDateIndex.getAll(range);request.onsuccess=()=>{resolve(request.result);db.close();};request.onerror=error=>{reject(error);db.close();};};request.onerror=event=>{reject(event.target.error);};});}};// Helper function to migrate data from localStorage to IndexedDB\nconst migrateFromLocalStorage=async()=>{try{// Migrate expenses if they exist\nconst savedExpenses=localStorage.getItem('expenses');if(savedExpenses){const expenses=JSON.parse(savedExpenses);for(const expense of expenses){await expenseDB.add(expense);}// Clear localStorage after successful migration\nlocalStorage.removeItem('expenses');}// Migrate categories if they exist\nconst savedCategories=localStorage.getItem('expense-categories');if(savedCategories){const categories=JSON.parse(savedCategories);for(const category of categories){await categoryDB.add(category).catch(()=>{// Category might already exist, just ignore\n});}// Clear localStorage after successful migration\nlocalStorage.removeItem('expense-categories');}return true;}catch(error){console.error('Error migrating data:',error);return false;}};// Initialize database and export methods\nconst initializeDatabase=async()=>{try{// Initialize the database\nconst initialized=await initDB();// If successful, attempt to migrate data from localStorage\nif(initialized){await migrateFromLocalStorage();}return initialized;}catch(error){console.error('Failed to initialize database:',error);return false;}};// Function to delete the IndexedDB database (for troubleshooting)\nconst deleteDatabase=()=>{return new Promise((resolve,reject)=>{if(!window.indexedDB){console.error(\"IndexedDB not supported\");resolve(false);return;}const deleteRequest=window.indexedDB.deleteDatabase(DB_NAME);deleteRequest.onsuccess=()=>{console.log(\"Database deleted successfully\");resolve(true);};deleteRequest.onerror=event=>{console.error(\"Error deleting database:\",event.target.error);reject(event.target.error);};deleteRequest.onblocked=()=>{console.warn(\"Database deletion blocked - close all other tabs with this app open\");// Try again after a short delay\nsetTimeout(()=>{window.indexedDB.deleteDatabase(DB_NAME);resolve(true);},1000);};});};// Export the database utilities\nexport{initializeDatabase,deleteDatabase,expenseDB,categoryDB,tagDB,walletDB,recurringDB};","map":{"version":3,"names":["DB_NAME","DB_VERSION","EXPENSES_STORE","CATEGORIES_STORE","TAGS_STORE","WALLETS_STORE","RECURRING_STORE","DEFAULT_CATEGORIES","id","name","DEFAULT_TAGS","DEFAULT_WALLETS","type","balance","initDB","Promise","resolve","reject","window","indexedDB","console","error","request","open","onupgradeneeded","event","db","target","result","oldVersion","objectStoreNames","contains","expensesStore","createObjectStore","keyPath","createIndex","unique","categoriesStore","forEach","category","add","tagsStore","tag","transaction","objectStore","openCursor","onsuccess","cursor","value","tags","updatedExpense","_objectSpread","update","continue","walletsStore","wallet","walletId","isIncome","notes","photoUrl","recurringStore","close","onerror","expenseDB","getAll","store","getAllRequest","expense","newExpense","Date","now","addRequest","updateRequest","put","delete","deleteRequest","categoryDB","tagDB","walletDB","recurringDB","getById","getRequest","get","recurring","getDueTransactions","date","arguments","length","undefined","nextDateIndex","index","formatDate","toISOString","split","dateStr","range","IDBKeyRange","upperBound","migrateFromLocalStorage","savedExpenses","localStorage","getItem","expenses","JSON","parse","removeItem","savedCategories","categories","catch","initializeDatabase","initialized","deleteDatabase","log","onblocked","warn","setTimeout"],"sources":["/Users/ddm/expense-tracker/src/utils/db.js"],"sourcesContent":["// IndexedDB database utility for expense tracker\n\nconst DB_NAME = 'expense-tracker-db';\nconst DB_VERSION = 6; // Incremented for recurring transactions\nconst EXPENSES_STORE = 'expenses';\nconst CATEGORIES_STORE = 'categories';\nconst TAGS_STORE = 'tags';\nconst WALLETS_STORE = 'wallets';\nconst RECURRING_STORE = 'recurring'; // New store for recurring transactions\n\n// Default categories\nconst DEFAULT_CATEGORIES = [\n  { id: 'food', name: 'Food' },\n  { id: 'transportation', name: 'Transportation' },\n  { id: 'entertainment', name: 'Entertainment' },\n  { id: 'utilities', name: 'Utilities' },\n  { id: 'housing', name: 'Housing' },\n  { id: 'healthcare', name: 'Healthcare' },\n  { id: 'other', name: 'Other' }\n];\n\n// Default tags\nconst DEFAULT_TAGS = [\n  { id: 'essential', name: 'Essential' },\n  { id: 'recurring', name: 'Recurring' },\n  { id: 'emergency', name: 'Emergency' },\n  { id: 'personal', name: 'Personal' },\n  { id: 'work', name: 'Work' },\n  { id: 'family', name: 'Family' },\n  { id: 'vacation', name: 'Vacation' },\n  { id: 'gift', name: 'Gift' },\n  { id: 'savings', name: 'Savings' },\n  { id: 'education', name: 'Education' }\n];\n\n// Default wallets\nconst DEFAULT_WALLETS = [\n  { id: 'cash', name: 'Cash', type: 'cash', balance: 0 },\n  { id: 'bank', name: 'Bank Account', type: 'bank', balance: 0 },\n  { id: 'credit', name: 'Credit Card', type: 'credit_card', balance: 0 },\n  { id: 'ewallet', name: 'E-Wallet', type: 'e_wallet', balance: 0 },\n];\n\n// Initialize the database\nconst initDB = () => {\n  return new Promise((resolve, reject) => {\n    // Check if IndexedDB is supported\n    if (!window.indexedDB) {\n      console.error(\"Your browser doesn't support IndexedDB\");\n      // Fall back to localStorage\n      resolve(false);\n      return;\n    }\n\n    const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\n    // Handle database upgrade (first time or version change)\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      const oldVersion = event.oldVersion;\n      \n      // First time setup or upgrade from version 0\n      if (oldVersion < 1) {\n        // Create expenses store with auto-incrementing id\n        if (!db.objectStoreNames.contains(EXPENSES_STORE)) {\n          const expensesStore = db.createObjectStore(EXPENSES_STORE, { keyPath: 'id' });\n          expensesStore.createIndex('date', 'date', { unique: false });\n          expensesStore.createIndex('category', 'category', { unique: false });\n        }\n        \n        // Create categories store\n        if (!db.objectStoreNames.contains(CATEGORIES_STORE)) {\n          const categoriesStore = db.createObjectStore(CATEGORIES_STORE, { keyPath: 'id' });\n          \n          // Add default categories\n          DEFAULT_CATEGORIES.forEach(category => {\n            categoriesStore.add(category);\n          });\n        }\n      }\n      \n      // Upgrade to version 2 - adding tags support\n      if (oldVersion < 2) {\n        // Create tags store if it doesn't exist\n        if (!db.objectStoreNames.contains(TAGS_STORE)) {\n          const tagsStore = db.createObjectStore(TAGS_STORE, { keyPath: 'id' });\n          \n          // Add default tags\n          DEFAULT_TAGS.forEach(tag => {\n            tagsStore.add(tag);\n          });\n        }\n        \n        // Update expenses store to include tags if it exists\n        if (db.objectStoreNames.contains(EXPENSES_STORE)) {\n          // We can't modify the schema of an existing object store in onupgradeneeded\n          // So we need to create a new index for the existing store\n          const transaction = event.target.transaction;\n          const expensesStore = transaction.objectStore(EXPENSES_STORE);\n          \n          // Get all existing expenses\n          expensesStore.openCursor().onsuccess = (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n              // Add tags array to existing expenses if they don't have it\n              if (!cursor.value.tags) {\n                const updatedExpense = { ...cursor.value, tags: [] };\n                cursor.update(updatedExpense);\n              }\n              cursor.continue();\n            }\n          };\n        }\n      }\n      \n      // Upgrade to version 3 - add wallets support\n      if (oldVersion < 3) {\n        if (!db.objectStoreNames.contains(WALLETS_STORE)) {\n          const walletsStore = db.createObjectStore(WALLETS_STORE, { keyPath: 'id' });\n          DEFAULT_WALLETS.forEach(wallet => walletsStore.add(wallet));\n        }\n      }\n      \n      // Upgrade to version 4 - add walletId to expenses\n      if (oldVersion < 4) {\n        if (db.objectStoreNames.contains(EXPENSES_STORE)) {\n          const transaction = event.target.transaction;\n          const expensesStore = transaction.objectStore(EXPENSES_STORE);\n          expensesStore.openCursor().onsuccess = async (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n              if (!cursor.value.walletId) {\n                // Assign to 'cash' wallet by default\n                const updatedExpense = { ...cursor.value, walletId: 'cash' };\n                cursor.update(updatedExpense);\n              }\n              cursor.continue();\n            }\n          };\n        }\n      }\n      \n      // Upgrade to version 5 - add income tracking, notes and photo support\n      if (oldVersion < 5) {\n        if (db.objectStoreNames.contains(EXPENSES_STORE)) {\n          const transaction = event.target.transaction;\n          const expensesStore = transaction.objectStore(EXPENSES_STORE);\n          \n          expensesStore.openCursor().onsuccess = (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n              // Add new fields to existing expenses\n              const updatedExpense = { \n                ...cursor.value, \n                isIncome: cursor.value.isIncome || false,\n                notes: cursor.value.notes || '',\n                photoUrl: cursor.value.photoUrl || ''\n              };\n              cursor.update(updatedExpense);\n              cursor.continue();\n            }\n          };\n        }\n      }\n      \n      // Upgrade to version 6 - add recurring transactions\n      if (oldVersion < 6) {\n        if (!db.objectStoreNames.contains(RECURRING_STORE)) {\n          const recurringStore = db.createObjectStore(RECURRING_STORE, { keyPath: 'id' });\n          recurringStore.createIndex('nextDate', 'nextDate', { unique: false });\n          recurringStore.createIndex('frequency', 'frequency', { unique: false });\n        }\n      }\n    };\n\n    request.onsuccess = (event) => {\n      const db = event.target.result;\n      resolve(true);\n      db.close();\n    };\n\n    request.onerror = (event) => {\n      console.error('IndexedDB error:', event.target.error);\n      reject(event.target.error);\n    };\n  });\n};\n\n// Expense operations\nconst expenseDB = {\n  // Get all expenses\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readonly');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Add a new expense\n  add: (expense) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        // Make sure ID is a number and include new fields\n        const newExpense = {\n          ...expense,\n          id: expense.id || Date.now(),\n          walletId: expense.walletId || 'cash',\n          isIncome: expense.isIncome || false,\n          notes: expense.notes || '',\n          photoUrl: expense.photoUrl || ''\n        };\n        \n        const addRequest = store.add(newExpense);\n        \n        addRequest.onsuccess = () => {\n          resolve(newExpense);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Update an expense\n  update: (expense) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        // Preserve all fields including new ones\n        const updatedExpense = { \n          ...expense, \n          walletId: expense.walletId || 'cash',\n          isIncome: expense.isIncome || false,\n          notes: expense.notes || '',\n          photoUrl: expense.photoUrl || ''\n        };\n        \n        const updateRequest = store.put(updatedExpense);\n        \n        updateRequest.onsuccess = () => {\n          resolve(expense);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Delete an expense\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Category operations\nconst categoryDB = {\n  // Get all categories\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readonly');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Add a new category\n  add: (category) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const addRequest = store.add(category);\n        \n        addRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Update a category\n  update: (category) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const updateRequest = store.put(category);\n        \n        updateRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Delete a category\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Tags operations\nconst tagDB = {\n  // Get all tags\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readonly');\n        const store = transaction.objectStore(TAGS_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Add a new tag\n  add: (tag) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        \n        const addRequest = store.add(tag);\n        \n        addRequest.onsuccess = () => {\n          resolve(tag);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Update a tag\n  update: (tag) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        \n        const updateRequest = store.put(tag);\n        \n        updateRequest.onsuccess = () => {\n          resolve(tag);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Delete a tag\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        \n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Wallets operations\nconst walletDB = {\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readonly');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  add: (wallet) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readwrite');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const addRequest = store.add(wallet);\n        addRequest.onsuccess = () => {\n          resolve(wallet);\n          db.close();\n        };\n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  update: (wallet) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readwrite');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const updateRequest = store.put(wallet);\n        updateRequest.onsuccess = () => {\n          resolve(wallet);\n          db.close();\n        };\n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readwrite');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Recurring transaction operations\nconst recurringDB = {\n  // Get all recurring transactions\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readonly');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n\n  // Get recurring transaction by ID\n  getById: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readonly');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const getRequest = store.get(id);\n        \n        getRequest.onsuccess = () => {\n          resolve(getRequest.result);\n          db.close();\n        };\n        \n        getRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n\n  // Add new recurring transaction\n  add: (recurring) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readwrite');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const addRequest = store.add(recurring);\n        \n        addRequest.onsuccess = () => {\n          resolve(recurring);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n\n  // Update existing recurring transaction\n  update: (recurring) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readwrite');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const updateRequest = store.put(recurring);\n        \n        updateRequest.onsuccess = () => {\n          resolve(recurring);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n\n  // Delete recurring transaction\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readwrite');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(true);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Get due recurring transactions based on a date\n  getDueTransactions: (date = new Date()) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readonly');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const nextDateIndex = store.index('nextDate');\n        \n        // Format date to YYYY-MM-DD for comparison\n        const formatDate = (date) => {\n          return date.toISOString().split('T')[0];\n        };\n        \n        // Get all recurring transactions with nextDate less than or equal to the provided date\n        const dateStr = formatDate(date);\n        const range = IDBKeyRange.upperBound(dateStr);\n        const request = nextDateIndex.getAll(range);\n        \n        request.onsuccess = () => {\n          resolve(request.result);\n          db.close();\n        };\n        \n        request.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Helper function to migrate data from localStorage to IndexedDB\nconst migrateFromLocalStorage = async () => {\n  try {\n    // Migrate expenses if they exist\n    const savedExpenses = localStorage.getItem('expenses');\n    if (savedExpenses) {\n      const expenses = JSON.parse(savedExpenses);\n      for (const expense of expenses) {\n        await expenseDB.add(expense);\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expenses');\n    }\n    \n    // Migrate categories if they exist\n    const savedCategories = localStorage.getItem('expense-categories');\n    if (savedCategories) {\n      const categories = JSON.parse(savedCategories);\n      for (const category of categories) {\n        await categoryDB.add(category).catch(() => {\n          // Category might already exist, just ignore\n        });\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expense-categories');\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error migrating data:', error);\n    return false;\n  }\n};\n\n// Initialize database and export methods\nconst initializeDatabase = async () => {\n  try {\n    // Initialize the database\n    const initialized = await initDB();\n    \n    // If successful, attempt to migrate data from localStorage\n    if (initialized) {\n      await migrateFromLocalStorage();\n    }\n    \n    return initialized;\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n    return false;\n  }\n};\n\n// Function to delete the IndexedDB database (for troubleshooting)\nconst deleteDatabase = () => {\n  return new Promise((resolve, reject) => {\n    if (!window.indexedDB) {\n      console.error(\"IndexedDB not supported\");\n      resolve(false);\n      return;\n    }\n\n    const deleteRequest = window.indexedDB.deleteDatabase(DB_NAME);\n    \n    deleteRequest.onsuccess = () => {\n      console.log(\"Database deleted successfully\");\n      resolve(true);\n    };\n    \n    deleteRequest.onerror = (event) => {\n      console.error(\"Error deleting database:\", event.target.error);\n      reject(event.target.error);\n    };\n    \n    deleteRequest.onblocked = () => {\n      console.warn(\"Database deletion blocked - close all other tabs with this app open\");\n      // Try again after a short delay\n      setTimeout(() => {\n        window.indexedDB.deleteDatabase(DB_NAME);\n        resolve(true);\n      }, 1000);\n    };\n  });\n};\n\n// Export the database utilities\nexport {\n  initializeDatabase,\n  deleteDatabase,\n  expenseDB,\n  categoryDB,\n  tagDB,\n  walletDB,\n  recurringDB\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}