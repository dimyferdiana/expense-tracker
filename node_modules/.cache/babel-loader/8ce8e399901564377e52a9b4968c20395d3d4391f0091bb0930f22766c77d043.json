{"ast":null,"code":"// IndexedDB database utility for expense tracker\n\nconst DB_NAME = 'expense-tracker-db';\nconst DB_VERSION = 1;\nconst EXPENSES_STORE = 'expenses';\nconst CATEGORIES_STORE = 'categories';\n\n// Default categories\nconst DEFAULT_CATEGORIES = [{\n  id: 'food',\n  name: 'Food'\n}, {\n  id: 'transportation',\n  name: 'Transportation'\n}, {\n  id: 'entertainment',\n  name: 'Entertainment'\n}, {\n  id: 'utilities',\n  name: 'Utilities'\n}, {\n  id: 'housing',\n  name: 'Housing'\n}, {\n  id: 'healthcare',\n  name: 'Healthcare'\n}, {\n  id: 'other',\n  name: 'Other'\n}];\n\n// Initialize the database\nconst initDB = () => {\n  return new Promise((resolve, reject) => {\n    // Check if IndexedDB is supported\n    if (!window.indexedDB) {\n      console.error(\"Your browser doesn't support IndexedDB\");\n      // Fall back to localStorage\n      resolve(false);\n      return;\n    }\n    const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\n    // Handle database upgrade (first time or version change)\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n\n      // Create expenses store with auto-incrementing id\n      if (!db.objectStoreNames.contains(EXPENSES_STORE)) {\n        const expensesStore = db.createObjectStore(EXPENSES_STORE, {\n          keyPath: 'id'\n        });\n        expensesStore.createIndex('date', 'date', {\n          unique: false\n        });\n        expensesStore.createIndex('category', 'category', {\n          unique: false\n        });\n      }\n\n      // Create categories store\n      if (!db.objectStoreNames.contains(CATEGORIES_STORE)) {\n        const categoriesStore = db.createObjectStore(CATEGORIES_STORE, {\n          keyPath: 'id'\n        });\n\n        // Add default categories\n        DEFAULT_CATEGORIES.forEach(category => {\n          categoriesStore.add(category);\n        });\n      }\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      resolve(true);\n      db.close();\n    };\n    request.onerror = event => {\n      console.error('IndexedDB error:', event.target.error);\n      reject(event.target.error);\n    };\n  });\n};\n\n// Expense operations\nconst expenseDB = {\n  // Get all expenses\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readonly');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Add a new expense\n  add: expense => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n\n        // Make sure ID is a number\n        const newExpense = {\n          ...expense,\n          id: expense.id || Date.now()\n        };\n        const addRequest = store.add(newExpense);\n        addRequest.onsuccess = () => {\n          resolve(newExpense);\n          db.close();\n        };\n        addRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Update an expense\n  update: expense => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const updateRequest = store.put(expense);\n        updateRequest.onsuccess = () => {\n          resolve(expense);\n          db.close();\n        };\n        updateRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Delete an expense\n  delete: id => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        deleteRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Category operations\nconst categoryDB = {\n  // Get all categories\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readonly');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Add a new category\n  add: category => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const addRequest = store.add(category);\n        addRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        addRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Update a category\n  update: category => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const updateRequest = store.put(category);\n        updateRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        updateRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Delete a category\n  delete: id => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        deleteRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Helper function to migrate data from localStorage to IndexedDB\nconst migrateFromLocalStorage = async () => {\n  try {\n    // Migrate expenses if they exist\n    const savedExpenses = localStorage.getItem('expenses');\n    if (savedExpenses) {\n      const expenses = JSON.parse(savedExpenses);\n      for (const expense of expenses) {\n        await expenseDB.add(expense);\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expenses');\n    }\n\n    // Migrate categories if they exist\n    const savedCategories = localStorage.getItem('expense-categories');\n    if (savedCategories) {\n      const categories = JSON.parse(savedCategories);\n      for (const category of categories) {\n        await categoryDB.add(category).catch(() => {\n          // Category might already exist, just ignore\n        });\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expense-categories');\n    }\n    return true;\n  } catch (error) {\n    console.error('Error migrating data:', error);\n    return false;\n  }\n};\n\n// Initialize database and export methods\nconst initializeDatabase = async () => {\n  try {\n    // First initialize the database\n    const isInitialized = await initDB();\n    if (isInitialized) {\n      // Migrate any existing data from localStorage\n      await migrateFromLocalStorage();\n    }\n    return isInitialized;\n  } catch (error) {\n    console.error('Error initializing database:', error);\n    return false;\n  }\n};\nexport { initializeDatabase, expenseDB, categoryDB };","map":{"version":3,"names":["DB_NAME","DB_VERSION","EXPENSES_STORE","CATEGORIES_STORE","DEFAULT_CATEGORIES","id","name","initDB","Promise","resolve","reject","window","indexedDB","console","error","request","open","onupgradeneeded","event","db","target","result","objectStoreNames","contains","expensesStore","createObjectStore","keyPath","createIndex","unique","categoriesStore","forEach","category","add","onsuccess","close","onerror","expenseDB","getAll","transaction","store","objectStore","getAllRequest","expense","newExpense","Date","now","addRequest","update","updateRequest","put","delete","deleteRequest","categoryDB","migrateFromLocalStorage","savedExpenses","localStorage","getItem","expenses","JSON","parse","removeItem","savedCategories","categories","catch","initializeDatabase","isInitialized"],"sources":["/Users/ddm/expense-tracker/src/utils/db.js"],"sourcesContent":["// IndexedDB database utility for expense tracker\n\nconst DB_NAME = 'expense-tracker-db';\nconst DB_VERSION = 1;\nconst EXPENSES_STORE = 'expenses';\nconst CATEGORIES_STORE = 'categories';\n\n// Default categories\nconst DEFAULT_CATEGORIES = [\n  { id: 'food', name: 'Food' },\n  { id: 'transportation', name: 'Transportation' },\n  { id: 'entertainment', name: 'Entertainment' },\n  { id: 'utilities', name: 'Utilities' },\n  { id: 'housing', name: 'Housing' },\n  { id: 'healthcare', name: 'Healthcare' },\n  { id: 'other', name: 'Other' }\n];\n\n// Initialize the database\nconst initDB = () => {\n  return new Promise((resolve, reject) => {\n    // Check if IndexedDB is supported\n    if (!window.indexedDB) {\n      console.error(\"Your browser doesn't support IndexedDB\");\n      // Fall back to localStorage\n      resolve(false);\n      return;\n    }\n\n    const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\n    // Handle database upgrade (first time or version change)\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      \n      // Create expenses store with auto-incrementing id\n      if (!db.objectStoreNames.contains(EXPENSES_STORE)) {\n        const expensesStore = db.createObjectStore(EXPENSES_STORE, { keyPath: 'id' });\n        expensesStore.createIndex('date', 'date', { unique: false });\n        expensesStore.createIndex('category', 'category', { unique: false });\n      }\n      \n      // Create categories store\n      if (!db.objectStoreNames.contains(CATEGORIES_STORE)) {\n        const categoriesStore = db.createObjectStore(CATEGORIES_STORE, { keyPath: 'id' });\n        \n        // Add default categories\n        DEFAULT_CATEGORIES.forEach(category => {\n          categoriesStore.add(category);\n        });\n      }\n    };\n\n    request.onsuccess = (event) => {\n      const db = event.target.result;\n      resolve(true);\n      db.close();\n    };\n\n    request.onerror = (event) => {\n      console.error('IndexedDB error:', event.target.error);\n      reject(event.target.error);\n    };\n  });\n};\n\n// Expense operations\nconst expenseDB = {\n  // Get all expenses\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readonly');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Add a new expense\n  add: (expense) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        // Make sure ID is a number\n        const newExpense = {\n          ...expense,\n          id: expense.id || Date.now()\n        };\n        \n        const addRequest = store.add(newExpense);\n        \n        addRequest.onsuccess = () => {\n          resolve(newExpense);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Update an expense\n  update: (expense) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        const updateRequest = store.put(expense);\n        \n        updateRequest.onsuccess = () => {\n          resolve(expense);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Delete an expense\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Category operations\nconst categoryDB = {\n  // Get all categories\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readonly');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Add a new category\n  add: (category) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const addRequest = store.add(category);\n        \n        addRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Update a category\n  update: (category) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const updateRequest = store.put(category);\n        \n        updateRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Delete a category\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Helper function to migrate data from localStorage to IndexedDB\nconst migrateFromLocalStorage = async () => {\n  try {\n    // Migrate expenses if they exist\n    const savedExpenses = localStorage.getItem('expenses');\n    if (savedExpenses) {\n      const expenses = JSON.parse(savedExpenses);\n      for (const expense of expenses) {\n        await expenseDB.add(expense);\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expenses');\n    }\n    \n    // Migrate categories if they exist\n    const savedCategories = localStorage.getItem('expense-categories');\n    if (savedCategories) {\n      const categories = JSON.parse(savedCategories);\n      for (const category of categories) {\n        await categoryDB.add(category).catch(() => {\n          // Category might already exist, just ignore\n        });\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expense-categories');\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error migrating data:', error);\n    return false;\n  }\n};\n\n// Initialize database and export methods\nconst initializeDatabase = async () => {\n  try {\n    // First initialize the database\n    const isInitialized = await initDB();\n    \n    if (isInitialized) {\n      // Migrate any existing data from localStorage\n      await migrateFromLocalStorage();\n    }\n    \n    return isInitialized;\n  } catch (error) {\n    console.error('Error initializing database:', error);\n    return false;\n  }\n};\n\nexport { initializeDatabase, expenseDB, categoryDB }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}