{"ast":null,"code":"var _jsxFileName = \"/Users/ddm/expense-tracker/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ExpenseForm from './components/ExpenseForm';\nimport ExpenseList from './components/ExpenseList';\nimport ExpenseSummary from './components/ExpenseSummary';\nimport ExpenseChart from './components/ExpenseChart';\nimport Settings from './components/Settings';\nimport RecurringForm from './components/RecurringForm';\nimport RecurringList from './components/RecurringList';\nimport BottomNavigation from './components/BottomNavigation';\nimport FloatingActionButton from './components/FloatingActionButton';\nimport Modal from './components/Modal';\nimport { Navbar, NavbarDivider, NavbarItem, NavbarLabel, NavbarSection, NavbarSpacer } from './components/Navbar';\nimport { Dropdown, DropdownButton, DropdownDivider, DropdownItem, DropdownLabel, DropdownMenu } from './components/Dropdown';\nimport { Avatar } from './components/Avatar';\nimport { initializeDatabase, expenseDB, categoryDB, walletDB, recurringDB } from './utils/db';\nimport Wallets from './components/Wallets';\nimport WalletSummary from './components/WalletSummary';\nimport { processRecurringTransactions } from './utils/scheduler';\nimport TransactionListPage from './pages/TransactionListPage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [activeTab, setActiveTab] = useState('home');\n  const [expenses, setExpenses] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [dbInitialized, setDbInitialized] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isRecurringModalOpen, setIsRecurringModalOpen] = useState(false);\n  const [refreshRecurring, setRefreshRecurring] = useState(0); // Counter to trigger refreshes\n  const [refreshWallets, setRefreshWallets] = useState(0); // Counter to trigger wallet refreshes\n\n  // Initialize database\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const initialized = await initializeDatabase();\n        setDbInitialized(initialized);\n        if (initialized) {\n          // Load all expenses after DB initialization\n          loadExpenses();\n\n          // Check for and process any recurring transactions that are due\n          const result = await processRecurringTransactions();\n          if (result.processed > 0) {\n            // If transactions were processed, refresh the expenses list\n            loadExpenses();\n            // And update the recurring transactions counter\n            setRefreshRecurring(prev => prev + 1);\n          }\n        } else {\n          // Fall back to localStorage if IndexedDB fails\n          fallbackToLocalStorage();\n        }\n      } catch (error) {\n        console.error('Failed to initialize database:', error);\n        fallbackToLocalStorage();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    init();\n  }, []);\n\n  // Fallback to localStorage if IndexedDB fails\n  const fallbackToLocalStorage = () => {\n    const savedExpenses = localStorage.getItem('expenses');\n    if (savedExpenses) {\n      setExpenses(JSON.parse(savedExpenses));\n    }\n    setIsLoading(false);\n  };\n\n  // Load expenses from IndexedDB\n  const loadExpenses = async () => {\n    try {\n      const allExpenses = await expenseDB.getAll();\n      setExpenses(allExpenses);\n    } catch (error) {\n      console.error('Error loading expenses:', error);\n      fallbackToLocalStorage();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Save expenses to localStorage (fallback)\n  useEffect(() => {\n    if (!dbInitialized && expenses.length > 0) {\n      localStorage.setItem('expenses', JSON.stringify(expenses));\n    }\n  }, [expenses, dbInitialized]);\n\n  // Add new expense\n  const addExpense = async expense => {\n    // Normalize tags: convert any tag objects to just their IDs\n    // Tags from our selector should already have proper IDs now, not temporary ones\n    const normalizedTags = expense.tags.map(tag => typeof tag === 'object' && tag !== null ? tag.id : tag);\n    const newExpense = {\n      ...expense,\n      tags: normalizedTags,\n      id: Date.now(),\n      // Simple way to generate unique ID\n      date: new Date().toISOString().slice(0, 10) // YYYY-MM-DD format\n    };\n    if (dbInitialized) {\n      try {\n        // Add the expense to the database\n        await expenseDB.add(newExpense);\n\n        // Update wallet balance based on transaction type\n        if (newExpense.walletId) {\n          try {\n            // Get the current wallet\n            const wallets = await walletDB.getAll();\n            const wallet = wallets.find(w => w.id === newExpense.walletId);\n            if (wallet) {\n              // Update wallet balance based on transaction type\n              if (newExpense.isIncome) {\n                // Add income to wallet balance\n                wallet.balance = parseFloat(wallet.balance) + parseFloat(newExpense.amount);\n              } else {\n                // Subtract expense from wallet balance\n                wallet.balance = parseFloat(wallet.balance) - parseFloat(newExpense.amount);\n              }\n              await walletDB.update(wallet);\n            }\n          } catch (walletError) {\n            console.error('Error updating wallet balance:', walletError);\n          }\n        }\n\n        // Reload expenses from DB\n        loadExpenses();\n        // Refresh wallet balance display\n        setRefreshWallets(prev => prev + 1);\n        // Close modal after adding expense\n        setIsModalOpen(false);\n      } catch (error) {\n        console.error('Error adding expense:', error);\n        // Fall back to state-only update\n        setExpenses(prevExpenses => [...prevExpenses, newExpense]);\n        setIsModalOpen(false);\n      }\n    } else {\n      // If DB not initialized, just update state\n      setExpenses(prevExpenses => [...prevExpenses, newExpense]);\n\n      // Also update wallet in localStorage if available\n      try {\n        const savedWallets = localStorage.getItem('wallets');\n        if (savedWallets && newExpense.walletId) {\n          const wallets = JSON.parse(savedWallets);\n          const walletIndex = wallets.findIndex(w => w.id === newExpense.walletId);\n          if (walletIndex !== -1) {\n            if (newExpense.isIncome) {\n              // Add income to wallet balance\n              wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) + parseFloat(newExpense.amount);\n            } else {\n              // Subtract expense from wallet balance\n              wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) - parseFloat(newExpense.amount);\n            }\n            localStorage.setItem('wallets', JSON.stringify(wallets));\n          }\n        }\n      } catch (e) {\n        console.error('Error updating wallet in localStorage:', e);\n      }\n\n      // Close modal after adding expense\n      setIsModalOpen(false);\n      // Refresh wallet balance display\n      setRefreshWallets(prev => prev + 1);\n    }\n  };\n\n  // Update existing expense\n  const updateExpense = async updatedExpense => {\n    // Normalize tags: convert any tag objects to just their IDs\n    // Tags from our selector should already have proper IDs now, not temporary ones\n    const normalizedTags = updatedExpense.tags.map(tag => typeof tag === 'object' && tag !== null ? tag.id : tag);\n    const normalizedExpense = {\n      ...updatedExpense,\n      tags: normalizedTags\n    };\n    if (dbInitialized) {\n      try {\n        // Find the original expense to get the original amount and wallet\n        const allExpenses = await expenseDB.getAll();\n        const originalExpense = allExpenses.find(e => e.id === normalizedExpense.id);\n        if (originalExpense) {\n          // If wallets are different or amounts are different, adjust balances\n          if (originalExpense.walletId !== normalizedExpense.walletId || parseFloat(originalExpense.amount) !== parseFloat(normalizedExpense.amount)) {\n            try {\n              const wallets = await walletDB.getAll();\n\n              // Return money to the original wallet\n              if (originalExpense.walletId) {\n                const originalWallet = wallets.find(w => w.id === originalExpense.walletId);\n                if (originalWallet) {\n                  if (originalExpense.isIncome) {\n                    // Remove the income amount from the original wallet\n                    originalWallet.balance = parseFloat(originalWallet.balance) - parseFloat(originalExpense.amount);\n                  } else {\n                    // Return the expense amount to the original wallet\n                    originalWallet.balance = parseFloat(originalWallet.balance) + parseFloat(originalExpense.amount);\n                  }\n                  await walletDB.update(originalWallet);\n                }\n              }\n\n              // Update the new wallet balance\n              if (normalizedExpense.walletId) {\n                const newWallet = wallets.find(w => w.id === normalizedExpense.walletId);\n                if (newWallet) {\n                  if (normalizedExpense.isIncome) {\n                    // Add the income amount to the new wallet\n                    newWallet.balance = parseFloat(newWallet.balance) + parseFloat(normalizedExpense.amount);\n                  } else {\n                    // Deduct the expense amount from the new wallet\n                    newWallet.balance = parseFloat(newWallet.balance) - parseFloat(normalizedExpense.amount);\n                  }\n                  await walletDB.update(newWallet);\n                }\n              }\n            } catch (walletError) {\n              console.error('Error adjusting wallet balances:', walletError);\n            }\n          }\n        }\n\n        // Update the expense\n        await expenseDB.update(normalizedExpense);\n\n        // Reload expenses from DB\n        loadExpenses();\n        // Refresh wallet balance display\n        setRefreshWallets(prev => prev + 1);\n      } catch (error) {\n        console.error('Error updating expense:', error);\n        // Fall back to state-only update\n        setExpenses(prevExpenses => prevExpenses.map(expense => expense.id === normalizedExpense.id ? normalizedExpense : expense));\n      }\n    } else {\n      // If DB not initialized, handle localStorage\n      const savedExpenses = JSON.parse(localStorage.getItem('expenses') || '[]');\n      const originalExpense = savedExpenses.find(e => e.id === normalizedExpense.id);\n\n      // Adjust wallet balances in localStorage if needed\n      if (originalExpense && (originalExpense.walletId !== normalizedExpense.walletId || parseFloat(originalExpense.amount) !== parseFloat(normalizedExpense.amount))) {\n        try {\n          const savedWallets = localStorage.getItem('wallets');\n          if (savedWallets) {\n            let wallets = JSON.parse(savedWallets);\n\n            // Return money to the original wallet\n            if (originalExpense.walletId) {\n              const originalWalletIndex = wallets.findIndex(w => w.id === originalExpense.walletId);\n              if (originalWalletIndex !== -1) {\n                if (originalExpense.isIncome) {\n                  // Remove the income amount from the original wallet\n                  wallets[originalWalletIndex].balance = parseFloat(wallets[originalWalletIndex].balance) - parseFloat(originalExpense.amount);\n                } else {\n                  // Return the expense amount to the original wallet\n                  wallets[originalWalletIndex].balance = parseFloat(wallets[originalWalletIndex].balance) + parseFloat(originalExpense.amount);\n                }\n              }\n            }\n\n            // Update the new wallet balance\n            if (normalizedExpense.walletId) {\n              const newWalletIndex = wallets.findIndex(w => w.id === normalizedExpense.walletId);\n              if (newWalletIndex !== -1) {\n                if (normalizedExpense.isIncome) {\n                  // Add the income amount to the new wallet\n                  wallets[newWalletIndex].balance = parseFloat(wallets[newWalletIndex].balance) + parseFloat(normalizedExpense.amount);\n                } else {\n                  // Deduct the expense amount from the new wallet\n                  wallets[newWalletIndex].balance = parseFloat(wallets[newWalletIndex].balance) - parseFloat(normalizedExpense.amount);\n                }\n              }\n            }\n            localStorage.setItem('wallets', JSON.stringify(wallets));\n          }\n        } catch (e) {\n          console.error('Error updating wallet in localStorage:', e);\n        }\n      }\n\n      // Update expenses in state\n      setExpenses(prevExpenses => prevExpenses.map(expense => expense.id === normalizedExpense.id ? normalizedExpense : expense));\n      // Refresh wallet balance display\n      setRefreshWallets(prev => prev + 1);\n    }\n  };\n\n  // Delete expense\n  const deleteExpense = async id => {\n    if (dbInitialized) {\n      try {\n        // Find the expense to get its amount and wallet\n        const allExpenses = await expenseDB.getAll();\n        const expenseToDelete = allExpenses.find(e => e.id === id);\n        if (expenseToDelete && expenseToDelete.walletId) {\n          try {\n            // Get the wallet\n            const wallets = await walletDB.getAll();\n            const wallet = wallets.find(w => w.id === expenseToDelete.walletId);\n            if (wallet) {\n              // Add the expense amount back to the wallet balance (since expense is being deleted)\n              if (expenseToDelete.isIncome) {\n                // For income transactions, subtract it back from wallet balance when deleted\n                wallet.balance = parseFloat(wallet.balance) - parseFloat(expenseToDelete.amount);\n              } else {\n                // For expenses, add it back to wallet balance when deleted\n                wallet.balance = parseFloat(wallet.balance) + parseFloat(expenseToDelete.amount);\n              }\n              await walletDB.update(wallet);\n            }\n          } catch (walletError) {\n            console.error('Error updating wallet balance:', walletError);\n          }\n        }\n\n        // Delete the expense\n        await expenseDB.delete(id);\n\n        // Reload expenses from DB\n        loadExpenses();\n        // Refresh wallet balance display\n        setRefreshWallets(prev => prev + 1);\n      } catch (error) {\n        console.error('Error deleting expense:', error);\n        // Fall back to state-only update\n        setExpenses(prevExpenses => prevExpenses.filter(expense => expense.id !== id));\n      }\n    } else {\n      // If DB not initialized, find the expense in state before filtering\n      const expenseToDelete = expenses.find(e => e.id === id);\n\n      // Update wallet in localStorage if available\n      if (expenseToDelete && expenseToDelete.walletId) {\n        try {\n          const savedWallets = localStorage.getItem('wallets');\n          if (savedWallets) {\n            let wallets = JSON.parse(savedWallets);\n            const walletIndex = wallets.findIndex(w => w.id === expenseToDelete.walletId);\n            if (walletIndex !== -1) {\n              if (expenseToDelete.isIncome) {\n                // For income transactions, subtract it back from wallet balance when deleted\n                wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) - parseFloat(expenseToDelete.amount);\n              } else {\n                // For expenses, add it back to wallet balance when deleted\n                wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) + parseFloat(expenseToDelete.amount);\n              }\n              localStorage.setItem('wallets', JSON.stringify(wallets));\n            }\n          }\n        } catch (e) {\n          console.error('Error updating wallet in localStorage:', e);\n        }\n      }\n\n      // Update state\n      setExpenses(prevExpenses => prevExpenses.filter(expense => expense.id !== id));\n      // Refresh wallet balance display\n      setRefreshWallets(prev => prev + 1);\n    }\n  };\n\n  // Calculate total expenses and income\n  const totalExpenses = expenses.filter(expense => !expense.isIncome).reduce((total, expense) => total + parseFloat(expense.amount), 0);\n  const totalIncome = expenses.filter(expense => expense.isIncome).reduce((total, expense) => total + parseFloat(expense.amount), 0);\n  const netCashFlow = totalIncome - totalExpenses;\n\n  // Add recurring transaction\n  const addRecurringTransaction = async transaction => {\n    try {\n      // Normalize tags: convert any tag objects to just their IDs\n      const normalizedTags = transaction.tags.map(tag => typeof tag === 'object' && tag !== null ? tag.id : tag);\n\n      // Ensure all required fields exist\n      const normalizedTransaction = {\n        ...transaction,\n        id: transaction.id || Date.now(),\n        tags: normalizedTags,\n        name: transaction.name || '',\n        amount: parseFloat(transaction.amount || 0),\n        walletId: transaction.walletId || 'cash',\n        category: transaction.category || 'other',\n        frequency: transaction.frequency || 'monthly',\n        startDate: transaction.startDate || new Date().toISOString().slice(0, 10),\n        nextDate: transaction.startDate || new Date().toISOString().slice(0, 10),\n        // Initially use startDate as nextDate\n        isIncome: !!transaction.isIncome,\n        notes: transaction.notes || ''\n      };\n      if (dbInitialized) {\n        try {\n          console.log('Saving recurring transaction:', normalizedTransaction);\n          // Add to database\n          await recurringDB.add(normalizedTransaction);\n\n          // Process past occurrences if the start date is in the past\n          const startDate = new Date(normalizedTransaction.startDate);\n          const today = new Date();\n          today.setHours(0, 0, 0, 0); // Reset time part for proper comparison\n\n          if (startDate <= today) {\n            console.log('Start date is in the past, processing past occurrences');\n            // Create a transaction for the start date first\n            await createTransactionFromRecurring({\n              ...normalizedTransaction,\n              date: normalizedTransaction.startDate // Use the start date as the transaction date\n            });\n\n            // If start date is before today, generate additional occurrences as needed\n            if (startDate < today) {\n              let currentDate = startDate;\n              let occurrenceDate = startDate;\n              let nextDate;\n\n              // Continue generating transactions until we reach today\n              while (true) {\n                // Calculate the next occurrence date\n                nextDate = new Date(occurrenceDate);\n                switch (normalizedTransaction.frequency) {\n                  case 'daily':\n                    nextDate.setDate(nextDate.getDate() + 1);\n                    break;\n                  case 'weekly':\n                    nextDate.setDate(nextDate.getDate() + 7);\n                    break;\n                  case 'biweekly':\n                    nextDate.setDate(nextDate.getDate() + 14);\n                    break;\n                  case 'monthly':\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                    break;\n                  case 'quarterly':\n                    nextDate.setMonth(nextDate.getMonth() + 3);\n                    break;\n                  case 'annually':\n                    nextDate.setFullYear(nextDate.getFullYear() + 1);\n                    break;\n                  default:\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                }\n\n                // Stop if next occurrence is in the future\n                if (nextDate > today) {\n                  break;\n                }\n\n                // Create a transaction for this occurrence\n                await createTransactionFromRecurring({\n                  ...normalizedTransaction,\n                  date: nextDate.toISOString().slice(0, 10)\n                });\n\n                // Update for next iteration\n                occurrenceDate = nextDate;\n              }\n\n              // Update the recurring transaction with the correct next date\n              await recurringDB.update({\n                ...normalizedTransaction,\n                nextDate: nextDate.toISOString().slice(0, 10)\n              });\n            } else {\n              // If start date is today, calculate next date\n              const nextDate = calculateNextDate(normalizedTransaction.frequency, normalizedTransaction.startDate);\n\n              // Update recurring transaction with next date\n              await recurringDB.update({\n                ...normalizedTransaction,\n                nextDate\n              });\n            }\n          } else {\n            console.log('Start date is in the future, nextDate remains as startDate');\n            // Future start date - no transactions to create yet\n          }\n\n          // Refresh the expenses list to show the new transactions\n          await loadExpenses();\n\n          // Update wallet display\n          setRefreshWallets(prev => prev + 1);\n\n          // Close modal\n          setIsRecurringModalOpen(false);\n\n          // Refresh the recurring list\n          setRefreshRecurring(prev => prev + 1);\n        } catch (error) {\n          console.error('Error adding recurring transaction to database:', error);\n          alert('Failed to save recurring transaction. Please try again.');\n        }\n      } else {\n        // Fallback to localStorage\n        try {\n          const savedRecurring = JSON.parse(localStorage.getItem('recurring-transactions') || '[]');\n          savedRecurring.push(normalizedTransaction);\n          localStorage.setItem('recurring-transactions', JSON.stringify(savedRecurring));\n\n          // Process for localStorage\n          const startDate = new Date(normalizedTransaction.startDate);\n          const today = new Date();\n          today.setHours(0, 0, 0, 0);\n          if (startDate <= today) {\n            const savedExpenses = JSON.parse(localStorage.getItem('expenses') || '[]');\n            const savedWallets = JSON.parse(localStorage.getItem('wallets') || '[]');\n\n            // Create a transaction for the start date\n            const initialTransaction = {\n              id: Date.now(),\n              name: normalizedTransaction.name,\n              amount: normalizedTransaction.amount,\n              category: normalizedTransaction.category,\n              tags: [...normalizedTransaction.tags, 'recurring'],\n              walletId: normalizedTransaction.walletId,\n              isIncome: normalizedTransaction.isIncome,\n              notes: normalizedTransaction.notes,\n              date: normalizedTransaction.startDate\n            };\n\n            // Add to expenses\n            savedExpenses.push(initialTransaction);\n\n            // Update wallet\n            if (initialTransaction.walletId) {\n              const walletIndex = savedWallets.findIndex(w => w.id === initialTransaction.walletId);\n              if (walletIndex !== -1) {\n                const adjustment = initialTransaction.isIncome ? parseFloat(initialTransaction.amount) : -parseFloat(initialTransaction.amount);\n                savedWallets[walletIndex].balance = parseFloat(savedWallets[walletIndex].balance) + adjustment;\n              }\n            }\n\n            // If start date is before today, generate additional occurrences\n            if (startDate < today) {\n              let currentDate = startDate;\n              let occurrenceDate = startDate;\n              let nextDate;\n\n              // Generate past transactions\n              while (true) {\n                nextDate = new Date(occurrenceDate);\n                switch (normalizedTransaction.frequency) {\n                  case 'daily':\n                    nextDate.setDate(nextDate.getDate() + 1);\n                    break;\n                  case 'weekly':\n                    nextDate.setDate(nextDate.getDate() + 7);\n                    break;\n                  case 'biweekly':\n                    nextDate.setDate(nextDate.getDate() + 14);\n                    break;\n                  case 'monthly':\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                    break;\n                  case 'quarterly':\n                    nextDate.setMonth(nextDate.getMonth() + 3);\n                    break;\n                  case 'annually':\n                    nextDate.setFullYear(nextDate.getFullYear() + 1);\n                    break;\n                  default:\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                }\n                if (nextDate > today) {\n                  break;\n                }\n                const recTransaction = {\n                  id: Date.now() + savedExpenses.length,\n                  name: normalizedTransaction.name,\n                  amount: normalizedTransaction.amount,\n                  category: normalizedTransaction.category,\n                  tags: [...normalizedTransaction.tags, 'recurring'],\n                  walletId: normalizedTransaction.walletId,\n                  isIncome: normalizedTransaction.isIncome,\n                  notes: normalizedTransaction.notes,\n                  date: nextDate.toISOString().slice(0, 10)\n                };\n\n                // Add to expenses\n                savedExpenses.push(recTransaction);\n\n                // Update wallet\n                if (recTransaction.walletId) {\n                  const walletIndex = savedWallets.findIndex(w => w.id === recTransaction.walletId);\n                  if (walletIndex !== -1) {\n                    const adjustment = recTransaction.isIncome ? parseFloat(recTransaction.amount) : -parseFloat(recTransaction.amount);\n                    savedWallets[walletIndex].balance = parseFloat(savedWallets[walletIndex].balance) + adjustment;\n                  }\n                }\n                occurrenceDate = nextDate;\n              }\n\n              // Update the recurring transaction's next date\n              normalizedTransaction.nextDate = nextDate.toISOString().slice(0, 10);\n\n              // Update in the saved recurring list\n              const recIndex = savedRecurring.findIndex(r => r.id === normalizedTransaction.id);\n              if (recIndex !== -1) {\n                savedRecurring[recIndex] = normalizedTransaction;\n              }\n              localStorage.setItem('recurring-transactions', JSON.stringify(savedRecurring));\n            } else {\n              // If start date is today, calculate next date\n              const nextDate = calculateNextDate(normalizedTransaction.frequency, normalizedTransaction.startDate);\n\n              // Update the recurring transaction\n              normalizedTransaction.nextDate = nextDate;\n\n              // Update in the saved recurring list\n              const recIndex = savedRecurring.findIndex(r => r.id === normalizedTransaction.id);\n              if (recIndex !== -1) {\n                savedRecurring[recIndex] = normalizedTransaction;\n              }\n              localStorage.setItem('recurring-transactions', JSON.stringify(savedRecurring));\n            }\n\n            // Save updated expenses and wallets\n            localStorage.setItem('expenses', JSON.stringify(savedExpenses));\n            localStorage.setItem('wallets', JSON.stringify(savedWallets));\n\n            // Update expenses state\n            setExpenses(savedExpenses);\n          }\n\n          // Close modal\n          setIsRecurringModalOpen(false);\n\n          // Refresh the list\n          setRefreshRecurring(prev => prev + 1);\n\n          // Update wallet display\n          setRefreshWallets(prev => prev + 1);\n        } catch (error) {\n          console.error('Error saving recurring transaction to localStorage:', error);\n          alert('Failed to save recurring transaction. Please try again.');\n        }\n      }\n    } catch (error) {\n      console.error('Error processing recurring transaction:', error);\n      alert('Failed to process recurring transaction. Please try again.');\n    }\n  };\n\n  // Helper function to create a transaction from a recurring template\n  const createTransactionFromRecurring = async recurringData => {\n    try {\n      // Create the transaction object\n      const newTransaction = {\n        id: Date.now() + Math.floor(Math.random() * 1000),\n        // Ensure unique ID\n        name: recurringData.name,\n        amount: recurringData.amount,\n        category: recurringData.category,\n        tags: [...recurringData.tags, 'recurring'],\n        // Add recurring tag\n        walletId: recurringData.walletId,\n        isIncome: recurringData.isIncome,\n        notes: recurringData.notes,\n        date: recurringData.date // Use the provided date\n      };\n\n      // Add the transaction to the database\n      await expenseDB.add(newTransaction);\n\n      // Update wallet balance\n      try {\n        const wallets = await walletDB.getAll();\n        const wallet = wallets.find(w => w.id === newTransaction.walletId);\n        if (wallet) {\n          // For income add to balance, for expense subtract\n          const adjustment = newTransaction.isIncome ? parseFloat(newTransaction.amount) : -parseFloat(newTransaction.amount);\n          wallet.balance = parseFloat(wallet.balance) + adjustment;\n          await walletDB.update(wallet);\n        }\n      } catch (walletError) {\n        console.error('Error updating wallet balance:', walletError);\n      }\n      return newTransaction;\n    } catch (error) {\n      console.error('Error creating transaction from recurring template:', error);\n      throw error;\n    }\n  };\n\n  // Helper function to calculate next date based on frequency\n  const calculateNextDate = (frequency, currentDate) => {\n    const date = new Date(currentDate);\n    switch (frequency) {\n      case 'daily':\n        date.setDate(date.getDate() + 1);\n        break;\n      case 'weekly':\n        date.setDate(date.getDate() + 7);\n        break;\n      case 'biweekly':\n        date.setDate(date.getDate() + 14);\n        break;\n      case 'monthly':\n        date.setMonth(date.getMonth() + 1);\n        break;\n      case 'quarterly':\n        date.setMonth(date.getMonth() + 3);\n        break;\n      case 'annually':\n        date.setFullYear(date.getFullYear() + 1);\n        break;\n      default:\n        date.setMonth(date.getMonth() + 1);\n      // Default to monthly\n    }\n    return date.toISOString().slice(0, 10);\n  };\n\n  // Render content based on active tab\n  const renderContent = () => {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center py-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-indigo-400\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"animate-spin h-10 w-10 mr-3\",\n            viewBox: \"0 0 24 24\",\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              className: \"opacity-25\",\n              cx: \"12\",\n              cy: \"12\",\n              r: \"10\",\n              stroke: \"currentColor\",\n              strokeWidth: \"4\",\n              fill: \"none\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 801,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              className: \"opacity-75\",\n              fill: \"currentColor\",\n              d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 802,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 800,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-indigo-300 text-lg font-medium\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 9\n      }, this);\n    }\n    switch (activeTab) {\n      case 'settings':\n        return /*#__PURE__*/_jsxDEV(Settings, {\n          dbInitialized: dbInitialized\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 16\n        }, this);\n      case 'wallets':\n        return /*#__PURE__*/_jsxDEV(Wallets, {\n          dbInitialized: dbInitialized\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 16\n        }, this);\n      case 'recurring':\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(RecurringList, {\n            dbInitialized: dbInitialized,\n            refreshData: refreshRecurring\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 818,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-end mb-8\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setIsRecurringModalOpen(true),\n              className: \"px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors shadow-md\",\n              children: \"Add Recurring Transaction\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 819,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      case 'transactions':\n        return /*#__PURE__*/_jsxDEV(TransactionListPage, {\n          expenses: expenses,\n          deleteExpense: deleteExpense,\n          updateExpense: updateExpense,\n          dbInitialized: dbInitialized\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 11\n        }, this);\n      case 'home':\n      default:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(WalletSummary, {\n            dbInitialized: dbInitialized,\n            refresh: refreshWallets\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ExpenseSummary, {\n            expenses: expenses,\n            total: totalExpenses + totalIncome\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ExpenseChart, {\n            expenses: expenses\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ExpenseList, {\n            expenses: expenses,\n            deleteExpense: deleteExpense,\n            updateExpense: updateExpense,\n            dbInitialized: dbInitialized\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 848,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      className: \"fixed top-0 left-0 right-0 shadow-md z-30\",\n      children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n        children: [/*#__PURE__*/_jsxDEV(DropdownButton, {\n          as: NavbarItem,\n          children: [/*#__PURE__*/_jsxDEV(NavbarLabel, {\n            className: \"text-indigo-400 font-bold text-xl\",\n            children: \"Rupiah Tracker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 865,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-5 w-5 ml-2 text-gray-500\",\n            viewBox: \"0 0 20 20\",\n            fill: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              fillRule: \"evenodd\",\n              d: \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\",\n              clipRule: \"evenodd\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 867,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n          className: \"min-w-52\",\n          children: [/*#__PURE__*/_jsxDEV(DropdownItem, {\n            onClick: () => setActiveTab('home'),\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: \"h-5 w-5\",\n              viewBox: \"0 0 20 20\",\n              fill: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 873,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 872,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DropdownLabel, {\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 875,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 871,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n            onClick: () => setActiveTab('wallets'),\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: \"h-5 w-5\",\n              viewBox: \"0 0 20 20\",\n              fill: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M4 4a2 2 0 012-2h8a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 0v12h8V4H6zm2 2h4v2H8V6z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 879,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 878,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DropdownLabel, {\n              children: \"Wallets\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 881,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 877,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n            onClick: () => setActiveTab('recurring'),\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: \"h-5 w-5\",\n              viewBox: \"0 0 20 20\",\n              fill: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                fillRule: \"evenodd\",\n                d: \"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\",\n                clipRule: \"evenodd\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 885,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 884,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DropdownLabel, {\n              children: \"Recurring\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 887,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n            onClick: () => setActiveTab('settings'),\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: \"h-5 w-5\",\n              viewBox: \"0 0 20 20\",\n              fill: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                fillRule: \"evenodd\",\n                d: \"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\",\n                clipRule: \"evenodd\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 891,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 890,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DropdownLabel, {\n              children: \"Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 893,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DropdownDivider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 895,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n            onClick: () => setIsModalOpen(true),\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: \"h-5 w-5\",\n              viewBox: \"0 0 20 20\",\n              fill: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                fillRule: \"evenodd\",\n                d: \"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\",\n                clipRule: \"evenodd\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 898,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 897,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DropdownLabel, {\n              children: \"Add Transaction\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 900,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 896,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 863,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavbarDivider, {\n        className: \"max-md:hidden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 905,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavbarSection, {\n        className: \"max-md:hidden\",\n        children: [/*#__PURE__*/_jsxDEV(NavbarItem, {\n          onClick: () => setActiveTab('home'),\n          current: activeTab === 'home',\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NavbarItem, {\n          onClick: () => setActiveTab('wallets'),\n          current: activeTab === 'wallets',\n          children: \"Wallets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NavbarItem, {\n          onClick: () => setActiveTab('recurring'),\n          current: activeTab === 'recurring',\n          children: \"Recurring\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NavbarItem, {\n          onClick: () => setActiveTab('settings'),\n          current: activeTab === 'settings',\n          children: \"Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavbarSpacer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 934,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavbarSection, {\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          children: [/*#__PURE__*/_jsxDEV(DropdownButton, {\n            as: NavbarItem,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"relative\",\n              children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                initials: \"RS\",\n                className: \"bg-indigo-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 940,\n                columnNumber: 17\n              }, this), dbInitialized && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"absolute -top-1 -right-1 block h-2.5 w-2.5 rounded-full bg-green-400 border-2 border-gray-900\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 942,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 939,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 938,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n            className: \"min-w-52\",\n            anchor: \"bottom end\",\n            children: [/*#__PURE__*/_jsxDEV(DropdownItem, {\n              onClick: () => setActiveTab('settings'),\n              children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                className: \"h-5 w-5\",\n                viewBox: \"0 0 20 20\",\n                fill: \"currentColor\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  fillRule: \"evenodd\",\n                  d: \"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\",\n                  clipRule: \"evenodd\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 949,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 948,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(DropdownLabel, {\n                children: \"Settings\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 951,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 947,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DropdownDivider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 953,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n              children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                className: \"h-5 w-5\",\n                viewBox: \"0 0 20 20\",\n                fill: \"currentColor\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  fillRule: \"evenodd\",\n                  d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9a1 1 0 00-1-1z\",\n                  clipRule: \"evenodd\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 956,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 955,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(DropdownLabel, {\n                children: \"About\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 958,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 954,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n              children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                className: \"h-5 w-5\",\n                viewBox: \"0 0 20 20\",\n                fill: \"currentColor\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  fillRule: \"evenodd\",\n                  d: \"M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm0 2h10v7h-2l-1 2H8l-1-2H5V5z\",\n                  clipRule: \"evenodd\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 962,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 961,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(DropdownLabel, {\n                children: \"Feedback\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 964,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 960,\n              columnNumber: 15\n            }, this), dbInitialized && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"px-4 py-2 text-xs text-green-400 flex items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                className: \"h-4 w-4 mr-1\",\n                viewBox: \"0 0 20 20\",\n                fill: \"currentColor\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  fillRule: \"evenodd\",\n                  d: \"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\",\n                  clipRule: \"evenodd\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 969,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 968,\n                columnNumber: 19\n              }, this), \"Using IndexedDB\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 967,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 946,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 937,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 936,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 862,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-4xl mx-auto px-6 pb-24 pt-20\",\n      children: [renderContent(), activeTab === 'home' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:hidden\",\n        children: /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n          onClick: () => setIsModalOpen(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 985,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 984,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen,\n        onClose: () => setIsModalOpen(false),\n        children: /*#__PURE__*/_jsxDEV(ExpenseForm, {\n          addExpense: addExpense,\n          dbInitialized: dbInitialized,\n          onClose: () => setIsModalOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 991,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 990,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isRecurringModalOpen,\n        onClose: () => setIsRecurringModalOpen(false),\n        children: /*#__PURE__*/_jsxDEV(RecurringForm, {\n          addRecurringTransaction: addRecurringTransaction,\n          dbInitialized: dbInitialized,\n          onClose: () => setIsRecurringModalOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1000,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 999,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:hidden\",\n        children: /*#__PURE__*/_jsxDEV(BottomNavigation, {\n          activeTab: activeTab,\n          setActiveTab: setActiveTab\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1009,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1008,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 979,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"Z436IjAPR+yvWHFYj4B4aNYhGwI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ExpenseForm","ExpenseList","ExpenseSummary","ExpenseChart","Settings","RecurringForm","RecurringList","BottomNavigation","FloatingActionButton","Modal","Navbar","NavbarDivider","NavbarItem","NavbarLabel","NavbarSection","NavbarSpacer","Dropdown","DropdownButton","DropdownDivider","DropdownItem","DropdownLabel","DropdownMenu","Avatar","initializeDatabase","expenseDB","categoryDB","walletDB","recurringDB","Wallets","WalletSummary","processRecurringTransactions","TransactionListPage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","activeTab","setActiveTab","expenses","setExpenses","isLoading","setIsLoading","dbInitialized","setDbInitialized","isModalOpen","setIsModalOpen","isRecurringModalOpen","setIsRecurringModalOpen","refreshRecurring","setRefreshRecurring","refreshWallets","setRefreshWallets","init","initialized","loadExpenses","result","processed","prev","fallbackToLocalStorage","error","console","savedExpenses","localStorage","getItem","JSON","parse","allExpenses","getAll","length","setItem","stringify","addExpense","expense","normalizedTags","tags","map","tag","id","newExpense","Date","now","date","toISOString","slice","add","walletId","wallets","wallet","find","w","isIncome","balance","parseFloat","amount","update","walletError","prevExpenses","savedWallets","walletIndex","findIndex","e","updateExpense","updatedExpense","normalizedExpense","originalExpense","originalWallet","newWallet","originalWalletIndex","newWalletIndex","deleteExpense","expenseToDelete","delete","filter","totalExpenses","reduce","total","totalIncome","netCashFlow","addRecurringTransaction","transaction","normalizedTransaction","name","category","frequency","startDate","nextDate","notes","log","today","setHours","createTransactionFromRecurring","currentDate","occurrenceDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","calculateNextDate","alert","savedRecurring","push","initialTransaction","adjustment","recTransaction","recIndex","r","recurringData","newTransaction","Math","floor","random","renderContent","className","children","viewBox","cx","cy","stroke","strokeWidth","fill","fileName","_jsxFileName","lineNumber","columnNumber","d","refreshData","onClick","refresh","as","xmlns","fillRule","clipRule","current","initials","anchor","isOpen","onClose","_c","$RefreshReg$"],"sources":["/Users/ddm/expense-tracker/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ExpenseForm from './components/ExpenseForm';\nimport ExpenseList from './components/ExpenseList';\nimport ExpenseSummary from './components/ExpenseSummary';\nimport ExpenseChart from './components/ExpenseChart';\nimport Settings from './components/Settings';\nimport RecurringForm from './components/RecurringForm';\nimport RecurringList from './components/RecurringList';\nimport BottomNavigation from './components/BottomNavigation';\nimport FloatingActionButton from './components/FloatingActionButton';\nimport Modal from './components/Modal';\nimport { \n  Navbar, \n  NavbarDivider, \n  NavbarItem, \n  NavbarLabel, \n  NavbarSection, \n  NavbarSpacer \n} from './components/Navbar';\nimport { \n  Dropdown, \n  DropdownButton, \n  DropdownDivider, \n  DropdownItem, \n  DropdownLabel, \n  DropdownMenu \n} from './components/Dropdown';\nimport { Avatar } from './components/Avatar';\nimport { initializeDatabase, expenseDB, categoryDB, walletDB, recurringDB } from './utils/db';\nimport Wallets from './components/Wallets';\nimport WalletSummary from './components/WalletSummary';\nimport { processRecurringTransactions } from './utils/scheduler';\nimport TransactionListPage from './pages/TransactionListPage';\n\nfunction App() {\n  const [activeTab, setActiveTab] = useState('home');\n  const [expenses, setExpenses] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [dbInitialized, setDbInitialized] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isRecurringModalOpen, setIsRecurringModalOpen] = useState(false);\n  const [refreshRecurring, setRefreshRecurring] = useState(0); // Counter to trigger refreshes\n  const [refreshWallets, setRefreshWallets] = useState(0); // Counter to trigger wallet refreshes\n\n  // Initialize database\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const initialized = await initializeDatabase();\n        setDbInitialized(initialized);\n        \n        if (initialized) {\n          // Load all expenses after DB initialization\n          loadExpenses();\n          \n          // Check for and process any recurring transactions that are due\n          const result = await processRecurringTransactions();\n          if (result.processed > 0) {\n            // If transactions were processed, refresh the expenses list\n            loadExpenses();\n            // And update the recurring transactions counter\n            setRefreshRecurring(prev => prev + 1);\n          }\n        } else {\n          // Fall back to localStorage if IndexedDB fails\n          fallbackToLocalStorage();\n        }\n      } catch (error) {\n        console.error('Failed to initialize database:', error);\n        fallbackToLocalStorage();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    init();\n  }, []);\n\n  // Fallback to localStorage if IndexedDB fails\n  const fallbackToLocalStorage = () => {\n    const savedExpenses = localStorage.getItem('expenses');\n    if (savedExpenses) {\n      setExpenses(JSON.parse(savedExpenses));\n    }\n    setIsLoading(false);\n  };\n\n  // Load expenses from IndexedDB\n  const loadExpenses = async () => {\n    try {\n      const allExpenses = await expenseDB.getAll();\n      setExpenses(allExpenses);\n    } catch (error) {\n      console.error('Error loading expenses:', error);\n      fallbackToLocalStorage();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Save expenses to localStorage (fallback)\n  useEffect(() => {\n    if (!dbInitialized && expenses.length > 0) {\n      localStorage.setItem('expenses', JSON.stringify(expenses));\n    }\n  }, [expenses, dbInitialized]);\n\n  // Add new expense\n  const addExpense = async (expense) => {\n    // Normalize tags: convert any tag objects to just their IDs\n    // Tags from our selector should already have proper IDs now, not temporary ones\n    const normalizedTags = expense.tags.map(tag => \n      typeof tag === 'object' && tag !== null ? tag.id : tag\n    );\n    \n    const newExpense = {\n      ...expense,\n      tags: normalizedTags,\n      id: Date.now(), // Simple way to generate unique ID\n      date: new Date().toISOString().slice(0, 10) // YYYY-MM-DD format\n    };\n    \n    if (dbInitialized) {\n      try {\n        // Add the expense to the database\n        await expenseDB.add(newExpense);\n        \n        // Update wallet balance based on transaction type\n        if (newExpense.walletId) {\n          try {\n            // Get the current wallet\n            const wallets = await walletDB.getAll();\n            const wallet = wallets.find(w => w.id === newExpense.walletId);\n            \n            if (wallet) {\n              // Update wallet balance based on transaction type\n              if (newExpense.isIncome) {\n                // Add income to wallet balance\n                wallet.balance = parseFloat(wallet.balance) + parseFloat(newExpense.amount);\n              } else {\n                // Subtract expense from wallet balance\n                wallet.balance = parseFloat(wallet.balance) - parseFloat(newExpense.amount);\n              }\n              await walletDB.update(wallet);\n            }\n          } catch (walletError) {\n            console.error('Error updating wallet balance:', walletError);\n          }\n        }\n        \n        // Reload expenses from DB\n        loadExpenses();\n        // Refresh wallet balance display\n        setRefreshWallets(prev => prev + 1);\n        // Close modal after adding expense\n        setIsModalOpen(false);\n      } catch (error) {\n        console.error('Error adding expense:', error);\n        // Fall back to state-only update\n        setExpenses(prevExpenses => [...prevExpenses, newExpense]);\n        setIsModalOpen(false);\n      }\n    } else {\n      // If DB not initialized, just update state\n      setExpenses(prevExpenses => [...prevExpenses, newExpense]);\n      \n      // Also update wallet in localStorage if available\n      try {\n        const savedWallets = localStorage.getItem('wallets');\n        if (savedWallets && newExpense.walletId) {\n          const wallets = JSON.parse(savedWallets);\n          const walletIndex = wallets.findIndex(w => w.id === newExpense.walletId);\n          \n          if (walletIndex !== -1) {\n            if (newExpense.isIncome) {\n              // Add income to wallet balance\n              wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) + parseFloat(newExpense.amount);\n            } else {\n              // Subtract expense from wallet balance\n              wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) - parseFloat(newExpense.amount);\n            }\n            localStorage.setItem('wallets', JSON.stringify(wallets));\n          }\n        }\n      } catch (e) {\n        console.error('Error updating wallet in localStorage:', e);\n      }\n      \n      // Close modal after adding expense\n      setIsModalOpen(false);\n      // Refresh wallet balance display\n      setRefreshWallets(prev => prev + 1);\n    }\n  };\n\n  // Update existing expense\n  const updateExpense = async (updatedExpense) => {\n    // Normalize tags: convert any tag objects to just their IDs\n    // Tags from our selector should already have proper IDs now, not temporary ones\n    const normalizedTags = updatedExpense.tags.map(tag => \n      typeof tag === 'object' && tag !== null ? tag.id : tag\n    );\n    \n    const normalizedExpense = {\n      ...updatedExpense,\n      tags: normalizedTags\n    };\n    \n    if (dbInitialized) {\n      try {\n        // Find the original expense to get the original amount and wallet\n        const allExpenses = await expenseDB.getAll();\n        const originalExpense = allExpenses.find(e => e.id === normalizedExpense.id);\n        \n        if (originalExpense) {\n          // If wallets are different or amounts are different, adjust balances\n          if (originalExpense.walletId !== normalizedExpense.walletId || \n              parseFloat(originalExpense.amount) !== parseFloat(normalizedExpense.amount)) {\n            \n            try {\n              const wallets = await walletDB.getAll();\n              \n              // Return money to the original wallet\n              if (originalExpense.walletId) {\n                const originalWallet = wallets.find(w => w.id === originalExpense.walletId);\n                if (originalWallet) {\n                  if (originalExpense.isIncome) {\n                    // Remove the income amount from the original wallet\n                    originalWallet.balance = parseFloat(originalWallet.balance) - parseFloat(originalExpense.amount);\n                  } else {\n                    // Return the expense amount to the original wallet\n                    originalWallet.balance = parseFloat(originalWallet.balance) + parseFloat(originalExpense.amount);\n                  }\n                  await walletDB.update(originalWallet);\n                }\n              }\n              \n              // Update the new wallet balance\n              if (normalizedExpense.walletId) {\n                const newWallet = wallets.find(w => w.id === normalizedExpense.walletId);\n                if (newWallet) {\n                  if (normalizedExpense.isIncome) {\n                    // Add the income amount to the new wallet\n                    newWallet.balance = parseFloat(newWallet.balance) + parseFloat(normalizedExpense.amount);\n                  } else {\n                    // Deduct the expense amount from the new wallet\n                    newWallet.balance = parseFloat(newWallet.balance) - parseFloat(normalizedExpense.amount);\n                  }\n                  await walletDB.update(newWallet);\n                }\n              }\n            } catch (walletError) {\n              console.error('Error adjusting wallet balances:', walletError);\n            }\n          }\n        }\n        \n        // Update the expense\n        await expenseDB.update(normalizedExpense);\n        \n        // Reload expenses from DB\n        loadExpenses();\n        // Refresh wallet balance display\n        setRefreshWallets(prev => prev + 1);\n      } catch (error) {\n        console.error('Error updating expense:', error);\n        // Fall back to state-only update\n        setExpenses(prevExpenses => \n          prevExpenses.map(expense => \n            expense.id === normalizedExpense.id ? normalizedExpense : expense\n          )\n        );\n      }\n    } else {\n      // If DB not initialized, handle localStorage\n      const savedExpenses = JSON.parse(localStorage.getItem('expenses') || '[]');\n      const originalExpense = savedExpenses.find(e => e.id === normalizedExpense.id);\n      \n      // Adjust wallet balances in localStorage if needed\n      if (originalExpense && \n          (originalExpense.walletId !== normalizedExpense.walletId || \n           parseFloat(originalExpense.amount) !== parseFloat(normalizedExpense.amount))) {\n        \n        try {\n          const savedWallets = localStorage.getItem('wallets');\n          if (savedWallets) {\n            let wallets = JSON.parse(savedWallets);\n            \n            // Return money to the original wallet\n            if (originalExpense.walletId) {\n              const originalWalletIndex = wallets.findIndex(w => w.id === originalExpense.walletId);\n              if (originalWalletIndex !== -1) {\n                if (originalExpense.isIncome) {\n                  // Remove the income amount from the original wallet\n                  wallets[originalWalletIndex].balance = parseFloat(wallets[originalWalletIndex].balance) - parseFloat(originalExpense.amount);\n                } else {\n                  // Return the expense amount to the original wallet\n                  wallets[originalWalletIndex].balance = parseFloat(wallets[originalWalletIndex].balance) + parseFloat(originalExpense.amount);\n                }\n              }\n            }\n            \n            // Update the new wallet balance\n            if (normalizedExpense.walletId) {\n              const newWalletIndex = wallets.findIndex(w => w.id === normalizedExpense.walletId);\n              if (newWalletIndex !== -1) {\n                if (normalizedExpense.isIncome) {\n                  // Add the income amount to the new wallet\n                  wallets[newWalletIndex].balance = parseFloat(wallets[newWalletIndex].balance) + parseFloat(normalizedExpense.amount);\n                } else {\n                  // Deduct the expense amount from the new wallet\n                  wallets[newWalletIndex].balance = parseFloat(wallets[newWalletIndex].balance) - parseFloat(normalizedExpense.amount);\n                }\n              }\n            }\n            \n            localStorage.setItem('wallets', JSON.stringify(wallets));\n          }\n        } catch (e) {\n          console.error('Error updating wallet in localStorage:', e);\n        }\n      }\n      \n      // Update expenses in state\n      setExpenses(prevExpenses => \n        prevExpenses.map(expense => \n          expense.id === normalizedExpense.id ? normalizedExpense : expense\n        )\n      );\n      // Refresh wallet balance display\n      setRefreshWallets(prev => prev + 1);\n    }\n  };\n\n  // Delete expense\n  const deleteExpense = async (id) => {\n    if (dbInitialized) {\n      try {\n        // Find the expense to get its amount and wallet\n        const allExpenses = await expenseDB.getAll();\n        const expenseToDelete = allExpenses.find(e => e.id === id);\n        \n        if (expenseToDelete && expenseToDelete.walletId) {\n          try {\n            // Get the wallet\n            const wallets = await walletDB.getAll();\n            const wallet = wallets.find(w => w.id === expenseToDelete.walletId);\n            \n            if (wallet) {\n              // Add the expense amount back to the wallet balance (since expense is being deleted)\n              if (expenseToDelete.isIncome) {\n                // For income transactions, subtract it back from wallet balance when deleted\n                wallet.balance = parseFloat(wallet.balance) - parseFloat(expenseToDelete.amount);\n              } else {\n                // For expenses, add it back to wallet balance when deleted\n                wallet.balance = parseFloat(wallet.balance) + parseFloat(expenseToDelete.amount);\n              }\n              await walletDB.update(wallet);\n            }\n          } catch (walletError) {\n            console.error('Error updating wallet balance:', walletError);\n          }\n        }\n        \n        // Delete the expense\n        await expenseDB.delete(id);\n        \n        // Reload expenses from DB\n        loadExpenses();\n        // Refresh wallet balance display\n        setRefreshWallets(prev => prev + 1);\n      } catch (error) {\n        console.error('Error deleting expense:', error);\n        // Fall back to state-only update\n        setExpenses(prevExpenses => prevExpenses.filter(expense => expense.id !== id));\n      }\n    } else {\n      // If DB not initialized, find the expense in state before filtering\n      const expenseToDelete = expenses.find(e => e.id === id);\n      \n      // Update wallet in localStorage if available\n      if (expenseToDelete && expenseToDelete.walletId) {\n        try {\n          const savedWallets = localStorage.getItem('wallets');\n          if (savedWallets) {\n            let wallets = JSON.parse(savedWallets);\n            const walletIndex = wallets.findIndex(w => w.id === expenseToDelete.walletId);\n            \n            if (walletIndex !== -1) {\n              if (expenseToDelete.isIncome) {\n                // For income transactions, subtract it back from wallet balance when deleted\n                wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) - parseFloat(expenseToDelete.amount);\n              } else {\n                // For expenses, add it back to wallet balance when deleted\n                wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) + parseFloat(expenseToDelete.amount);\n              }\n              localStorage.setItem('wallets', JSON.stringify(wallets));\n            }\n          }\n        } catch (e) {\n          console.error('Error updating wallet in localStorage:', e);\n        }\n      }\n      \n      // Update state\n      setExpenses(prevExpenses => prevExpenses.filter(expense => expense.id !== id));\n      // Refresh wallet balance display\n      setRefreshWallets(prev => prev + 1);\n    }\n  };\n\n  // Calculate total expenses and income\n  const totalExpenses = expenses\n    .filter(expense => !expense.isIncome)\n    .reduce((total, expense) => total + parseFloat(expense.amount), 0);\n    \n  const totalIncome = expenses\n    .filter(expense => expense.isIncome)\n    .reduce((total, expense) => total + parseFloat(expense.amount), 0);\n    \n  const netCashFlow = totalIncome - totalExpenses;\n\n  // Add recurring transaction\n  const addRecurringTransaction = async (transaction) => {\n    try {\n      // Normalize tags: convert any tag objects to just their IDs\n      const normalizedTags = transaction.tags.map(tag => \n        typeof tag === 'object' && tag !== null ? tag.id : tag\n      );\n      \n      // Ensure all required fields exist\n      const normalizedTransaction = {\n        ...transaction,\n        id: transaction.id || Date.now(),\n        tags: normalizedTags,\n        name: transaction.name || '',\n        amount: parseFloat(transaction.amount || 0),\n        walletId: transaction.walletId || 'cash',\n        category: transaction.category || 'other',\n        frequency: transaction.frequency || 'monthly',\n        startDate: transaction.startDate || new Date().toISOString().slice(0, 10),\n        nextDate: transaction.startDate || new Date().toISOString().slice(0, 10), // Initially use startDate as nextDate\n        isIncome: !!transaction.isIncome,\n        notes: transaction.notes || ''\n      };\n      \n      if (dbInitialized) {\n        try {\n          console.log('Saving recurring transaction:', normalizedTransaction);\n          // Add to database\n          await recurringDB.add(normalizedTransaction);\n          \n          // Process past occurrences if the start date is in the past\n          const startDate = new Date(normalizedTransaction.startDate);\n          const today = new Date();\n          today.setHours(0, 0, 0, 0); // Reset time part for proper comparison\n          \n          if (startDate <= today) {\n            console.log('Start date is in the past, processing past occurrences');\n            // Create a transaction for the start date first\n            await createTransactionFromRecurring({\n              ...normalizedTransaction,\n              date: normalizedTransaction.startDate // Use the start date as the transaction date\n            });\n            \n            // If start date is before today, generate additional occurrences as needed\n            if (startDate < today) {\n              let currentDate = startDate;\n              let occurrenceDate = startDate;\n              let nextDate;\n              \n              // Continue generating transactions until we reach today\n              while (true) {\n                // Calculate the next occurrence date\n                nextDate = new Date(occurrenceDate);\n                \n                switch (normalizedTransaction.frequency) {\n                  case 'daily':\n                    nextDate.setDate(nextDate.getDate() + 1);\n                    break;\n                  case 'weekly':\n                    nextDate.setDate(nextDate.getDate() + 7);\n                    break;\n                  case 'biweekly':\n                    nextDate.setDate(nextDate.getDate() + 14);\n                    break;\n                  case 'monthly':\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                    break;\n                  case 'quarterly':\n                    nextDate.setMonth(nextDate.getMonth() + 3);\n                    break;\n                  case 'annually':\n                    nextDate.setFullYear(nextDate.getFullYear() + 1);\n                    break;\n                  default:\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                }\n                \n                // Stop if next occurrence is in the future\n                if (nextDate > today) {\n                  break;\n                }\n                \n                // Create a transaction for this occurrence\n                await createTransactionFromRecurring({\n                  ...normalizedTransaction,\n                  date: nextDate.toISOString().slice(0, 10)\n                });\n                \n                // Update for next iteration\n                occurrenceDate = nextDate;\n              }\n              \n              // Update the recurring transaction with the correct next date\n              await recurringDB.update({\n                ...normalizedTransaction,\n                nextDate: nextDate.toISOString().slice(0, 10)\n              });\n            } else {\n              // If start date is today, calculate next date\n              const nextDate = calculateNextDate(\n                normalizedTransaction.frequency, \n                normalizedTransaction.startDate\n              );\n              \n              // Update recurring transaction with next date\n              await recurringDB.update({\n                ...normalizedTransaction,\n                nextDate\n              });\n            }\n          } else {\n            console.log('Start date is in the future, nextDate remains as startDate');\n            // Future start date - no transactions to create yet\n          }\n          \n          // Refresh the expenses list to show the new transactions\n          await loadExpenses();\n          \n          // Update wallet display\n          setRefreshWallets(prev => prev + 1);\n          \n          // Close modal\n          setIsRecurringModalOpen(false);\n          \n          // Refresh the recurring list\n          setRefreshRecurring(prev => prev + 1);\n        } catch (error) {\n          console.error('Error adding recurring transaction to database:', error);\n          alert('Failed to save recurring transaction. Please try again.');\n        }\n      } else {\n        // Fallback to localStorage\n        try {\n          const savedRecurring = JSON.parse(localStorage.getItem('recurring-transactions') || '[]');\n          savedRecurring.push(normalizedTransaction);\n          localStorage.setItem('recurring-transactions', JSON.stringify(savedRecurring));\n          \n          // Process for localStorage\n          const startDate = new Date(normalizedTransaction.startDate);\n          const today = new Date();\n          today.setHours(0, 0, 0, 0);\n          \n          if (startDate <= today) {\n            const savedExpenses = JSON.parse(localStorage.getItem('expenses') || '[]');\n            const savedWallets = JSON.parse(localStorage.getItem('wallets') || '[]');\n            \n            // Create a transaction for the start date\n            const initialTransaction = {\n              id: Date.now(),\n              name: normalizedTransaction.name,\n              amount: normalizedTransaction.amount,\n              category: normalizedTransaction.category,\n              tags: [...normalizedTransaction.tags, 'recurring'],\n              walletId: normalizedTransaction.walletId,\n              isIncome: normalizedTransaction.isIncome,\n              notes: normalizedTransaction.notes,\n              date: normalizedTransaction.startDate\n            };\n            \n            // Add to expenses\n            savedExpenses.push(initialTransaction);\n            \n            // Update wallet\n            if (initialTransaction.walletId) {\n              const walletIndex = savedWallets.findIndex(w => w.id === initialTransaction.walletId);\n              if (walletIndex !== -1) {\n                const adjustment = initialTransaction.isIncome ? \n                  parseFloat(initialTransaction.amount) : \n                  -parseFloat(initialTransaction.amount);\n                  \n                savedWallets[walletIndex].balance = parseFloat(savedWallets[walletIndex].balance) + adjustment;\n              }\n            }\n            \n            // If start date is before today, generate additional occurrences\n            if (startDate < today) {\n              let currentDate = startDate;\n              let occurrenceDate = startDate;\n              let nextDate;\n              \n              // Generate past transactions\n              while (true) {\n                nextDate = new Date(occurrenceDate);\n                \n                switch (normalizedTransaction.frequency) {\n                  case 'daily':\n                    nextDate.setDate(nextDate.getDate() + 1);\n                    break;\n                  case 'weekly':\n                    nextDate.setDate(nextDate.getDate() + 7);\n                    break;\n                  case 'biweekly':\n                    nextDate.setDate(nextDate.getDate() + 14);\n                    break;\n                  case 'monthly':\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                    break;\n                  case 'quarterly':\n                    nextDate.setMonth(nextDate.getMonth() + 3);\n                    break;\n                  case 'annually':\n                    nextDate.setFullYear(nextDate.getFullYear() + 1);\n                    break;\n                  default:\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                }\n                \n                if (nextDate > today) {\n                  break;\n                }\n                \n                const recTransaction = {\n                  id: Date.now() + savedExpenses.length,\n                  name: normalizedTransaction.name,\n                  amount: normalizedTransaction.amount,\n                  category: normalizedTransaction.category,\n                  tags: [...normalizedTransaction.tags, 'recurring'],\n                  walletId: normalizedTransaction.walletId,\n                  isIncome: normalizedTransaction.isIncome,\n                  notes: normalizedTransaction.notes,\n                  date: nextDate.toISOString().slice(0, 10)\n                };\n                \n                // Add to expenses\n                savedExpenses.push(recTransaction);\n                \n                // Update wallet\n                if (recTransaction.walletId) {\n                  const walletIndex = savedWallets.findIndex(w => w.id === recTransaction.walletId);\n                  if (walletIndex !== -1) {\n                    const adjustment = recTransaction.isIncome ? \n                      parseFloat(recTransaction.amount) : \n                      -parseFloat(recTransaction.amount);\n                      \n                    savedWallets[walletIndex].balance = parseFloat(savedWallets[walletIndex].balance) + adjustment;\n                  }\n                }\n                \n                occurrenceDate = nextDate;\n              }\n              \n              // Update the recurring transaction's next date\n              normalizedTransaction.nextDate = nextDate.toISOString().slice(0, 10);\n              \n              // Update in the saved recurring list\n              const recIndex = savedRecurring.findIndex(r => r.id === normalizedTransaction.id);\n              if (recIndex !== -1) {\n                savedRecurring[recIndex] = normalizedTransaction;\n              }\n              \n              localStorage.setItem('recurring-transactions', JSON.stringify(savedRecurring));\n            } else {\n              // If start date is today, calculate next date\n              const nextDate = calculateNextDate(\n                normalizedTransaction.frequency, \n                normalizedTransaction.startDate\n              );\n              \n              // Update the recurring transaction\n              normalizedTransaction.nextDate = nextDate;\n              \n              // Update in the saved recurring list\n              const recIndex = savedRecurring.findIndex(r => r.id === normalizedTransaction.id);\n              if (recIndex !== -1) {\n                savedRecurring[recIndex] = normalizedTransaction;\n              }\n              \n              localStorage.setItem('recurring-transactions', JSON.stringify(savedRecurring));\n            }\n            \n            // Save updated expenses and wallets\n            localStorage.setItem('expenses', JSON.stringify(savedExpenses));\n            localStorage.setItem('wallets', JSON.stringify(savedWallets));\n            \n            // Update expenses state\n            setExpenses(savedExpenses);\n          }\n          \n          // Close modal\n          setIsRecurringModalOpen(false);\n          \n          // Refresh the list\n          setRefreshRecurring(prev => prev + 1);\n          \n          // Update wallet display\n          setRefreshWallets(prev => prev + 1);\n        } catch (error) {\n          console.error('Error saving recurring transaction to localStorage:', error);\n          alert('Failed to save recurring transaction. Please try again.');\n        }\n      }\n    } catch (error) {\n      console.error('Error processing recurring transaction:', error);\n      alert('Failed to process recurring transaction. Please try again.');\n    }\n  };\n  \n  // Helper function to create a transaction from a recurring template\n  const createTransactionFromRecurring = async (recurringData) => {\n    try {\n      // Create the transaction object\n      const newTransaction = {\n        id: Date.now() + Math.floor(Math.random() * 1000), // Ensure unique ID\n        name: recurringData.name,\n        amount: recurringData.amount,\n        category: recurringData.category,\n        tags: [...recurringData.tags, 'recurring'], // Add recurring tag\n        walletId: recurringData.walletId,\n        isIncome: recurringData.isIncome,\n        notes: recurringData.notes,\n        date: recurringData.date // Use the provided date\n      };\n      \n      // Add the transaction to the database\n      await expenseDB.add(newTransaction);\n      \n      // Update wallet balance\n      try {\n        const wallets = await walletDB.getAll();\n        const wallet = wallets.find(w => w.id === newTransaction.walletId);\n        \n        if (wallet) {\n          // For income add to balance, for expense subtract\n          const adjustment = newTransaction.isIncome ? \n            parseFloat(newTransaction.amount) : \n            -parseFloat(newTransaction.amount);\n            \n          wallet.balance = parseFloat(wallet.balance) + adjustment;\n          await walletDB.update(wallet);\n        }\n      } catch (walletError) {\n        console.error('Error updating wallet balance:', walletError);\n      }\n      \n      return newTransaction;\n    } catch (error) {\n      console.error('Error creating transaction from recurring template:', error);\n      throw error;\n    }\n  };\n  \n  // Helper function to calculate next date based on frequency\n  const calculateNextDate = (frequency, currentDate) => {\n    const date = new Date(currentDate);\n    \n    switch (frequency) {\n      case 'daily':\n        date.setDate(date.getDate() + 1);\n        break;\n      case 'weekly':\n        date.setDate(date.getDate() + 7);\n        break;\n      case 'biweekly':\n        date.setDate(date.getDate() + 14);\n        break;\n      case 'monthly':\n        date.setMonth(date.getMonth() + 1);\n        break;\n      case 'quarterly':\n        date.setMonth(date.getMonth() + 3);\n        break;\n      case 'annually':\n        date.setFullYear(date.getFullYear() + 1);\n        break;\n      default:\n        date.setMonth(date.getMonth() + 1); // Default to monthly\n    }\n    \n    return date.toISOString().slice(0, 10);\n  };\n\n  // Render content based on active tab\n  const renderContent = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex justify-center items-center py-12\">\n          <div className=\"text-indigo-400\">\n            <svg className=\"animate-spin h-10 w-10 mr-3\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" fill=\"none\"></circle>\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg>\n          </div>\n          <p className=\"text-indigo-300 text-lg font-medium\">Loading...</p>\n        </div>\n      );\n    }\n\n    switch (activeTab) {\n      case 'settings':\n        return <Settings dbInitialized={dbInitialized} />;\n      case 'wallets':\n        return <Wallets dbInitialized={dbInitialized} />;\n      case 'recurring':\n        return (\n          <>\n            <RecurringList dbInitialized={dbInitialized} refreshData={refreshRecurring} />\n            <div className=\"flex justify-end mb-8\">\n              <button \n                onClick={() => setIsRecurringModalOpen(true)}\n                className=\"px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors shadow-md\"\n              >\n                Add Recurring Transaction\n              </button>\n            </div>\n          </>\n        );\n      case 'transactions':\n        return (\n          <TransactionListPage\n            expenses={expenses}\n            deleteExpense={deleteExpense}\n            updateExpense={updateExpense}\n            dbInitialized={dbInitialized}\n          />\n        );\n      case 'home':\n      default:\n        return (\n          <>\n            <WalletSummary dbInitialized={dbInitialized} refresh={refreshWallets} />\n            <ExpenseSummary \n              expenses={expenses} \n              total={totalExpenses + totalIncome} \n            />\n            <ExpenseChart expenses={expenses} />\n            <ExpenseList \n              expenses={expenses} \n              deleteExpense={deleteExpense} \n              updateExpense={updateExpense} \n              dbInitialized={dbInitialized}\n            />\n          </>\n        );\n    }\n  };\n\n  return (\n    <>\n      {/* Modern Navbar */}\n      <Navbar className=\"fixed top-0 left-0 right-0 shadow-md z-30\">\n        <Dropdown>\n          <DropdownButton as={NavbarItem}>\n            <NavbarLabel className=\"text-indigo-400 font-bold text-xl\">Rupiah Tracker</NavbarLabel>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 ml-2 text-gray-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </DropdownButton>\n          <DropdownMenu className=\"min-w-52\">\n            <DropdownItem onClick={() => setActiveTab('home')}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\" />\n              </svg>\n              <DropdownLabel>Home</DropdownLabel>\n            </DropdownItem>\n            <DropdownItem onClick={() => setActiveTab('wallets')}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path d=\"M4 4a2 2 0 012-2h8a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 0v12h8V4H6zm2 2h4v2H8V6z\" />\n              </svg>\n              <DropdownLabel>Wallets</DropdownLabel>\n            </DropdownItem>\n            <DropdownItem onClick={() => setActiveTab('recurring')}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n              </svg>\n              <DropdownLabel>Recurring</DropdownLabel>\n            </DropdownItem>\n            <DropdownItem onClick={() => setActiveTab('settings')}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\" clipRule=\"evenodd\" />\n              </svg>\n              <DropdownLabel>Settings</DropdownLabel>\n            </DropdownItem>\n            <DropdownDivider />\n            <DropdownItem onClick={() => setIsModalOpen(true)}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\" clipRule=\"evenodd\" />\n              </svg>\n              <DropdownLabel>Add Transaction</DropdownLabel>\n            </DropdownItem>\n          </DropdownMenu>\n        </Dropdown>\n\n        <NavbarDivider className=\"max-md:hidden\" />\n        \n        <NavbarSection className=\"max-md:hidden\">\n          <NavbarItem \n            onClick={() => setActiveTab('home')} \n            current={activeTab === 'home'}\n          >\n            Home\n          </NavbarItem>\n          <NavbarItem \n            onClick={() => setActiveTab('wallets')} \n            current={activeTab === 'wallets'}\n          >\n            Wallets\n          </NavbarItem>\n          <NavbarItem \n            onClick={() => setActiveTab('recurring')} \n            current={activeTab === 'recurring'}\n          >\n            Recurring\n          </NavbarItem>\n          <NavbarItem \n            onClick={() => setActiveTab('settings')} \n            current={activeTab === 'settings'}\n          >\n            Settings\n          </NavbarItem>\n        </NavbarSection>\n        \n        <NavbarSpacer />\n        \n        <NavbarSection>\n          <Dropdown>\n            <DropdownButton as={NavbarItem}>\n              <div className=\"relative\">\n                <Avatar initials=\"RS\" className=\"bg-indigo-600\" />\n                {dbInitialized && (\n                  <span className=\"absolute -top-1 -right-1 block h-2.5 w-2.5 rounded-full bg-green-400 border-2 border-gray-900\"></span>\n                )}\n              </div>\n            </DropdownButton>\n            <DropdownMenu className=\"min-w-52\" anchor=\"bottom end\">\n              <DropdownItem onClick={() => setActiveTab('settings')}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\" clipRule=\"evenodd\" />\n                </svg>\n                <DropdownLabel>Settings</DropdownLabel>\n              </DropdownItem>\n              <DropdownDivider />\n              <DropdownItem>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                </svg>\n                <DropdownLabel>About</DropdownLabel>\n              </DropdownItem>\n              <DropdownItem>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm0 2h10v7h-2l-1 2H8l-1-2H5V5z\" clipRule=\"evenodd\" />\n                </svg>\n                <DropdownLabel>Feedback</DropdownLabel>\n              </DropdownItem>\n              {dbInitialized && (\n                <div className=\"px-4 py-2 text-xs text-green-400 flex items-center\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Using IndexedDB\n                </div>\n              )}\n            </DropdownMenu>\n          </Dropdown>\n        </NavbarSection>\n      </Navbar>\n\n      <div className=\"max-w-4xl mx-auto px-6 pb-24 pt-20\">\n        {renderContent()}\n        \n        {/* Floating Action Button - only visible on mobile and home tab */}\n        {activeTab === 'home' && (\n          <div className=\"md:hidden\">\n            <FloatingActionButton onClick={() => setIsModalOpen(true)} />\n          </div>\n        )}\n        \n        {/* Add Transaction Modal */}\n        <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n          <ExpenseForm \n            addExpense={addExpense} \n            dbInitialized={dbInitialized} \n            onClose={() => setIsModalOpen(false)} \n          />\n        </Modal>\n        \n        {/* Add Recurring Transaction Modal */}\n        <Modal isOpen={isRecurringModalOpen} onClose={() => setIsRecurringModalOpen(false)}>\n          <RecurringForm \n            addRecurringTransaction={addRecurringTransaction} \n            dbInitialized={dbInitialized} \n            onClose={() => setIsRecurringModalOpen(false)} \n          />\n        </Modal>\n        \n        {/* Show bottom navigation on mobile */}\n        <div className=\"md:hidden\">\n          <BottomNavigation activeTab={activeTab} setActiveTab={setActiveTab} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}