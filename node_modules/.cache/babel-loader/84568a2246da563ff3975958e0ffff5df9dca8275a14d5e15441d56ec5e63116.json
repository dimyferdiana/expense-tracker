{"ast":null,"code":"import _objectSpread from\"/Users/ddm/expense-tracker/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import ExpenseForm from'./components/ExpenseForm';import ExpenseList from'./components/ExpenseList';import ExpenseSummary from'./components/ExpenseSummary';import ExpenseChart from'./components/ExpenseChart';import Settings from'./components/Settings';import RecurringForm from'./components/RecurringForm';import RecurringList from'./components/RecurringList';import BottomNavigation from'./components/BottomNavigation';import FloatingActionButton from'./components/FloatingActionButton';import Modal from'./components/Modal';import{Navbar,NavbarDivider,NavbarItem,NavbarLabel,NavbarSection,NavbarSpacer}from'./components/Navbar';import{Dropdown,DropdownButton,DropdownDivider,DropdownItem,DropdownLabel,DropdownMenu}from'./components/Dropdown';import{Avatar}from'./components/Avatar';import{initializeDatabase,expenseDB,categoryDB,walletDB,recurringDB,tagDB}from'./utils/db';import Wallets from'./components/Wallets';import WalletSummary from'./components/WalletSummary';import{processRecurringTransactions}from'./utils/scheduler';import TransactionListPage from'./pages/TransactionListPage';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[activeTab,setActiveTab]=useState('home');const[expenses,setExpenses]=useState([]);const[isLoading,setIsLoading]=useState(true);const[dbInitialized,setDbInitialized]=useState(false);const[isModalOpen,setIsModalOpen]=useState(false);const[isRecurringModalOpen,setIsRecurringModalOpen]=useState(false);const[refreshRecurring,setRefreshRecurring]=useState(0);// Counter to trigger refreshes\nconst[refreshWallets,setRefreshWallets]=useState(0);// Counter to trigger wallet refreshes\n// Initialize database\nuseEffect(()=>{const init=async()=>{try{const initialized=await initializeDatabase();setDbInitialized(initialized);if(initialized){// Load all expenses after DB initialization\nloadExpenses();// Check for and process any recurring transactions that are due\nconst result=await processRecurringTransactions();if(result.processed>0){// If transactions were processed, refresh the expenses list\nloadExpenses();// And update the recurring transactions counter\nsetRefreshRecurring(prev=>prev+1);}}else{// Fall back to localStorage if IndexedDB fails\nfallbackToLocalStorage();}}catch(error){console.error('Failed to initialize database:',error);fallbackToLocalStorage();}finally{setIsLoading(false);}};init();},[]);// Fallback to localStorage if IndexedDB fails\nconst fallbackToLocalStorage=()=>{const savedExpenses=localStorage.getItem('expenses');if(savedExpenses){setExpenses(JSON.parse(savedExpenses));}setIsLoading(false);};// Load expenses from IndexedDB\nconst loadExpenses=async()=>{try{const allExpenses=await expenseDB.getAll();setExpenses(allExpenses);}catch(error){console.error('Error loading expenses:',error);fallbackToLocalStorage();}finally{setIsLoading(false);}};// Save expenses to localStorage (fallback)\nuseEffect(()=>{if(!dbInitialized&&expenses.length>0){localStorage.setItem('expenses',JSON.stringify(expenses));}},[expenses,dbInitialized]);// Add new expense\nconst addExpense=async expense=>{// Normalize tags: convert any tag objects to just their IDs\n// Tags from our selector should already have proper IDs now, not temporary ones\nconst normalizedTags=expense.tags.map(tag=>typeof tag==='object'&&tag!==null?tag.id:tag);// Now ensure that all tags used exist in the database\nif(dbInitialized){try{// Get all existing tags\nconst allTags=await tagDB.getAll();// Check if any normalized tag IDs don't exist in the database\nfor(const tagId of normalizedTags){if(!allTags.some(t=>t.id===tagId)){// This tag ID doesn't exist in the database yet, create it\nconsole.log(\"Creating missing tag with ID: \".concat(tagId));await tagDB.add({id:tagId,name:tagId.charAt(0).toUpperCase()+tagId.slice(1).replace(/-/g,' ')});}}}catch(tagError){console.error('Error checking/creating tags:',tagError);// Continue with adding the expense even if tag verification fails\n}}const newExpense=_objectSpread(_objectSpread({},expense),{},{tags:normalizedTags,id:Date.now(),// Simple way to generate unique ID\ndate:expense.date||new Date().toISOString().slice(0,10)// YYYY-MM-DD format\n});if(dbInitialized){try{// Add the expense to the database\nawait expenseDB.add(newExpense);// Update wallet balance based on transaction type\nif(newExpense.walletId){try{// Get the current wallet\nconst wallets=await walletDB.getAll();const wallet=wallets.find(w=>w.id===newExpense.walletId);if(wallet){// Update wallet balance based on transaction type\nif(newExpense.isIncome){// Add income to wallet balance\nwallet.balance=parseFloat(wallet.balance)+parseFloat(newExpense.amount);}else{// Subtract expense from wallet balance\nwallet.balance=parseFloat(wallet.balance)-parseFloat(newExpense.amount);}await walletDB.update(wallet);}}catch(walletError){console.error('Error updating wallet balance:',walletError);}}// Reload expenses from DB\nloadExpenses();// Refresh wallet balance display\nsetRefreshWallets(prev=>prev+1);// Close modal after adding expense\nsetIsModalOpen(false);}catch(error){console.error('Error adding expense:',error);// Fall back to state-only update\nsetExpenses(prevExpenses=>[...prevExpenses,newExpense]);setIsModalOpen(false);}}else{// If DB not initialized, just update state\nsetExpenses(prevExpenses=>[...prevExpenses,newExpense]);// Also update wallet in localStorage if available\ntry{const savedWallets=localStorage.getItem('wallets');if(savedWallets&&newExpense.walletId){const wallets=JSON.parse(savedWallets);const walletIndex=wallets.findIndex(w=>w.id===newExpense.walletId);if(walletIndex!==-1){if(newExpense.isIncome){// Add income to wallet balance\nwallets[walletIndex].balance=parseFloat(wallets[walletIndex].balance)+parseFloat(newExpense.amount);}else{// Subtract expense from wallet balance\nwallets[walletIndex].balance=parseFloat(wallets[walletIndex].balance)-parseFloat(newExpense.amount);}localStorage.setItem('wallets',JSON.stringify(wallets));}}}catch(e){console.error('Error updating wallet in localStorage:',e);}// Close modal after adding expense\nsetIsModalOpen(false);// Refresh wallet balance display\nsetRefreshWallets(prev=>prev+1);}};// Update existing expense\nconst updateExpense=async updatedExpense=>{// Normalize tags: convert any tag objects to just their IDs\n// Tags from our selector should already have proper IDs now, not temporary ones\nconst normalizedTags=updatedExpense.tags.map(tag=>typeof tag==='object'&&tag!==null?tag.id:tag);const normalizedExpense=_objectSpread(_objectSpread({},updatedExpense),{},{tags:normalizedTags});if(dbInitialized){try{// Find the original expense to get the original amount and wallet\nconst allExpenses=await expenseDB.getAll();const originalExpense=allExpenses.find(e=>e.id===normalizedExpense.id);if(originalExpense){// If wallets are different or amounts are different, adjust balances\nif(originalExpense.walletId!==normalizedExpense.walletId||parseFloat(originalExpense.amount)!==parseFloat(normalizedExpense.amount)){try{const wallets=await walletDB.getAll();// Return money to the original wallet\nif(originalExpense.walletId){const originalWallet=wallets.find(w=>w.id===originalExpense.walletId);if(originalWallet){if(originalExpense.isIncome){// Remove the income amount from the original wallet\noriginalWallet.balance=parseFloat(originalWallet.balance)-parseFloat(originalExpense.amount);}else{// Return the expense amount to the original wallet\noriginalWallet.balance=parseFloat(originalWallet.balance)+parseFloat(originalExpense.amount);}await walletDB.update(originalWallet);}}// Update the new wallet balance\nif(normalizedExpense.walletId){const newWallet=wallets.find(w=>w.id===normalizedExpense.walletId);if(newWallet){if(normalizedExpense.isIncome){// Add the income amount to the new wallet\nnewWallet.balance=parseFloat(newWallet.balance)+parseFloat(normalizedExpense.amount);}else{// Deduct the expense amount from the new wallet\nnewWallet.balance=parseFloat(newWallet.balance)-parseFloat(normalizedExpense.amount);}await walletDB.update(newWallet);}}}catch(walletError){console.error('Error adjusting wallet balances:',walletError);}}}// Update the expense\nawait expenseDB.update(normalizedExpense);// Reload expenses from DB\nloadExpenses();// Refresh wallet balance display\nsetRefreshWallets(prev=>prev+1);}catch(error){console.error('Error updating expense:',error);// Fall back to state-only update\nsetExpenses(prevExpenses=>prevExpenses.map(expense=>expense.id===normalizedExpense.id?normalizedExpense:expense));}}else{// If DB not initialized, handle localStorage\nconst savedExpenses=JSON.parse(localStorage.getItem('expenses')||'[]');const originalExpense=savedExpenses.find(e=>e.id===normalizedExpense.id);// Adjust wallet balances in localStorage if needed\nif(originalExpense&&(originalExpense.walletId!==normalizedExpense.walletId||parseFloat(originalExpense.amount)!==parseFloat(normalizedExpense.amount))){try{const savedWallets=localStorage.getItem('wallets');if(savedWallets){let wallets=JSON.parse(savedWallets);// Return money to the original wallet\nif(originalExpense.walletId){const originalWalletIndex=wallets.findIndex(w=>w.id===originalExpense.walletId);if(originalWalletIndex!==-1){if(originalExpense.isIncome){// Remove the income amount from the original wallet\nwallets[originalWalletIndex].balance=parseFloat(wallets[originalWalletIndex].balance)-parseFloat(originalExpense.amount);}else{// Return the expense amount to the original wallet\nwallets[originalWalletIndex].balance=parseFloat(wallets[originalWalletIndex].balance)+parseFloat(originalExpense.amount);}}}// Update the new wallet balance\nif(normalizedExpense.walletId){const newWalletIndex=wallets.findIndex(w=>w.id===normalizedExpense.walletId);if(newWalletIndex!==-1){if(normalizedExpense.isIncome){// Add the income amount to the new wallet\nwallets[newWalletIndex].balance=parseFloat(wallets[newWalletIndex].balance)+parseFloat(normalizedExpense.amount);}else{// Deduct the expense amount from the new wallet\nwallets[newWalletIndex].balance=parseFloat(wallets[newWalletIndex].balance)-parseFloat(normalizedExpense.amount);}}}localStorage.setItem('wallets',JSON.stringify(wallets));}}catch(e){console.error('Error updating wallet in localStorage:',e);}}// Update expenses in state\nsetExpenses(prevExpenses=>prevExpenses.map(expense=>expense.id===normalizedExpense.id?normalizedExpense:expense));// Refresh wallet balance display\nsetRefreshWallets(prev=>prev+1);}};// Delete expense\nconst deleteExpense=async id=>{if(dbInitialized){try{// Find the expense to get its amount and wallet\nconst allExpenses=await expenseDB.getAll();const expenseToDelete=allExpenses.find(e=>e.id===id);if(expenseToDelete&&expenseToDelete.walletId){try{// Get the wallet\nconst wallets=await walletDB.getAll();const wallet=wallets.find(w=>w.id===expenseToDelete.walletId);if(wallet){// Add the expense amount back to the wallet balance (since expense is being deleted)\nif(expenseToDelete.isIncome){// For income transactions, subtract it back from wallet balance when deleted\nwallet.balance=parseFloat(wallet.balance)-parseFloat(expenseToDelete.amount);}else{// For expenses, add it back to wallet balance when deleted\nwallet.balance=parseFloat(wallet.balance)+parseFloat(expenseToDelete.amount);}await walletDB.update(wallet);}}catch(walletError){console.error('Error updating wallet balance:',walletError);}}// Delete the expense\nawait expenseDB.delete(id);// Reload expenses from DB\nloadExpenses();// Refresh wallet balance display\nsetRefreshWallets(prev=>prev+1);}catch(error){console.error('Error deleting expense:',error);// Fall back to state-only update\nsetExpenses(prevExpenses=>prevExpenses.filter(expense=>expense.id!==id));}}else{// If DB not initialized, find the expense in state before filtering\nconst expenseToDelete=expenses.find(e=>e.id===id);// Update wallet in localStorage if available\nif(expenseToDelete&&expenseToDelete.walletId){try{const savedWallets=localStorage.getItem('wallets');if(savedWallets){let wallets=JSON.parse(savedWallets);const walletIndex=wallets.findIndex(w=>w.id===expenseToDelete.walletId);if(walletIndex!==-1){if(expenseToDelete.isIncome){// For income transactions, subtract it back from wallet balance when deleted\nwallets[walletIndex].balance=parseFloat(wallets[walletIndex].balance)-parseFloat(expenseToDelete.amount);}else{// For expenses, add it back to wallet balance when deleted\nwallets[walletIndex].balance=parseFloat(wallets[walletIndex].balance)+parseFloat(expenseToDelete.amount);}localStorage.setItem('wallets',JSON.stringify(wallets));}}}catch(e){console.error('Error updating wallet in localStorage:',e);}}// Update state\nsetExpenses(prevExpenses=>prevExpenses.filter(expense=>expense.id!==id));// Refresh wallet balance display\nsetRefreshWallets(prev=>prev+1);}};// Calculate total expenses and income\nconst totalExpenses=expenses.filter(expense=>!expense.isIncome).reduce((total,expense)=>total+parseFloat(expense.amount),0);const totalIncome=expenses.filter(expense=>expense.isIncome).reduce((total,expense)=>total+parseFloat(expense.amount),0);const netCashFlow=totalIncome-totalExpenses;// Add recurring transaction\nconst addRecurringTransaction=async transaction=>{try{// Normalize tags: convert any tag objects to just their IDs\nconst normalizedTags=transaction.tags.map(tag=>typeof tag==='object'&&tag!==null?tag.id:tag);// Ensure all required fields exist\nconst normalizedTransaction=_objectSpread(_objectSpread({},transaction),{},{id:transaction.id||Date.now(),tags:normalizedTags,name:transaction.name||'',amount:parseFloat(transaction.amount||0),walletId:transaction.walletId||'cash',category:transaction.category||'other',frequency:transaction.frequency||'monthly',startDate:transaction.startDate||new Date().toISOString().slice(0,10),nextDate:transaction.startDate||new Date().toISOString().slice(0,10),// Initially use startDate as nextDate\nisIncome:!!transaction.isIncome,notes:transaction.notes||''});if(dbInitialized){try{console.log('Saving recurring transaction:',normalizedTransaction);// Add to database\nawait recurringDB.add(normalizedTransaction);// Process past occurrences if the start date is in the past\nconst startDate=new Date(normalizedTransaction.startDate);const today=new Date();today.setHours(0,0,0,0);// Reset time part for proper comparison\nif(startDate<=today){console.log('Start date is in the past, processing past occurrences');// Create a transaction for the start date first\nawait createTransactionFromRecurring(_objectSpread(_objectSpread({},normalizedTransaction),{},{date:normalizedTransaction.startDate// Use the start date as the transaction date\n}));// If start date is before today, generate additional occurrences as needed\nif(startDate<today){let currentDate=startDate;let occurrenceDate=startDate;let nextDate;// Continue generating transactions until we reach today\nwhile(true){// Calculate the next occurrence date\nnextDate=new Date(occurrenceDate);switch(normalizedTransaction.frequency){case'daily':nextDate.setDate(nextDate.getDate()+1);break;case'weekly':nextDate.setDate(nextDate.getDate()+7);break;case'biweekly':nextDate.setDate(nextDate.getDate()+14);break;case'monthly':nextDate.setMonth(nextDate.getMonth()+1);break;case'quarterly':nextDate.setMonth(nextDate.getMonth()+3);break;case'annually':nextDate.setFullYear(nextDate.getFullYear()+1);break;default:nextDate.setMonth(nextDate.getMonth()+1);}// Stop if next occurrence is in the future\nif(nextDate>today){break;}// Create a transaction for this occurrence\nawait createTransactionFromRecurring(_objectSpread(_objectSpread({},normalizedTransaction),{},{date:nextDate.toISOString().slice(0,10)}));// Update for next iteration\noccurrenceDate=nextDate;}// Update the recurring transaction with the correct next date\nawait recurringDB.update(_objectSpread(_objectSpread({},normalizedTransaction),{},{nextDate:nextDate.toISOString().slice(0,10)}));}else{// If start date is today, calculate next date\nconst nextDate=calculateNextDate(normalizedTransaction.frequency,normalizedTransaction.startDate);// Update recurring transaction with next date\nawait recurringDB.update(_objectSpread(_objectSpread({},normalizedTransaction),{},{nextDate}));}}else{console.log('Start date is in the future, nextDate remains as startDate');// Future start date - no transactions to create yet\n}// Refresh the expenses list to show the new transactions\nawait loadExpenses();// Update wallet display\nsetRefreshWallets(prev=>prev+1);// Close modal\nsetIsRecurringModalOpen(false);// Refresh the recurring list\nsetRefreshRecurring(prev=>prev+1);}catch(error){console.error('Error adding recurring transaction to database:',error);alert('Failed to save recurring transaction. Please try again.');}}else{// Fallback to localStorage\ntry{const savedRecurring=JSON.parse(localStorage.getItem('recurring-transactions')||'[]');savedRecurring.push(normalizedTransaction);localStorage.setItem('recurring-transactions',JSON.stringify(savedRecurring));// Process for localStorage\nconst startDate=new Date(normalizedTransaction.startDate);const today=new Date();today.setHours(0,0,0,0);if(startDate<=today){const savedExpenses=JSON.parse(localStorage.getItem('expenses')||'[]');const savedWallets=JSON.parse(localStorage.getItem('wallets')||'[]');// Create a transaction for the start date\nconst initialTransaction={id:Date.now(),name:normalizedTransaction.name,amount:normalizedTransaction.amount,category:normalizedTransaction.category,tags:[...normalizedTransaction.tags,'recurring'],walletId:normalizedTransaction.walletId,isIncome:normalizedTransaction.isIncome,notes:normalizedTransaction.notes,date:normalizedTransaction.startDate};// Add to expenses\nsavedExpenses.push(initialTransaction);// Update wallet\nif(initialTransaction.walletId){const walletIndex=savedWallets.findIndex(w=>w.id===initialTransaction.walletId);if(walletIndex!==-1){const adjustment=initialTransaction.isIncome?parseFloat(initialTransaction.amount):-parseFloat(initialTransaction.amount);savedWallets[walletIndex].balance=parseFloat(savedWallets[walletIndex].balance)+adjustment;}}// If start date is before today, generate additional occurrences\nif(startDate<today){let currentDate=startDate;let occurrenceDate=startDate;let nextDate;// Generate past transactions\nwhile(true){nextDate=new Date(occurrenceDate);switch(normalizedTransaction.frequency){case'daily':nextDate.setDate(nextDate.getDate()+1);break;case'weekly':nextDate.setDate(nextDate.getDate()+7);break;case'biweekly':nextDate.setDate(nextDate.getDate()+14);break;case'monthly':nextDate.setMonth(nextDate.getMonth()+1);break;case'quarterly':nextDate.setMonth(nextDate.getMonth()+3);break;case'annually':nextDate.setFullYear(nextDate.getFullYear()+1);break;default:nextDate.setMonth(nextDate.getMonth()+1);}if(nextDate>today){break;}const recTransaction={id:Date.now()+savedExpenses.length,name:normalizedTransaction.name,amount:normalizedTransaction.amount,category:normalizedTransaction.category,tags:[...normalizedTransaction.tags,'recurring'],walletId:normalizedTransaction.walletId,isIncome:normalizedTransaction.isIncome,notes:normalizedTransaction.notes,date:nextDate.toISOString().slice(0,10)};// Add to expenses\nsavedExpenses.push(recTransaction);// Update wallet\nif(recTransaction.walletId){const walletIndex=savedWallets.findIndex(w=>w.id===recTransaction.walletId);if(walletIndex!==-1){const adjustment=recTransaction.isIncome?parseFloat(recTransaction.amount):-parseFloat(recTransaction.amount);savedWallets[walletIndex].balance=parseFloat(savedWallets[walletIndex].balance)+adjustment;}}occurrenceDate=nextDate;}// Update the recurring transaction's next date\nnormalizedTransaction.nextDate=nextDate.toISOString().slice(0,10);// Update in the saved recurring list\nconst recIndex=savedRecurring.findIndex(r=>r.id===normalizedTransaction.id);if(recIndex!==-1){savedRecurring[recIndex]=normalizedTransaction;}localStorage.setItem('recurring-transactions',JSON.stringify(savedRecurring));}else{// If start date is today, calculate next date\nconst nextDate=calculateNextDate(normalizedTransaction.frequency,normalizedTransaction.startDate);// Update the recurring transaction\nnormalizedTransaction.nextDate=nextDate;// Update in the saved recurring list\nconst recIndex=savedRecurring.findIndex(r=>r.id===normalizedTransaction.id);if(recIndex!==-1){savedRecurring[recIndex]=normalizedTransaction;}localStorage.setItem('recurring-transactions',JSON.stringify(savedRecurring));}// Save updated expenses and wallets\nlocalStorage.setItem('expenses',JSON.stringify(savedExpenses));localStorage.setItem('wallets',JSON.stringify(savedWallets));// Update expenses state\nsetExpenses(savedExpenses);}// Close modal\nsetIsRecurringModalOpen(false);// Refresh the list\nsetRefreshRecurring(prev=>prev+1);// Update wallet display\nsetRefreshWallets(prev=>prev+1);}catch(error){console.error('Error saving recurring transaction to localStorage:',error);alert('Failed to save recurring transaction. Please try again.');}}}catch(error){console.error('Error processing recurring transaction:',error);alert('Failed to process recurring transaction. Please try again.');}};// Helper function to create a transaction from a recurring template\nconst createTransactionFromRecurring=async recurringData=>{try{// Create the transaction object\nconst newTransaction={id:Date.now()+Math.floor(Math.random()*1000),// Ensure unique ID\nname:recurringData.name,amount:recurringData.amount,category:recurringData.category,tags:[...recurringData.tags,'recurring'],// Add recurring tag\nwalletId:recurringData.walletId,isIncome:recurringData.isIncome,notes:recurringData.notes,date:recurringData.date// Use the provided date\n};// Add the transaction to the database\nawait expenseDB.add(newTransaction);// Update wallet balance\ntry{const wallets=await walletDB.getAll();const wallet=wallets.find(w=>w.id===newTransaction.walletId);if(wallet){// For income add to balance, for expense subtract\nconst adjustment=newTransaction.isIncome?parseFloat(newTransaction.amount):-parseFloat(newTransaction.amount);wallet.balance=parseFloat(wallet.balance)+adjustment;await walletDB.update(wallet);}}catch(walletError){console.error('Error updating wallet balance:',walletError);}return newTransaction;}catch(error){console.error('Error creating transaction from recurring template:',error);throw error;}};// Helper function to calculate next date based on frequency\nconst calculateNextDate=(frequency,currentDate)=>{const date=new Date(currentDate);switch(frequency){case'daily':date.setDate(date.getDate()+1);break;case'weekly':date.setDate(date.getDate()+7);break;case'biweekly':date.setDate(date.getDate()+14);break;case'monthly':date.setMonth(date.getMonth()+1);break;case'quarterly':date.setMonth(date.getMonth()+3);break;case'annually':date.setFullYear(date.getFullYear()+1);break;default:date.setMonth(date.getMonth()+1);// Default to monthly\n}return date.toISOString().slice(0,10);};// Render content based on active tab\nconst renderContent=()=>{if(isLoading){return/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-center items-center py-12\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-indigo-400\",children:/*#__PURE__*/_jsxs(\"svg\",{className:\"animate-spin h-10 w-10 mr-3\",viewBox:\"0 0 24 24\",children:[/*#__PURE__*/_jsx(\"circle\",{className:\"opacity-25\",cx:\"12\",cy:\"12\",r:\"10\",stroke:\"currentColor\",strokeWidth:\"4\",fill:\"none\"}),/*#__PURE__*/_jsx(\"path\",{className:\"opacity-75\",fill:\"currentColor\",d:\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"})]})}),/*#__PURE__*/_jsx(\"p\",{className:\"text-indigo-300 text-lg font-medium\",children:\"Loading...\"})]});}switch(activeTab){case'settings':return/*#__PURE__*/_jsx(Settings,{dbInitialized:dbInitialized});case'wallets':return/*#__PURE__*/_jsx(Wallets,{dbInitialized:dbInitialized});case'recurring':return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(RecurringList,{dbInitialized:dbInitialized,refreshData:refreshRecurring}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-end mb-8\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsRecurringModalOpen(true),className:\"px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors shadow-md\",children:\"Add Recurring Transaction\"})})]});case'transactions':return/*#__PURE__*/_jsx(TransactionListPage,{expenses:expenses,deleteExpense:deleteExpense,updateExpense:updateExpense,dbInitialized:dbInitialized});case'home':default:return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(WalletSummary,{dbInitialized:dbInitialized,refresh:refreshWallets}),/*#__PURE__*/_jsx(ExpenseSummary,{expenses:expenses,total:totalExpenses+totalIncome}),/*#__PURE__*/_jsx(ExpenseChart,{expenses:expenses}),/*#__PURE__*/_jsx(ExpenseList,{expenses:expenses,deleteExpense:deleteExpense,updateExpense:updateExpense,dbInitialized:dbInitialized})]});}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Navbar,{className:\"fixed top-0 left-0 right-0 shadow-md z-30\",children:[/*#__PURE__*/_jsxs(Dropdown,{children:[/*#__PURE__*/_jsxs(DropdownButton,{as:NavbarItem,children:[/*#__PURE__*/_jsx(NavbarLabel,{className:\"text-indigo-400 font-bold text-xl\",children:\"Rupiah Tracker\"}),/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5 ml-2 text-gray-500\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\",clipRule:\"evenodd\"})})]}),/*#__PURE__*/_jsxs(DropdownMenu,{className:\"min-w-52\",children:[/*#__PURE__*/_jsxs(DropdownItem,{onClick:()=>setActiveTab('home'),children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\"})}),/*#__PURE__*/_jsx(DropdownLabel,{children:\"Home\"})]}),/*#__PURE__*/_jsxs(DropdownItem,{onClick:()=>setActiveTab('wallets'),children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M4 4a2 2 0 012-2h8a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 0v12h8V4H6zm2 2h4v2H8V6z\"})}),/*#__PURE__*/_jsx(DropdownLabel,{children:\"Wallets\"})]}),/*#__PURE__*/_jsxs(DropdownItem,{onClick:()=>setActiveTab('recurring'),children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\",clipRule:\"evenodd\"})}),/*#__PURE__*/_jsx(DropdownLabel,{children:\"Recurring\"})]}),/*#__PURE__*/_jsxs(DropdownItem,{onClick:()=>setActiveTab('settings'),children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\",clipRule:\"evenodd\"})}),/*#__PURE__*/_jsx(DropdownLabel,{children:\"Settings\"})]}),/*#__PURE__*/_jsx(DropdownDivider,{}),/*#__PURE__*/_jsxs(DropdownItem,{onClick:()=>setIsModalOpen(true),children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\",clipRule:\"evenodd\"})}),/*#__PURE__*/_jsx(DropdownLabel,{children:\"Add Transaction\"})]})]})]}),/*#__PURE__*/_jsx(NavbarDivider,{className:\"max-md:hidden\"}),/*#__PURE__*/_jsxs(NavbarSection,{className:\"max-md:hidden\",children:[/*#__PURE__*/_jsx(NavbarItem,{onClick:()=>setActiveTab('home'),current:activeTab==='home',children:\"Home\"}),/*#__PURE__*/_jsx(NavbarItem,{onClick:()=>setActiveTab('wallets'),current:activeTab==='wallets',children:\"Wallets\"}),/*#__PURE__*/_jsx(NavbarItem,{onClick:()=>setActiveTab('recurring'),current:activeTab==='recurring',children:\"Recurring\"}),/*#__PURE__*/_jsx(NavbarItem,{onClick:()=>setActiveTab('settings'),current:activeTab==='settings',children:\"Settings\"})]}),/*#__PURE__*/_jsx(NavbarSpacer,{}),/*#__PURE__*/_jsx(NavbarSection,{children:/*#__PURE__*/_jsxs(Dropdown,{children:[/*#__PURE__*/_jsx(DropdownButton,{as:NavbarItem,children:/*#__PURE__*/_jsxs(\"div\",{className:\"relative\",children:[/*#__PURE__*/_jsx(Avatar,{initials:\"RS\",className:\"bg-indigo-600\"}),dbInitialized&&/*#__PURE__*/_jsx(\"span\",{className:\"absolute -top-1 -right-1 block h-2.5 w-2.5 rounded-full bg-green-400 border-2 border-gray-900\"})]})}),/*#__PURE__*/_jsxs(DropdownMenu,{className:\"min-w-52\",anchor:\"bottom end\",children:[/*#__PURE__*/_jsxs(DropdownItem,{onClick:()=>setActiveTab('settings'),children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\",clipRule:\"evenodd\"})}),/*#__PURE__*/_jsx(DropdownLabel,{children:\"Settings\"})]}),/*#__PURE__*/_jsx(DropdownDivider,{}),/*#__PURE__*/_jsxs(DropdownItem,{children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9a1 1 0 00-1-1z\",clipRule:\"evenodd\"})}),/*#__PURE__*/_jsx(DropdownLabel,{children:\"About\"})]}),/*#__PURE__*/_jsxs(DropdownItem,{children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm0 2h10v7h-2l-1 2H8l-1-2H5V5z\",clipRule:\"evenodd\"})}),/*#__PURE__*/_jsx(DropdownLabel,{children:\"Feedback\"})]}),dbInitialized&&/*#__PURE__*/_jsxs(\"div\",{className:\"px-4 py-2 text-xs text-green-400 flex items-center\",children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-4 w-4 mr-1\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\",clipRule:\"evenodd\"})}),\"Using IndexedDB\"]})]})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-4xl mx-auto px-6 pb-24 pt-20\",children:[renderContent(),activeTab==='home'&&/*#__PURE__*/_jsx(\"div\",{className:\"md:hidden\",children:/*#__PURE__*/_jsx(FloatingActionButton,{onClick:()=>setIsModalOpen(true)})}),/*#__PURE__*/_jsx(Modal,{isOpen:isModalOpen,onClose:()=>setIsModalOpen(false),children:/*#__PURE__*/_jsx(ExpenseForm,{addExpense:addExpense,dbInitialized:dbInitialized,onClose:()=>setIsModalOpen(false)})}),/*#__PURE__*/_jsx(Modal,{isOpen:isRecurringModalOpen,onClose:()=>setIsRecurringModalOpen(false),children:/*#__PURE__*/_jsx(RecurringForm,{addRecurringTransaction:addRecurringTransaction,dbInitialized:dbInitialized,onClose:()=>setIsRecurringModalOpen(false)})}),/*#__PURE__*/_jsx(\"div\",{className:\"md:hidden\",children:/*#__PURE__*/_jsx(BottomNavigation,{activeTab:activeTab,setActiveTab:setActiveTab})})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","ExpenseForm","ExpenseList","ExpenseSummary","ExpenseChart","Settings","RecurringForm","RecurringList","BottomNavigation","FloatingActionButton","Modal","Navbar","NavbarDivider","NavbarItem","NavbarLabel","NavbarSection","NavbarSpacer","Dropdown","DropdownButton","DropdownDivider","DropdownItem","DropdownLabel","DropdownMenu","Avatar","initializeDatabase","expenseDB","categoryDB","walletDB","recurringDB","tagDB","Wallets","WalletSummary","processRecurringTransactions","TransactionListPage","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","activeTab","setActiveTab","expenses","setExpenses","isLoading","setIsLoading","dbInitialized","setDbInitialized","isModalOpen","setIsModalOpen","isRecurringModalOpen","setIsRecurringModalOpen","refreshRecurring","setRefreshRecurring","refreshWallets","setRefreshWallets","init","initialized","loadExpenses","result","processed","prev","fallbackToLocalStorage","error","console","savedExpenses","localStorage","getItem","JSON","parse","allExpenses","getAll","length","setItem","stringify","addExpense","expense","normalizedTags","tags","map","tag","id","allTags","tagId","some","t","log","concat","add","name","charAt","toUpperCase","slice","replace","tagError","newExpense","_objectSpread","Date","now","date","toISOString","walletId","wallets","wallet","find","w","isIncome","balance","parseFloat","amount","update","walletError","prevExpenses","savedWallets","walletIndex","findIndex","e","updateExpense","updatedExpense","normalizedExpense","originalExpense","originalWallet","newWallet","originalWalletIndex","newWalletIndex","deleteExpense","expenseToDelete","delete","filter","totalExpenses","reduce","total","totalIncome","netCashFlow","addRecurringTransaction","transaction","normalizedTransaction","category","frequency","startDate","nextDate","notes","today","setHours","createTransactionFromRecurring","currentDate","occurrenceDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","calculateNextDate","alert","savedRecurring","push","initialTransaction","adjustment","recTransaction","recIndex","r","recurringData","newTransaction","Math","floor","random","renderContent","className","children","viewBox","cx","cy","stroke","strokeWidth","fill","d","refreshData","onClick","refresh","as","xmlns","fillRule","clipRule","current","initials","anchor","isOpen","onClose"],"sources":["/Users/ddm/expense-tracker/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ExpenseForm from './components/ExpenseForm';\nimport ExpenseList from './components/ExpenseList';\nimport ExpenseSummary from './components/ExpenseSummary';\nimport ExpenseChart from './components/ExpenseChart';\nimport Settings from './components/Settings';\nimport RecurringForm from './components/RecurringForm';\nimport RecurringList from './components/RecurringList';\nimport BottomNavigation from './components/BottomNavigation';\nimport FloatingActionButton from './components/FloatingActionButton';\nimport Modal from './components/Modal';\nimport { \n  Navbar, \n  NavbarDivider, \n  NavbarItem, \n  NavbarLabel, \n  NavbarSection, \n  NavbarSpacer \n} from './components/Navbar';\nimport { \n  Dropdown, \n  DropdownButton, \n  DropdownDivider, \n  DropdownItem, \n  DropdownLabel, \n  DropdownMenu \n} from './components/Dropdown';\nimport { Avatar } from './components/Avatar';\nimport { initializeDatabase, expenseDB, categoryDB, walletDB, recurringDB, tagDB } from './utils/db';\nimport Wallets from './components/Wallets';\nimport WalletSummary from './components/WalletSummary';\nimport { processRecurringTransactions } from './utils/scheduler';\nimport TransactionListPage from './pages/TransactionListPage';\n\nfunction App() {\n  const [activeTab, setActiveTab] = useState('home');\n  const [expenses, setExpenses] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [dbInitialized, setDbInitialized] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isRecurringModalOpen, setIsRecurringModalOpen] = useState(false);\n  const [refreshRecurring, setRefreshRecurring] = useState(0); // Counter to trigger refreshes\n  const [refreshWallets, setRefreshWallets] = useState(0); // Counter to trigger wallet refreshes\n\n  // Initialize database\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const initialized = await initializeDatabase();\n        setDbInitialized(initialized);\n        \n        if (initialized) {\n          // Load all expenses after DB initialization\n          loadExpenses();\n          \n          // Check for and process any recurring transactions that are due\n          const result = await processRecurringTransactions();\n          if (result.processed > 0) {\n            // If transactions were processed, refresh the expenses list\n            loadExpenses();\n            // And update the recurring transactions counter\n            setRefreshRecurring(prev => prev + 1);\n          }\n        } else {\n          // Fall back to localStorage if IndexedDB fails\n          fallbackToLocalStorage();\n        }\n      } catch (error) {\n        console.error('Failed to initialize database:', error);\n        fallbackToLocalStorage();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    init();\n  }, []);\n\n  // Fallback to localStorage if IndexedDB fails\n  const fallbackToLocalStorage = () => {\n    const savedExpenses = localStorage.getItem('expenses');\n    if (savedExpenses) {\n      setExpenses(JSON.parse(savedExpenses));\n    }\n    setIsLoading(false);\n  };\n\n  // Load expenses from IndexedDB\n  const loadExpenses = async () => {\n    try {\n      const allExpenses = await expenseDB.getAll();\n      setExpenses(allExpenses);\n    } catch (error) {\n      console.error('Error loading expenses:', error);\n      fallbackToLocalStorage();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Save expenses to localStorage (fallback)\n  useEffect(() => {\n    if (!dbInitialized && expenses.length > 0) {\n      localStorage.setItem('expenses', JSON.stringify(expenses));\n    }\n  }, [expenses, dbInitialized]);\n\n  // Add new expense\n  const addExpense = async (expense) => {\n    // Normalize tags: convert any tag objects to just their IDs\n    // Tags from our selector should already have proper IDs now, not temporary ones\n    const normalizedTags = expense.tags.map(tag => \n      typeof tag === 'object' && tag !== null ? tag.id : tag\n    );\n    \n    // Now ensure that all tags used exist in the database\n    if (dbInitialized) {\n      try {\n        // Get all existing tags\n        const allTags = await tagDB.getAll();\n        \n        // Check if any normalized tag IDs don't exist in the database\n        for (const tagId of normalizedTags) {\n          if (!allTags.some(t => t.id === tagId)) {\n            // This tag ID doesn't exist in the database yet, create it\n            console.log(`Creating missing tag with ID: ${tagId}`);\n            await tagDB.add({\n              id: tagId,\n              name: tagId.charAt(0).toUpperCase() + tagId.slice(1).replace(/-/g, ' ')\n            });\n          }\n        }\n      } catch (tagError) {\n        console.error('Error checking/creating tags:', tagError);\n        // Continue with adding the expense even if tag verification fails\n      }\n    }\n    \n    const newExpense = {\n      ...expense,\n      tags: normalizedTags,\n      id: Date.now(), // Simple way to generate unique ID\n      date: expense.date || new Date().toISOString().slice(0, 10) // YYYY-MM-DD format\n    };\n    \n    if (dbInitialized) {\n      try {\n        // Add the expense to the database\n        await expenseDB.add(newExpense);\n        \n        // Update wallet balance based on transaction type\n        if (newExpense.walletId) {\n          try {\n            // Get the current wallet\n            const wallets = await walletDB.getAll();\n            const wallet = wallets.find(w => w.id === newExpense.walletId);\n            \n            if (wallet) {\n              // Update wallet balance based on transaction type\n              if (newExpense.isIncome) {\n                // Add income to wallet balance\n                wallet.balance = parseFloat(wallet.balance) + parseFloat(newExpense.amount);\n              } else {\n                // Subtract expense from wallet balance\n                wallet.balance = parseFloat(wallet.balance) - parseFloat(newExpense.amount);\n              }\n              await walletDB.update(wallet);\n            }\n          } catch (walletError) {\n            console.error('Error updating wallet balance:', walletError);\n          }\n        }\n        \n        // Reload expenses from DB\n        loadExpenses();\n        // Refresh wallet balance display\n        setRefreshWallets(prev => prev + 1);\n        // Close modal after adding expense\n        setIsModalOpen(false);\n      } catch (error) {\n        console.error('Error adding expense:', error);\n        // Fall back to state-only update\n        setExpenses(prevExpenses => [...prevExpenses, newExpense]);\n        setIsModalOpen(false);\n      }\n    } else {\n      // If DB not initialized, just update state\n      setExpenses(prevExpenses => [...prevExpenses, newExpense]);\n      \n      // Also update wallet in localStorage if available\n      try {\n        const savedWallets = localStorage.getItem('wallets');\n        if (savedWallets && newExpense.walletId) {\n          const wallets = JSON.parse(savedWallets);\n          const walletIndex = wallets.findIndex(w => w.id === newExpense.walletId);\n          \n          if (walletIndex !== -1) {\n            if (newExpense.isIncome) {\n              // Add income to wallet balance\n              wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) + parseFloat(newExpense.amount);\n            } else {\n              // Subtract expense from wallet balance\n              wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) - parseFloat(newExpense.amount);\n            }\n            localStorage.setItem('wallets', JSON.stringify(wallets));\n          }\n        }\n      } catch (e) {\n        console.error('Error updating wallet in localStorage:', e);\n      }\n      \n      // Close modal after adding expense\n      setIsModalOpen(false);\n      // Refresh wallet balance display\n      setRefreshWallets(prev => prev + 1);\n    }\n  };\n\n  // Update existing expense\n  const updateExpense = async (updatedExpense) => {\n    // Normalize tags: convert any tag objects to just their IDs\n    // Tags from our selector should already have proper IDs now, not temporary ones\n    const normalizedTags = updatedExpense.tags.map(tag => \n      typeof tag === 'object' && tag !== null ? tag.id : tag\n    );\n    \n    const normalizedExpense = {\n      ...updatedExpense,\n      tags: normalizedTags\n    };\n    \n    if (dbInitialized) {\n      try {\n        // Find the original expense to get the original amount and wallet\n        const allExpenses = await expenseDB.getAll();\n        const originalExpense = allExpenses.find(e => e.id === normalizedExpense.id);\n        \n        if (originalExpense) {\n          // If wallets are different or amounts are different, adjust balances\n          if (originalExpense.walletId !== normalizedExpense.walletId || \n              parseFloat(originalExpense.amount) !== parseFloat(normalizedExpense.amount)) {\n            \n            try {\n              const wallets = await walletDB.getAll();\n              \n              // Return money to the original wallet\n              if (originalExpense.walletId) {\n                const originalWallet = wallets.find(w => w.id === originalExpense.walletId);\n                if (originalWallet) {\n                  if (originalExpense.isIncome) {\n                    // Remove the income amount from the original wallet\n                    originalWallet.balance = parseFloat(originalWallet.balance) - parseFloat(originalExpense.amount);\n                  } else {\n                    // Return the expense amount to the original wallet\n                    originalWallet.balance = parseFloat(originalWallet.balance) + parseFloat(originalExpense.amount);\n                  }\n                  await walletDB.update(originalWallet);\n                }\n              }\n              \n              // Update the new wallet balance\n              if (normalizedExpense.walletId) {\n                const newWallet = wallets.find(w => w.id === normalizedExpense.walletId);\n                if (newWallet) {\n                  if (normalizedExpense.isIncome) {\n                    // Add the income amount to the new wallet\n                    newWallet.balance = parseFloat(newWallet.balance) + parseFloat(normalizedExpense.amount);\n                  } else {\n                    // Deduct the expense amount from the new wallet\n                    newWallet.balance = parseFloat(newWallet.balance) - parseFloat(normalizedExpense.amount);\n                  }\n                  await walletDB.update(newWallet);\n                }\n              }\n            } catch (walletError) {\n              console.error('Error adjusting wallet balances:', walletError);\n            }\n          }\n        }\n        \n        // Update the expense\n        await expenseDB.update(normalizedExpense);\n        \n        // Reload expenses from DB\n        loadExpenses();\n        // Refresh wallet balance display\n        setRefreshWallets(prev => prev + 1);\n      } catch (error) {\n        console.error('Error updating expense:', error);\n        // Fall back to state-only update\n        setExpenses(prevExpenses => \n          prevExpenses.map(expense => \n            expense.id === normalizedExpense.id ? normalizedExpense : expense\n          )\n        );\n      }\n    } else {\n      // If DB not initialized, handle localStorage\n      const savedExpenses = JSON.parse(localStorage.getItem('expenses') || '[]');\n      const originalExpense = savedExpenses.find(e => e.id === normalizedExpense.id);\n      \n      // Adjust wallet balances in localStorage if needed\n      if (originalExpense && \n          (originalExpense.walletId !== normalizedExpense.walletId || \n           parseFloat(originalExpense.amount) !== parseFloat(normalizedExpense.amount))) {\n        \n        try {\n          const savedWallets = localStorage.getItem('wallets');\n          if (savedWallets) {\n            let wallets = JSON.parse(savedWallets);\n            \n            // Return money to the original wallet\n            if (originalExpense.walletId) {\n              const originalWalletIndex = wallets.findIndex(w => w.id === originalExpense.walletId);\n              if (originalWalletIndex !== -1) {\n                if (originalExpense.isIncome) {\n                  // Remove the income amount from the original wallet\n                  wallets[originalWalletIndex].balance = parseFloat(wallets[originalWalletIndex].balance) - parseFloat(originalExpense.amount);\n                } else {\n                  // Return the expense amount to the original wallet\n                  wallets[originalWalletIndex].balance = parseFloat(wallets[originalWalletIndex].balance) + parseFloat(originalExpense.amount);\n                }\n              }\n            }\n            \n            // Update the new wallet balance\n            if (normalizedExpense.walletId) {\n              const newWalletIndex = wallets.findIndex(w => w.id === normalizedExpense.walletId);\n              if (newWalletIndex !== -1) {\n                if (normalizedExpense.isIncome) {\n                  // Add the income amount to the new wallet\n                  wallets[newWalletIndex].balance = parseFloat(wallets[newWalletIndex].balance) + parseFloat(normalizedExpense.amount);\n                } else {\n                  // Deduct the expense amount from the new wallet\n                  wallets[newWalletIndex].balance = parseFloat(wallets[newWalletIndex].balance) - parseFloat(normalizedExpense.amount);\n                }\n              }\n            }\n            \n            localStorage.setItem('wallets', JSON.stringify(wallets));\n          }\n        } catch (e) {\n          console.error('Error updating wallet in localStorage:', e);\n        }\n      }\n      \n      // Update expenses in state\n      setExpenses(prevExpenses => \n        prevExpenses.map(expense => \n          expense.id === normalizedExpense.id ? normalizedExpense : expense\n        )\n      );\n      // Refresh wallet balance display\n      setRefreshWallets(prev => prev + 1);\n    }\n  };\n\n  // Delete expense\n  const deleteExpense = async (id) => {\n    if (dbInitialized) {\n      try {\n        // Find the expense to get its amount and wallet\n        const allExpenses = await expenseDB.getAll();\n        const expenseToDelete = allExpenses.find(e => e.id === id);\n        \n        if (expenseToDelete && expenseToDelete.walletId) {\n          try {\n            // Get the wallet\n            const wallets = await walletDB.getAll();\n            const wallet = wallets.find(w => w.id === expenseToDelete.walletId);\n            \n            if (wallet) {\n              // Add the expense amount back to the wallet balance (since expense is being deleted)\n              if (expenseToDelete.isIncome) {\n                // For income transactions, subtract it back from wallet balance when deleted\n                wallet.balance = parseFloat(wallet.balance) - parseFloat(expenseToDelete.amount);\n              } else {\n                // For expenses, add it back to wallet balance when deleted\n                wallet.balance = parseFloat(wallet.balance) + parseFloat(expenseToDelete.amount);\n              }\n              await walletDB.update(wallet);\n            }\n          } catch (walletError) {\n            console.error('Error updating wallet balance:', walletError);\n          }\n        }\n        \n        // Delete the expense\n        await expenseDB.delete(id);\n        \n        // Reload expenses from DB\n        loadExpenses();\n        // Refresh wallet balance display\n        setRefreshWallets(prev => prev + 1);\n      } catch (error) {\n        console.error('Error deleting expense:', error);\n        // Fall back to state-only update\n        setExpenses(prevExpenses => prevExpenses.filter(expense => expense.id !== id));\n      }\n    } else {\n      // If DB not initialized, find the expense in state before filtering\n      const expenseToDelete = expenses.find(e => e.id === id);\n      \n      // Update wallet in localStorage if available\n      if (expenseToDelete && expenseToDelete.walletId) {\n        try {\n          const savedWallets = localStorage.getItem('wallets');\n          if (savedWallets) {\n            let wallets = JSON.parse(savedWallets);\n            const walletIndex = wallets.findIndex(w => w.id === expenseToDelete.walletId);\n            \n            if (walletIndex !== -1) {\n              if (expenseToDelete.isIncome) {\n                // For income transactions, subtract it back from wallet balance when deleted\n                wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) - parseFloat(expenseToDelete.amount);\n              } else {\n                // For expenses, add it back to wallet balance when deleted\n                wallets[walletIndex].balance = parseFloat(wallets[walletIndex].balance) + parseFloat(expenseToDelete.amount);\n              }\n              localStorage.setItem('wallets', JSON.stringify(wallets));\n            }\n          }\n        } catch (e) {\n          console.error('Error updating wallet in localStorage:', e);\n        }\n      }\n      \n      // Update state\n      setExpenses(prevExpenses => prevExpenses.filter(expense => expense.id !== id));\n      // Refresh wallet balance display\n      setRefreshWallets(prev => prev + 1);\n    }\n  };\n\n  // Calculate total expenses and income\n  const totalExpenses = expenses\n    .filter(expense => !expense.isIncome)\n    .reduce((total, expense) => total + parseFloat(expense.amount), 0);\n    \n  const totalIncome = expenses\n    .filter(expense => expense.isIncome)\n    .reduce((total, expense) => total + parseFloat(expense.amount), 0);\n    \n  const netCashFlow = totalIncome - totalExpenses;\n\n  // Add recurring transaction\n  const addRecurringTransaction = async (transaction) => {\n    try {\n      // Normalize tags: convert any tag objects to just their IDs\n      const normalizedTags = transaction.tags.map(tag => \n        typeof tag === 'object' && tag !== null ? tag.id : tag\n      );\n      \n      // Ensure all required fields exist\n      const normalizedTransaction = {\n        ...transaction,\n        id: transaction.id || Date.now(),\n        tags: normalizedTags,\n        name: transaction.name || '',\n        amount: parseFloat(transaction.amount || 0),\n        walletId: transaction.walletId || 'cash',\n        category: transaction.category || 'other',\n        frequency: transaction.frequency || 'monthly',\n        startDate: transaction.startDate || new Date().toISOString().slice(0, 10),\n        nextDate: transaction.startDate || new Date().toISOString().slice(0, 10), // Initially use startDate as nextDate\n        isIncome: !!transaction.isIncome,\n        notes: transaction.notes || ''\n      };\n      \n      if (dbInitialized) {\n        try {\n          console.log('Saving recurring transaction:', normalizedTransaction);\n          // Add to database\n          await recurringDB.add(normalizedTransaction);\n          \n          // Process past occurrences if the start date is in the past\n          const startDate = new Date(normalizedTransaction.startDate);\n          const today = new Date();\n          today.setHours(0, 0, 0, 0); // Reset time part for proper comparison\n          \n          if (startDate <= today) {\n            console.log('Start date is in the past, processing past occurrences');\n            // Create a transaction for the start date first\n            await createTransactionFromRecurring({\n              ...normalizedTransaction,\n              date: normalizedTransaction.startDate // Use the start date as the transaction date\n            });\n            \n            // If start date is before today, generate additional occurrences as needed\n            if (startDate < today) {\n              let currentDate = startDate;\n              let occurrenceDate = startDate;\n              let nextDate;\n              \n              // Continue generating transactions until we reach today\n              while (true) {\n                // Calculate the next occurrence date\n                nextDate = new Date(occurrenceDate);\n                \n                switch (normalizedTransaction.frequency) {\n                  case 'daily':\n                    nextDate.setDate(nextDate.getDate() + 1);\n                    break;\n                  case 'weekly':\n                    nextDate.setDate(nextDate.getDate() + 7);\n                    break;\n                  case 'biweekly':\n                    nextDate.setDate(nextDate.getDate() + 14);\n                    break;\n                  case 'monthly':\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                    break;\n                  case 'quarterly':\n                    nextDate.setMonth(nextDate.getMonth() + 3);\n                    break;\n                  case 'annually':\n                    nextDate.setFullYear(nextDate.getFullYear() + 1);\n                    break;\n                  default:\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                }\n                \n                // Stop if next occurrence is in the future\n                if (nextDate > today) {\n                  break;\n                }\n                \n                // Create a transaction for this occurrence\n                await createTransactionFromRecurring({\n                  ...normalizedTransaction,\n                  date: nextDate.toISOString().slice(0, 10)\n                });\n                \n                // Update for next iteration\n                occurrenceDate = nextDate;\n              }\n              \n              // Update the recurring transaction with the correct next date\n              await recurringDB.update({\n                ...normalizedTransaction,\n                nextDate: nextDate.toISOString().slice(0, 10)\n              });\n            } else {\n              // If start date is today, calculate next date\n              const nextDate = calculateNextDate(\n                normalizedTransaction.frequency, \n                normalizedTransaction.startDate\n              );\n              \n              // Update recurring transaction with next date\n              await recurringDB.update({\n                ...normalizedTransaction,\n                nextDate\n              });\n            }\n          } else {\n            console.log('Start date is in the future, nextDate remains as startDate');\n            // Future start date - no transactions to create yet\n          }\n          \n          // Refresh the expenses list to show the new transactions\n          await loadExpenses();\n          \n          // Update wallet display\n          setRefreshWallets(prev => prev + 1);\n          \n          // Close modal\n          setIsRecurringModalOpen(false);\n          \n          // Refresh the recurring list\n          setRefreshRecurring(prev => prev + 1);\n        } catch (error) {\n          console.error('Error adding recurring transaction to database:', error);\n          alert('Failed to save recurring transaction. Please try again.');\n        }\n      } else {\n        // Fallback to localStorage\n        try {\n          const savedRecurring = JSON.parse(localStorage.getItem('recurring-transactions') || '[]');\n          savedRecurring.push(normalizedTransaction);\n          localStorage.setItem('recurring-transactions', JSON.stringify(savedRecurring));\n          \n          // Process for localStorage\n          const startDate = new Date(normalizedTransaction.startDate);\n          const today = new Date();\n          today.setHours(0, 0, 0, 0);\n          \n          if (startDate <= today) {\n            const savedExpenses = JSON.parse(localStorage.getItem('expenses') || '[]');\n            const savedWallets = JSON.parse(localStorage.getItem('wallets') || '[]');\n            \n            // Create a transaction for the start date\n            const initialTransaction = {\n              id: Date.now(),\n              name: normalizedTransaction.name,\n              amount: normalizedTransaction.amount,\n              category: normalizedTransaction.category,\n              tags: [...normalizedTransaction.tags, 'recurring'],\n              walletId: normalizedTransaction.walletId,\n              isIncome: normalizedTransaction.isIncome,\n              notes: normalizedTransaction.notes,\n              date: normalizedTransaction.startDate\n            };\n            \n            // Add to expenses\n            savedExpenses.push(initialTransaction);\n            \n            // Update wallet\n            if (initialTransaction.walletId) {\n              const walletIndex = savedWallets.findIndex(w => w.id === initialTransaction.walletId);\n              if (walletIndex !== -1) {\n                const adjustment = initialTransaction.isIncome ? \n                  parseFloat(initialTransaction.amount) : \n                  -parseFloat(initialTransaction.amount);\n                  \n                savedWallets[walletIndex].balance = parseFloat(savedWallets[walletIndex].balance) + adjustment;\n              }\n            }\n            \n            // If start date is before today, generate additional occurrences\n            if (startDate < today) {\n              let currentDate = startDate;\n              let occurrenceDate = startDate;\n              let nextDate;\n              \n              // Generate past transactions\n              while (true) {\n                nextDate = new Date(occurrenceDate);\n                \n                switch (normalizedTransaction.frequency) {\n                  case 'daily':\n                    nextDate.setDate(nextDate.getDate() + 1);\n                    break;\n                  case 'weekly':\n                    nextDate.setDate(nextDate.getDate() + 7);\n                    break;\n                  case 'biweekly':\n                    nextDate.setDate(nextDate.getDate() + 14);\n                    break;\n                  case 'monthly':\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                    break;\n                  case 'quarterly':\n                    nextDate.setMonth(nextDate.getMonth() + 3);\n                    break;\n                  case 'annually':\n                    nextDate.setFullYear(nextDate.getFullYear() + 1);\n                    break;\n                  default:\n                    nextDate.setMonth(nextDate.getMonth() + 1);\n                }\n                \n                if (nextDate > today) {\n                  break;\n                }\n                \n                const recTransaction = {\n                  id: Date.now() + savedExpenses.length,\n                  name: normalizedTransaction.name,\n                  amount: normalizedTransaction.amount,\n                  category: normalizedTransaction.category,\n                  tags: [...normalizedTransaction.tags, 'recurring'],\n                  walletId: normalizedTransaction.walletId,\n                  isIncome: normalizedTransaction.isIncome,\n                  notes: normalizedTransaction.notes,\n                  date: nextDate.toISOString().slice(0, 10)\n                };\n                \n                // Add to expenses\n                savedExpenses.push(recTransaction);\n                \n                // Update wallet\n                if (recTransaction.walletId) {\n                  const walletIndex = savedWallets.findIndex(w => w.id === recTransaction.walletId);\n                  if (walletIndex !== -1) {\n                    const adjustment = recTransaction.isIncome ? \n                      parseFloat(recTransaction.amount) : \n                      -parseFloat(recTransaction.amount);\n                      \n                    savedWallets[walletIndex].balance = parseFloat(savedWallets[walletIndex].balance) + adjustment;\n                  }\n                }\n                \n                occurrenceDate = nextDate;\n              }\n              \n              // Update the recurring transaction's next date\n              normalizedTransaction.nextDate = nextDate.toISOString().slice(0, 10);\n              \n              // Update in the saved recurring list\n              const recIndex = savedRecurring.findIndex(r => r.id === normalizedTransaction.id);\n              if (recIndex !== -1) {\n                savedRecurring[recIndex] = normalizedTransaction;\n              }\n              \n              localStorage.setItem('recurring-transactions', JSON.stringify(savedRecurring));\n            } else {\n              // If start date is today, calculate next date\n              const nextDate = calculateNextDate(\n                normalizedTransaction.frequency, \n                normalizedTransaction.startDate\n              );\n              \n              // Update the recurring transaction\n              normalizedTransaction.nextDate = nextDate;\n              \n              // Update in the saved recurring list\n              const recIndex = savedRecurring.findIndex(r => r.id === normalizedTransaction.id);\n              if (recIndex !== -1) {\n                savedRecurring[recIndex] = normalizedTransaction;\n              }\n              \n              localStorage.setItem('recurring-transactions', JSON.stringify(savedRecurring));\n            }\n            \n            // Save updated expenses and wallets\n            localStorage.setItem('expenses', JSON.stringify(savedExpenses));\n            localStorage.setItem('wallets', JSON.stringify(savedWallets));\n            \n            // Update expenses state\n            setExpenses(savedExpenses);\n          }\n          \n          // Close modal\n          setIsRecurringModalOpen(false);\n          \n          // Refresh the list\n          setRefreshRecurring(prev => prev + 1);\n          \n          // Update wallet display\n          setRefreshWallets(prev => prev + 1);\n        } catch (error) {\n          console.error('Error saving recurring transaction to localStorage:', error);\n          alert('Failed to save recurring transaction. Please try again.');\n        }\n      }\n    } catch (error) {\n      console.error('Error processing recurring transaction:', error);\n      alert('Failed to process recurring transaction. Please try again.');\n    }\n  };\n  \n  // Helper function to create a transaction from a recurring template\n  const createTransactionFromRecurring = async (recurringData) => {\n    try {\n      // Create the transaction object\n      const newTransaction = {\n        id: Date.now() + Math.floor(Math.random() * 1000), // Ensure unique ID\n        name: recurringData.name,\n        amount: recurringData.amount,\n        category: recurringData.category,\n        tags: [...recurringData.tags, 'recurring'], // Add recurring tag\n        walletId: recurringData.walletId,\n        isIncome: recurringData.isIncome,\n        notes: recurringData.notes,\n        date: recurringData.date // Use the provided date\n      };\n      \n      // Add the transaction to the database\n      await expenseDB.add(newTransaction);\n      \n      // Update wallet balance\n      try {\n        const wallets = await walletDB.getAll();\n        const wallet = wallets.find(w => w.id === newTransaction.walletId);\n        \n        if (wallet) {\n          // For income add to balance, for expense subtract\n          const adjustment = newTransaction.isIncome ? \n            parseFloat(newTransaction.amount) : \n            -parseFloat(newTransaction.amount);\n            \n          wallet.balance = parseFloat(wallet.balance) + adjustment;\n          await walletDB.update(wallet);\n        }\n      } catch (walletError) {\n        console.error('Error updating wallet balance:', walletError);\n      }\n      \n      return newTransaction;\n    } catch (error) {\n      console.error('Error creating transaction from recurring template:', error);\n      throw error;\n    }\n  };\n  \n  // Helper function to calculate next date based on frequency\n  const calculateNextDate = (frequency, currentDate) => {\n    const date = new Date(currentDate);\n    \n    switch (frequency) {\n      case 'daily':\n        date.setDate(date.getDate() + 1);\n        break;\n      case 'weekly':\n        date.setDate(date.getDate() + 7);\n        break;\n      case 'biweekly':\n        date.setDate(date.getDate() + 14);\n        break;\n      case 'monthly':\n        date.setMonth(date.getMonth() + 1);\n        break;\n      case 'quarterly':\n        date.setMonth(date.getMonth() + 3);\n        break;\n      case 'annually':\n        date.setFullYear(date.getFullYear() + 1);\n        break;\n      default:\n        date.setMonth(date.getMonth() + 1); // Default to monthly\n    }\n    \n    return date.toISOString().slice(0, 10);\n  };\n\n  // Render content based on active tab\n  const renderContent = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex justify-center items-center py-12\">\n          <div className=\"text-indigo-400\">\n            <svg className=\"animate-spin h-10 w-10 mr-3\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" fill=\"none\"></circle>\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg>\n          </div>\n          <p className=\"text-indigo-300 text-lg font-medium\">Loading...</p>\n        </div>\n      );\n    }\n\n    switch (activeTab) {\n      case 'settings':\n        return <Settings dbInitialized={dbInitialized} />;\n      case 'wallets':\n        return <Wallets dbInitialized={dbInitialized} />;\n      case 'recurring':\n        return (\n          <>\n            <RecurringList dbInitialized={dbInitialized} refreshData={refreshRecurring} />\n            <div className=\"flex justify-end mb-8\">\n              <button \n                onClick={() => setIsRecurringModalOpen(true)}\n                className=\"px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors shadow-md\"\n              >\n                Add Recurring Transaction\n              </button>\n            </div>\n          </>\n        );\n      case 'transactions':\n        return (\n          <TransactionListPage\n            expenses={expenses}\n            deleteExpense={deleteExpense}\n            updateExpense={updateExpense}\n            dbInitialized={dbInitialized}\n          />\n        );\n      case 'home':\n      default:\n        return (\n          <>\n            <WalletSummary dbInitialized={dbInitialized} refresh={refreshWallets} />\n            <ExpenseSummary \n              expenses={expenses} \n              total={totalExpenses + totalIncome} \n            />\n            <ExpenseChart expenses={expenses} />\n            <ExpenseList \n              expenses={expenses} \n              deleteExpense={deleteExpense} \n              updateExpense={updateExpense} \n              dbInitialized={dbInitialized}\n            />\n          </>\n        );\n    }\n  };\n\n  return (\n    <>\n      {/* Modern Navbar */}\n      <Navbar className=\"fixed top-0 left-0 right-0 shadow-md z-30\">\n        <Dropdown>\n          <DropdownButton as={NavbarItem}>\n            <NavbarLabel className=\"text-indigo-400 font-bold text-xl\">Rupiah Tracker</NavbarLabel>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 ml-2 text-gray-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </DropdownButton>\n          <DropdownMenu className=\"min-w-52\">\n            <DropdownItem onClick={() => setActiveTab('home')}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\" />\n              </svg>\n              <DropdownLabel>Home</DropdownLabel>\n            </DropdownItem>\n            <DropdownItem onClick={() => setActiveTab('wallets')}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path d=\"M4 4a2 2 0 012-2h8a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 0v12h8V4H6zm2 2h4v2H8V6z\" />\n              </svg>\n              <DropdownLabel>Wallets</DropdownLabel>\n            </DropdownItem>\n            <DropdownItem onClick={() => setActiveTab('recurring')}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n              </svg>\n              <DropdownLabel>Recurring</DropdownLabel>\n            </DropdownItem>\n            <DropdownItem onClick={() => setActiveTab('settings')}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\" clipRule=\"evenodd\" />\n              </svg>\n              <DropdownLabel>Settings</DropdownLabel>\n            </DropdownItem>\n            <DropdownDivider />\n            <DropdownItem onClick={() => setIsModalOpen(true)}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\" clipRule=\"evenodd\" />\n              </svg>\n              <DropdownLabel>Add Transaction</DropdownLabel>\n            </DropdownItem>\n          </DropdownMenu>\n        </Dropdown>\n\n        <NavbarDivider className=\"max-md:hidden\" />\n        \n        <NavbarSection className=\"max-md:hidden\">\n          <NavbarItem \n            onClick={() => setActiveTab('home')} \n            current={activeTab === 'home'}\n          >\n            Home\n          </NavbarItem>\n          <NavbarItem \n            onClick={() => setActiveTab('wallets')} \n            current={activeTab === 'wallets'}\n          >\n            Wallets\n          </NavbarItem>\n          <NavbarItem \n            onClick={() => setActiveTab('recurring')} \n            current={activeTab === 'recurring'}\n          >\n            Recurring\n          </NavbarItem>\n          <NavbarItem \n            onClick={() => setActiveTab('settings')} \n            current={activeTab === 'settings'}\n          >\n            Settings\n          </NavbarItem>\n        </NavbarSection>\n        \n        <NavbarSpacer />\n        \n        <NavbarSection>\n          <Dropdown>\n            <DropdownButton as={NavbarItem}>\n              <div className=\"relative\">\n                <Avatar initials=\"RS\" className=\"bg-indigo-600\" />\n                {dbInitialized && (\n                  <span className=\"absolute -top-1 -right-1 block h-2.5 w-2.5 rounded-full bg-green-400 border-2 border-gray-900\"></span>\n                )}\n              </div>\n            </DropdownButton>\n            <DropdownMenu className=\"min-w-52\" anchor=\"bottom end\">\n              <DropdownItem onClick={() => setActiveTab('settings')}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\" clipRule=\"evenodd\" />\n                </svg>\n                <DropdownLabel>Settings</DropdownLabel>\n              </DropdownItem>\n              <DropdownDivider />\n              <DropdownItem>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                </svg>\n                <DropdownLabel>About</DropdownLabel>\n              </DropdownItem>\n              <DropdownItem>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm0 2h10v7h-2l-1 2H8l-1-2H5V5z\" clipRule=\"evenodd\" />\n                </svg>\n                <DropdownLabel>Feedback</DropdownLabel>\n              </DropdownItem>\n              {dbInitialized && (\n                <div className=\"px-4 py-2 text-xs text-green-400 flex items-center\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Using IndexedDB\n                </div>\n              )}\n            </DropdownMenu>\n          </Dropdown>\n        </NavbarSection>\n      </Navbar>\n\n      <div className=\"max-w-4xl mx-auto px-6 pb-24 pt-20\">\n        {renderContent()}\n        \n        {/* Floating Action Button - only visible on mobile and home tab */}\n        {activeTab === 'home' && (\n          <div className=\"md:hidden\">\n            <FloatingActionButton onClick={() => setIsModalOpen(true)} />\n          </div>\n        )}\n        \n        {/* Add Transaction Modal */}\n        <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n          <ExpenseForm \n            addExpense={addExpense} \n            dbInitialized={dbInitialized} \n            onClose={() => setIsModalOpen(false)} \n          />\n        </Modal>\n        \n        {/* Add Recurring Transaction Modal */}\n        <Modal isOpen={isRecurringModalOpen} onClose={() => setIsRecurringModalOpen(false)}>\n          <RecurringForm \n            addRecurringTransaction={addRecurringTransaction} \n            dbInitialized={dbInitialized} \n            onClose={() => setIsRecurringModalOpen(false)} \n          />\n        </Modal>\n        \n        {/* Show bottom navigation on mobile */}\n        <div className=\"md:hidden\">\n          <BottomNavigation activeTab={activeTab} setActiveTab={setActiveTab} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}