{"ast":null,"code":"// IndexedDB database utility for expense tracker\n\nconst DB_NAME = 'expense-tracker-db';\nconst DB_VERSION = 6; // Incremented for recurring transactions\nconst EXPENSES_STORE = 'expenses';\nconst CATEGORIES_STORE = 'categories';\nconst TAGS_STORE = 'tags';\nconst WALLETS_STORE = 'wallets';\nconst RECURRING_STORE = 'recurring'; // New store for recurring transactions\n\n// Default categories\nconst DEFAULT_CATEGORIES = [{\n  id: 'food',\n  name: 'Food'\n}, {\n  id: 'transportation',\n  name: 'Transportation'\n}, {\n  id: 'entertainment',\n  name: 'Entertainment'\n}, {\n  id: 'utilities',\n  name: 'Utilities'\n}, {\n  id: 'housing',\n  name: 'Housing'\n}, {\n  id: 'healthcare',\n  name: 'Healthcare'\n}, {\n  id: 'other',\n  name: 'Other'\n}];\n\n// Default tags\nconst DEFAULT_TAGS = [{\n  id: 'essential',\n  name: 'Essential'\n}, {\n  id: 'recurring',\n  name: 'Recurring'\n}, {\n  id: 'emergency',\n  name: 'Emergency'\n}, {\n  id: 'personal',\n  name: 'Personal'\n}, {\n  id: 'work',\n  name: 'Work'\n}, {\n  id: 'family',\n  name: 'Family'\n}, {\n  id: 'vacation',\n  name: 'Vacation'\n}, {\n  id: 'gift',\n  name: 'Gift'\n}, {\n  id: 'savings',\n  name: 'Savings'\n}, {\n  id: 'education',\n  name: 'Education'\n}];\n\n// Default wallets\nconst DEFAULT_WALLETS = [{\n  id: 'cash',\n  name: 'Cash',\n  type: 'cash',\n  balance: 0\n}, {\n  id: 'bank',\n  name: 'Bank Account',\n  type: 'bank',\n  balance: 0\n}, {\n  id: 'credit',\n  name: 'Credit Card',\n  type: 'credit_card',\n  balance: 0\n}, {\n  id: 'ewallet',\n  name: 'E-Wallet',\n  type: 'e_wallet',\n  balance: 0\n}];\n\n// Initialize the database\nconst initDB = () => {\n  return new Promise((resolve, reject) => {\n    // Check if IndexedDB is supported\n    if (!window.indexedDB) {\n      console.error(\"Your browser doesn't support IndexedDB\");\n      // Fall back to localStorage\n      resolve(false);\n      return;\n    }\n    const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\n    // Handle database upgrade (first time or version change)\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n      const oldVersion = event.oldVersion;\n\n      // First time setup or upgrade from version 0\n      if (oldVersion < 1) {\n        // Create expenses store with auto-incrementing id\n        if (!db.objectStoreNames.contains(EXPENSES_STORE)) {\n          const expensesStore = db.createObjectStore(EXPENSES_STORE, {\n            keyPath: 'id'\n          });\n          expensesStore.createIndex('date', 'date', {\n            unique: false\n          });\n          expensesStore.createIndex('category', 'category', {\n            unique: false\n          });\n        }\n\n        // Create categories store\n        if (!db.objectStoreNames.contains(CATEGORIES_STORE)) {\n          const categoriesStore = db.createObjectStore(CATEGORIES_STORE, {\n            keyPath: 'id'\n          });\n\n          // Add default categories\n          DEFAULT_CATEGORIES.forEach(category => {\n            categoriesStore.add(category);\n          });\n        }\n      }\n\n      // Upgrade to version 2 - adding tags support\n      if (oldVersion < 2) {\n        // Create tags store if it doesn't exist\n        if (!db.objectStoreNames.contains(TAGS_STORE)) {\n          const tagsStore = db.createObjectStore(TAGS_STORE, {\n            keyPath: 'id'\n          });\n\n          // Add default tags\n          DEFAULT_TAGS.forEach(tag => {\n            tagsStore.add(tag);\n          });\n        }\n\n        // Update expenses store to include tags if it exists\n        if (db.objectStoreNames.contains(EXPENSES_STORE)) {\n          // We can't modify the schema of an existing object store in onupgradeneeded\n          // So we need to create a new index for the existing store\n          const transaction = event.target.transaction;\n          const expensesStore = transaction.objectStore(EXPENSES_STORE);\n\n          // Get all existing expenses\n          expensesStore.openCursor().onsuccess = event => {\n            const cursor = event.target.result;\n            if (cursor) {\n              // Add tags array to existing expenses if they don't have it\n              if (!cursor.value.tags) {\n                const updatedExpense = {\n                  ...cursor.value,\n                  tags: []\n                };\n                cursor.update(updatedExpense);\n              }\n              cursor.continue();\n            }\n          };\n        }\n      }\n\n      // Upgrade to version 3 - add wallets support\n      if (oldVersion < 3) {\n        if (!db.objectStoreNames.contains(WALLETS_STORE)) {\n          const walletsStore = db.createObjectStore(WALLETS_STORE, {\n            keyPath: 'id'\n          });\n          DEFAULT_WALLETS.forEach(wallet => walletsStore.add(wallet));\n        }\n      }\n\n      // Upgrade to version 4 - add walletId to expenses\n      if (oldVersion < 4) {\n        if (db.objectStoreNames.contains(EXPENSES_STORE)) {\n          const transaction = event.target.transaction;\n          const expensesStore = transaction.objectStore(EXPENSES_STORE);\n          expensesStore.openCursor().onsuccess = async event => {\n            const cursor = event.target.result;\n            if (cursor) {\n              if (!cursor.value.walletId) {\n                // Assign to 'cash' wallet by default\n                const updatedExpense = {\n                  ...cursor.value,\n                  walletId: 'cash'\n                };\n                cursor.update(updatedExpense);\n              }\n              cursor.continue();\n            }\n          };\n        }\n      }\n\n      // Upgrade to version 5 - add income tracking, notes and photo support\n      if (oldVersion < 5) {\n        if (db.objectStoreNames.contains(EXPENSES_STORE)) {\n          const transaction = event.target.transaction;\n          const expensesStore = transaction.objectStore(EXPENSES_STORE);\n          expensesStore.openCursor().onsuccess = event => {\n            const cursor = event.target.result;\n            if (cursor) {\n              // Add new fields to existing expenses\n              const updatedExpense = {\n                ...cursor.value,\n                isIncome: cursor.value.isIncome || false,\n                notes: cursor.value.notes || '',\n                photoUrl: cursor.value.photoUrl || ''\n              };\n              cursor.update(updatedExpense);\n              cursor.continue();\n            }\n          };\n        }\n      }\n\n      // Upgrade to version 6 - add recurring transactions\n      if (oldVersion < 6) {\n        if (!db.objectStoreNames.contains(RECURRING_STORE)) {\n          const recurringStore = db.createObjectStore(RECURRING_STORE, {\n            keyPath: 'id'\n          });\n          recurringStore.createIndex('nextDate', 'nextDate', {\n            unique: false\n          });\n          recurringStore.createIndex('frequency', 'frequency', {\n            unique: false\n          });\n        }\n      }\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      resolve(true);\n      db.close();\n    };\n    request.onerror = event => {\n      console.error('IndexedDB error:', event.target.error);\n      reject(event.target.error);\n    };\n  });\n};\n\n// Expense operations\nconst expenseDB = {\n  // Get all expenses\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readonly');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Add a new expense\n  add: expense => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n\n        // Make sure ID is a number and include new fields\n        const newExpense = {\n          ...expense,\n          id: expense.id || Date.now(),\n          walletId: expense.walletId || 'cash',\n          isIncome: expense.isIncome || false,\n          notes: expense.notes || '',\n          photoUrl: expense.photoUrl || ''\n        };\n        const addRequest = store.add(newExpense);\n        addRequest.onsuccess = () => {\n          resolve(newExpense);\n          db.close();\n        };\n        addRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Update an expense\n  update: expense => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n\n        // Preserve all fields including new ones\n        const updatedExpense = {\n          ...expense,\n          walletId: expense.walletId || 'cash',\n          isIncome: expense.isIncome || false,\n          notes: expense.notes || '',\n          photoUrl: expense.photoUrl || ''\n        };\n        const updateRequest = store.put(updatedExpense);\n        updateRequest.onsuccess = () => {\n          resolve(expense);\n          db.close();\n        };\n        updateRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Delete an expense\n  delete: id => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        deleteRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Category operations\nconst categoryDB = {\n  // Get all categories\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readonly');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Add a new category\n  add: category => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const addRequest = store.add(category);\n        addRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        addRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Update a category\n  update: category => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const updateRequest = store.put(category);\n        updateRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        updateRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Delete a category\n  delete: id => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        deleteRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Tags operations\nconst tagDB = {\n  // Get all tags\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readonly');\n        const store = transaction.objectStore(TAGS_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Add a new tag\n  add: tag => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        const addRequest = store.add(tag);\n        addRequest.onsuccess = () => {\n          resolve(tag);\n          db.close();\n        };\n        addRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Update a tag\n  update: tag => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        const updateRequest = store.put(tag);\n        updateRequest.onsuccess = () => {\n          resolve(tag);\n          db.close();\n        };\n        updateRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Delete a tag\n  delete: id => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        deleteRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Wallets operations\nconst walletDB = {\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readonly');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  add: wallet => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readwrite');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const addRequest = store.add(wallet);\n        addRequest.onsuccess = () => {\n          resolve(wallet);\n          db.close();\n        };\n        addRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  update: wallet => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readwrite');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const updateRequest = store.put(wallet);\n        updateRequest.onsuccess = () => {\n          resolve(wallet);\n          db.close();\n        };\n        updateRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  delete: id => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readwrite');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        deleteRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Recurring transaction operations\nconst recurringDB = {\n  // Get all recurring transactions\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readonly');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Get recurring transaction by ID\n  getById: id => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readonly');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const getRequest = store.get(id);\n        getRequest.onsuccess = () => {\n          resolve(getRequest.result);\n          db.close();\n        };\n        getRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Add new recurring transaction\n  add: recurring => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readwrite');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const addRequest = store.add(recurring);\n        addRequest.onsuccess = () => {\n          resolve(recurring);\n          db.close();\n        };\n        addRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Update existing recurring transaction\n  update: recurring => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readwrite');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const updateRequest = store.put(recurring);\n        updateRequest.onsuccess = () => {\n          resolve(recurring);\n          db.close();\n        };\n        updateRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Delete recurring transaction\n  delete: id => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readwrite');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(true);\n          db.close();\n        };\n        deleteRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Get due recurring transactions based on a date\n  getDueTransactions: (date = new Date()) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readonly');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const nextDateIndex = store.index('nextDate');\n\n        // Format date to YYYY-MM-DD for comparison\n        const formatDate = date => {\n          return date.toISOString().split('T')[0];\n        };\n\n        // Get all recurring transactions with nextDate less than or equal to the provided date\n        const dateStr = formatDate(date);\n        const range = IDBKeyRange.upperBound(dateStr);\n        const request = nextDateIndex.getAll(range);\n        request.onsuccess = () => {\n          resolve(request.result);\n          db.close();\n        };\n        request.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Helper function to migrate data from localStorage to IndexedDB\nconst migrateFromLocalStorage = async () => {\n  try {\n    // Migrate expenses if they exist\n    const savedExpenses = localStorage.getItem('expenses');\n    if (savedExpenses) {\n      const expenses = JSON.parse(savedExpenses);\n      for (const expense of expenses) {\n        await expenseDB.add(expense);\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expenses');\n    }\n\n    // Migrate categories if they exist\n    const savedCategories = localStorage.getItem('expense-categories');\n    if (savedCategories) {\n      const categories = JSON.parse(savedCategories);\n      for (const category of categories) {\n        await categoryDB.add(category).catch(() => {\n          // Category might already exist, just ignore\n        });\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expense-categories');\n    }\n    return true;\n  } catch (error) {\n    console.error('Error migrating data:', error);\n    return false;\n  }\n};\n\n// Initialize database and export methods\nconst initializeDatabase = async () => {\n  try {\n    // Initialize the database\n    const initialized = await initDB();\n\n    // If successful, attempt to migrate data from localStorage\n    if (initialized) {\n      await migrateFromLocalStorage();\n    }\n    return initialized;\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n    return false;\n  }\n};\n\n// Function to delete the IndexedDB database (for troubleshooting)\nconst deleteDatabase = () => {\n  return new Promise((resolve, reject) => {\n    if (!window.indexedDB) {\n      console.error(\"IndexedDB not supported\");\n      resolve(false);\n      return;\n    }\n    const deleteRequest = window.indexedDB.deleteDatabase(DB_NAME);\n    deleteRequest.onsuccess = () => {\n      console.log(\"Database deleted successfully\");\n      resolve(true);\n    };\n    deleteRequest.onerror = event => {\n      console.error(\"Error deleting database:\", event.target.error);\n      reject(event.target.error);\n    };\n    deleteRequest.onblocked = () => {\n      console.warn(\"Database deletion blocked - close all other tabs with this app open\");\n      // Try again after a short delay\n      setTimeout(() => {\n        window.indexedDB.deleteDatabase(DB_NAME);\n        resolve(true);\n      }, 1000);\n    };\n  });\n};\n\n// Export the database utilities\nexport { initializeDatabase, deleteDatabase, expenseDB, categoryDB, tagDB, walletDB, recurringDB };","map":{"version":3,"names":["DB_NAME","DB_VERSION","EXPENSES_STORE","CATEGORIES_STORE","TAGS_STORE","WALLETS_STORE","RECURRING_STORE","DEFAULT_CATEGORIES","id","name","DEFAULT_TAGS","DEFAULT_WALLETS","type","balance","initDB","Promise","resolve","reject","window","indexedDB","console","error","request","open","onupgradeneeded","event","db","target","result","oldVersion","objectStoreNames","contains","expensesStore","createObjectStore","keyPath","createIndex","unique","categoriesStore","forEach","category","add","tagsStore","tag","transaction","objectStore","openCursor","onsuccess","cursor","value","tags","updatedExpense","update","continue","walletsStore","wallet","walletId","isIncome","notes","photoUrl","recurringStore","close","onerror","expenseDB","getAll","store","getAllRequest","expense","newExpense","Date","now","addRequest","updateRequest","put","delete","deleteRequest","categoryDB","tagDB","walletDB","recurringDB","getById","getRequest","get","recurring","getDueTransactions","date","nextDateIndex","index","formatDate","toISOString","split","dateStr","range","IDBKeyRange","upperBound","migrateFromLocalStorage","savedExpenses","localStorage","getItem","expenses","JSON","parse","removeItem","savedCategories","categories","catch","initializeDatabase","initialized","deleteDatabase","log","onblocked","warn","setTimeout"],"sources":["/Users/ddm/expense-tracker/src/utils/db.js"],"sourcesContent":["// IndexedDB database utility for expense tracker\n\nconst DB_NAME = 'expense-tracker-db';\nconst DB_VERSION = 6; // Incremented for recurring transactions\nconst EXPENSES_STORE = 'expenses';\nconst CATEGORIES_STORE = 'categories';\nconst TAGS_STORE = 'tags';\nconst WALLETS_STORE = 'wallets';\nconst RECURRING_STORE = 'recurring'; // New store for recurring transactions\n\n// Default categories\nconst DEFAULT_CATEGORIES = [\n  { id: 'food', name: 'Food' },\n  { id: 'transportation', name: 'Transportation' },\n  { id: 'entertainment', name: 'Entertainment' },\n  { id: 'utilities', name: 'Utilities' },\n  { id: 'housing', name: 'Housing' },\n  { id: 'healthcare', name: 'Healthcare' },\n  { id: 'other', name: 'Other' }\n];\n\n// Default tags\nconst DEFAULT_TAGS = [\n  { id: 'essential', name: 'Essential' },\n  { id: 'recurring', name: 'Recurring' },\n  { id: 'emergency', name: 'Emergency' },\n  { id: 'personal', name: 'Personal' },\n  { id: 'work', name: 'Work' },\n  { id: 'family', name: 'Family' },\n  { id: 'vacation', name: 'Vacation' },\n  { id: 'gift', name: 'Gift' },\n  { id: 'savings', name: 'Savings' },\n  { id: 'education', name: 'Education' }\n];\n\n// Default wallets\nconst DEFAULT_WALLETS = [\n  { id: 'cash', name: 'Cash', type: 'cash', balance: 0 },\n  { id: 'bank', name: 'Bank Account', type: 'bank', balance: 0 },\n  { id: 'credit', name: 'Credit Card', type: 'credit_card', balance: 0 },\n  { id: 'ewallet', name: 'E-Wallet', type: 'e_wallet', balance: 0 },\n];\n\n// Initialize the database\nconst initDB = () => {\n  return new Promise((resolve, reject) => {\n    // Check if IndexedDB is supported\n    if (!window.indexedDB) {\n      console.error(\"Your browser doesn't support IndexedDB\");\n      // Fall back to localStorage\n      resolve(false);\n      return;\n    }\n\n    const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\n    // Handle database upgrade (first time or version change)\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      const oldVersion = event.oldVersion;\n      \n      // First time setup or upgrade from version 0\n      if (oldVersion < 1) {\n        // Create expenses store with auto-incrementing id\n        if (!db.objectStoreNames.contains(EXPENSES_STORE)) {\n          const expensesStore = db.createObjectStore(EXPENSES_STORE, { keyPath: 'id' });\n          expensesStore.createIndex('date', 'date', { unique: false });\n          expensesStore.createIndex('category', 'category', { unique: false });\n        }\n        \n        // Create categories store\n        if (!db.objectStoreNames.contains(CATEGORIES_STORE)) {\n          const categoriesStore = db.createObjectStore(CATEGORIES_STORE, { keyPath: 'id' });\n          \n          // Add default categories\n          DEFAULT_CATEGORIES.forEach(category => {\n            categoriesStore.add(category);\n          });\n        }\n      }\n      \n      // Upgrade to version 2 - adding tags support\n      if (oldVersion < 2) {\n        // Create tags store if it doesn't exist\n        if (!db.objectStoreNames.contains(TAGS_STORE)) {\n          const tagsStore = db.createObjectStore(TAGS_STORE, { keyPath: 'id' });\n          \n          // Add default tags\n          DEFAULT_TAGS.forEach(tag => {\n            tagsStore.add(tag);\n          });\n        }\n        \n        // Update expenses store to include tags if it exists\n        if (db.objectStoreNames.contains(EXPENSES_STORE)) {\n          // We can't modify the schema of an existing object store in onupgradeneeded\n          // So we need to create a new index for the existing store\n          const transaction = event.target.transaction;\n          const expensesStore = transaction.objectStore(EXPENSES_STORE);\n          \n          // Get all existing expenses\n          expensesStore.openCursor().onsuccess = (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n              // Add tags array to existing expenses if they don't have it\n              if (!cursor.value.tags) {\n                const updatedExpense = { ...cursor.value, tags: [] };\n                cursor.update(updatedExpense);\n              }\n              cursor.continue();\n            }\n          };\n        }\n      }\n      \n      // Upgrade to version 3 - add wallets support\n      if (oldVersion < 3) {\n        if (!db.objectStoreNames.contains(WALLETS_STORE)) {\n          const walletsStore = db.createObjectStore(WALLETS_STORE, { keyPath: 'id' });\n          DEFAULT_WALLETS.forEach(wallet => walletsStore.add(wallet));\n        }\n      }\n      \n      // Upgrade to version 4 - add walletId to expenses\n      if (oldVersion < 4) {\n        if (db.objectStoreNames.contains(EXPENSES_STORE)) {\n          const transaction = event.target.transaction;\n          const expensesStore = transaction.objectStore(EXPENSES_STORE);\n          expensesStore.openCursor().onsuccess = async (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n              if (!cursor.value.walletId) {\n                // Assign to 'cash' wallet by default\n                const updatedExpense = { ...cursor.value, walletId: 'cash' };\n                cursor.update(updatedExpense);\n              }\n              cursor.continue();\n            }\n          };\n        }\n      }\n      \n      // Upgrade to version 5 - add income tracking, notes and photo support\n      if (oldVersion < 5) {\n        if (db.objectStoreNames.contains(EXPENSES_STORE)) {\n          const transaction = event.target.transaction;\n          const expensesStore = transaction.objectStore(EXPENSES_STORE);\n          \n          expensesStore.openCursor().onsuccess = (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n              // Add new fields to existing expenses\n              const updatedExpense = { \n                ...cursor.value, \n                isIncome: cursor.value.isIncome || false,\n                notes: cursor.value.notes || '',\n                photoUrl: cursor.value.photoUrl || ''\n              };\n              cursor.update(updatedExpense);\n              cursor.continue();\n            }\n          };\n        }\n      }\n      \n      // Upgrade to version 6 - add recurring transactions\n      if (oldVersion < 6) {\n        if (!db.objectStoreNames.contains(RECURRING_STORE)) {\n          const recurringStore = db.createObjectStore(RECURRING_STORE, { keyPath: 'id' });\n          recurringStore.createIndex('nextDate', 'nextDate', { unique: false });\n          recurringStore.createIndex('frequency', 'frequency', { unique: false });\n        }\n      }\n    };\n\n    request.onsuccess = (event) => {\n      const db = event.target.result;\n      resolve(true);\n      db.close();\n    };\n\n    request.onerror = (event) => {\n      console.error('IndexedDB error:', event.target.error);\n      reject(event.target.error);\n    };\n  });\n};\n\n// Expense operations\nconst expenseDB = {\n  // Get all expenses\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readonly');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Add a new expense\n  add: (expense) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        // Make sure ID is a number and include new fields\n        const newExpense = {\n          ...expense,\n          id: expense.id || Date.now(),\n          walletId: expense.walletId || 'cash',\n          isIncome: expense.isIncome || false,\n          notes: expense.notes || '',\n          photoUrl: expense.photoUrl || ''\n        };\n        \n        const addRequest = store.add(newExpense);\n        \n        addRequest.onsuccess = () => {\n          resolve(newExpense);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Update an expense\n  update: (expense) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        // Preserve all fields including new ones\n        const updatedExpense = { \n          ...expense, \n          walletId: expense.walletId || 'cash',\n          isIncome: expense.isIncome || false,\n          notes: expense.notes || '',\n          photoUrl: expense.photoUrl || ''\n        };\n        \n        const updateRequest = store.put(updatedExpense);\n        \n        updateRequest.onsuccess = () => {\n          resolve(expense);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Delete an expense\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Category operations\nconst categoryDB = {\n  // Get all categories\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readonly');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Add a new category\n  add: (category) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const addRequest = store.add(category);\n        \n        addRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Update a category\n  update: (category) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const updateRequest = store.put(category);\n        \n        updateRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Delete a category\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Tags operations\nconst tagDB = {\n  // Get all tags\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readonly');\n        const store = transaction.objectStore(TAGS_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Add a new tag\n  add: (tag) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        \n        const addRequest = store.add(tag);\n        \n        addRequest.onsuccess = () => {\n          resolve(tag);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Update a tag\n  update: (tag) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        \n        const updateRequest = store.put(tag);\n        \n        updateRequest.onsuccess = () => {\n          resolve(tag);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Delete a tag\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        \n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Wallets operations\nconst walletDB = {\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readonly');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  add: (wallet) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readwrite');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const addRequest = store.add(wallet);\n        addRequest.onsuccess = () => {\n          resolve(wallet);\n          db.close();\n        };\n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  update: (wallet) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readwrite');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const updateRequest = store.put(wallet);\n        updateRequest.onsuccess = () => {\n          resolve(wallet);\n          db.close();\n        };\n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(WALLETS_STORE, 'readwrite');\n        const store = transaction.objectStore(WALLETS_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Recurring transaction operations\nconst recurringDB = {\n  // Get all recurring transactions\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readonly');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n\n  // Get recurring transaction by ID\n  getById: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readonly');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const getRequest = store.get(id);\n        \n        getRequest.onsuccess = () => {\n          resolve(getRequest.result);\n          db.close();\n        };\n        \n        getRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n\n  // Add new recurring transaction\n  add: (recurring) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readwrite');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const addRequest = store.add(recurring);\n        \n        addRequest.onsuccess = () => {\n          resolve(recurring);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n\n  // Update existing recurring transaction\n  update: (recurring) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readwrite');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const updateRequest = store.put(recurring);\n        \n        updateRequest.onsuccess = () => {\n          resolve(recurring);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n\n  // Delete recurring transaction\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readwrite');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(true);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Get due recurring transactions based on a date\n  getDueTransactions: (date = new Date()) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(RECURRING_STORE, 'readonly');\n        const store = transaction.objectStore(RECURRING_STORE);\n        const nextDateIndex = store.index('nextDate');\n        \n        // Format date to YYYY-MM-DD for comparison\n        const formatDate = (date) => {\n          return date.toISOString().split('T')[0];\n        };\n        \n        // Get all recurring transactions with nextDate less than or equal to the provided date\n        const dateStr = formatDate(date);\n        const range = IDBKeyRange.upperBound(dateStr);\n        const request = nextDateIndex.getAll(range);\n        \n        request.onsuccess = () => {\n          resolve(request.result);\n          db.close();\n        };\n        \n        request.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Helper function to migrate data from localStorage to IndexedDB\nconst migrateFromLocalStorage = async () => {\n  try {\n    // Migrate expenses if they exist\n    const savedExpenses = localStorage.getItem('expenses');\n    if (savedExpenses) {\n      const expenses = JSON.parse(savedExpenses);\n      for (const expense of expenses) {\n        await expenseDB.add(expense);\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expenses');\n    }\n    \n    // Migrate categories if they exist\n    const savedCategories = localStorage.getItem('expense-categories');\n    if (savedCategories) {\n      const categories = JSON.parse(savedCategories);\n      for (const category of categories) {\n        await categoryDB.add(category).catch(() => {\n          // Category might already exist, just ignore\n        });\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expense-categories');\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error migrating data:', error);\n    return false;\n  }\n};\n\n// Initialize database and export methods\nconst initializeDatabase = async () => {\n  try {\n    // Initialize the database\n    const initialized = await initDB();\n    \n    // If successful, attempt to migrate data from localStorage\n    if (initialized) {\n      await migrateFromLocalStorage();\n    }\n    \n    return initialized;\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n    return false;\n  }\n};\n\n// Function to delete the IndexedDB database (for troubleshooting)\nconst deleteDatabase = () => {\n  return new Promise((resolve, reject) => {\n    if (!window.indexedDB) {\n      console.error(\"IndexedDB not supported\");\n      resolve(false);\n      return;\n    }\n\n    const deleteRequest = window.indexedDB.deleteDatabase(DB_NAME);\n    \n    deleteRequest.onsuccess = () => {\n      console.log(\"Database deleted successfully\");\n      resolve(true);\n    };\n    \n    deleteRequest.onerror = (event) => {\n      console.error(\"Error deleting database:\", event.target.error);\n      reject(event.target.error);\n    };\n    \n    deleteRequest.onblocked = () => {\n      console.warn(\"Database deletion blocked - close all other tabs with this app open\");\n      // Try again after a short delay\n      setTimeout(() => {\n        window.indexedDB.deleteDatabase(DB_NAME);\n        resolve(true);\n      }, 1000);\n    };\n  });\n};\n\n// Export the database utilities\nexport {\n  initializeDatabase,\n  deleteDatabase,\n  expenseDB,\n  categoryDB,\n  tagDB,\n  walletDB,\n  recurringDB\n}; "],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAG,oBAAoB;AACpC,MAAMC,UAAU,GAAG,CAAC,CAAC,CAAC;AACtB,MAAMC,cAAc,GAAG,UAAU;AACjC,MAAMC,gBAAgB,GAAG,YAAY;AACrC,MAAMC,UAAU,GAAG,MAAM;AACzB,MAAMC,aAAa,GAAG,SAAS;AAC/B,MAAMC,eAAe,GAAG,WAAW,CAAC,CAAC;;AAErC;AACA,MAAMC,kBAAkB,GAAG,CACzB;EAAEC,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE;AAAO,CAAC,EAC5B;EAAED,EAAE,EAAE,gBAAgB;EAAEC,IAAI,EAAE;AAAiB,CAAC,EAChD;EAAED,EAAE,EAAE,eAAe;EAAEC,IAAI,EAAE;AAAgB,CAAC,EAC9C;EAAED,EAAE,EAAE,WAAW;EAAEC,IAAI,EAAE;AAAY,CAAC,EACtC;EAAED,EAAE,EAAE,SAAS;EAAEC,IAAI,EAAE;AAAU,CAAC,EAClC;EAAED,EAAE,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAa,CAAC,EACxC;EAAED,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE;AAAQ,CAAC,CAC/B;;AAED;AACA,MAAMC,YAAY,GAAG,CACnB;EAAEF,EAAE,EAAE,WAAW;EAAEC,IAAI,EAAE;AAAY,CAAC,EACtC;EAAED,EAAE,EAAE,WAAW;EAAEC,IAAI,EAAE;AAAY,CAAC,EACtC;EAAED,EAAE,EAAE,WAAW;EAAEC,IAAI,EAAE;AAAY,CAAC,EACtC;EAAED,EAAE,EAAE,UAAU;EAAEC,IAAI,EAAE;AAAW,CAAC,EACpC;EAAED,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE;AAAO,CAAC,EAC5B;EAAED,EAAE,EAAE,QAAQ;EAAEC,IAAI,EAAE;AAAS,CAAC,EAChC;EAAED,EAAE,EAAE,UAAU;EAAEC,IAAI,EAAE;AAAW,CAAC,EACpC;EAAED,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE;AAAO,CAAC,EAC5B;EAAED,EAAE,EAAE,SAAS;EAAEC,IAAI,EAAE;AAAU,CAAC,EAClC;EAAED,EAAE,EAAE,WAAW;EAAEC,IAAI,EAAE;AAAY,CAAC,CACvC;;AAED;AACA,MAAME,eAAe,GAAG,CACtB;EAAEH,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,MAAM;EAAEG,IAAI,EAAE,MAAM;EAAEC,OAAO,EAAE;AAAE,CAAC,EACtD;EAAEL,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,cAAc;EAAEG,IAAI,EAAE,MAAM;EAAEC,OAAO,EAAE;AAAE,CAAC,EAC9D;EAAEL,EAAE,EAAE,QAAQ;EAAEC,IAAI,EAAE,aAAa;EAAEG,IAAI,EAAE,aAAa;EAAEC,OAAO,EAAE;AAAE,CAAC,EACtE;EAAEL,EAAE,EAAE,SAAS;EAAEC,IAAI,EAAE,UAAU;EAAEG,IAAI,EAAE,UAAU;EAAEC,OAAO,EAAE;AAAE,CAAC,CAClE;;AAED;AACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACA,IAAI,CAACC,MAAM,CAACC,SAAS,EAAE;MACrBC,OAAO,CAACC,KAAK,CAAC,wCAAwC,CAAC;MACvD;MACAL,OAAO,CAAC,KAAK,CAAC;MACd;IACF;IAEA,MAAMM,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;;IAE1D;IACAqB,OAAO,CAACE,eAAe,GAAIC,KAAK,IAAK;MACnC,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;MAC9B,MAAMC,UAAU,GAAGJ,KAAK,CAACI,UAAU;;MAEnC;MACA,IAAIA,UAAU,GAAG,CAAC,EAAE;QAClB;QACA,IAAI,CAACH,EAAE,CAACI,gBAAgB,CAACC,QAAQ,CAAC7B,cAAc,CAAC,EAAE;UACjD,MAAM8B,aAAa,GAAGN,EAAE,CAACO,iBAAiB,CAAC/B,cAAc,EAAE;YAAEgC,OAAO,EAAE;UAAK,CAAC,CAAC;UAC7EF,aAAa,CAACG,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE;YAAEC,MAAM,EAAE;UAAM,CAAC,CAAC;UAC5DJ,aAAa,CAACG,WAAW,CAAC,UAAU,EAAE,UAAU,EAAE;YAAEC,MAAM,EAAE;UAAM,CAAC,CAAC;QACtE;;QAEA;QACA,IAAI,CAACV,EAAE,CAACI,gBAAgB,CAACC,QAAQ,CAAC5B,gBAAgB,CAAC,EAAE;UACnD,MAAMkC,eAAe,GAAGX,EAAE,CAACO,iBAAiB,CAAC9B,gBAAgB,EAAE;YAAE+B,OAAO,EAAE;UAAK,CAAC,CAAC;;UAEjF;UACA3B,kBAAkB,CAAC+B,OAAO,CAACC,QAAQ,IAAI;YACrCF,eAAe,CAACG,GAAG,CAACD,QAAQ,CAAC;UAC/B,CAAC,CAAC;QACJ;MACF;;MAEA;MACA,IAAIV,UAAU,GAAG,CAAC,EAAE;QAClB;QACA,IAAI,CAACH,EAAE,CAACI,gBAAgB,CAACC,QAAQ,CAAC3B,UAAU,CAAC,EAAE;UAC7C,MAAMqC,SAAS,GAAGf,EAAE,CAACO,iBAAiB,CAAC7B,UAAU,EAAE;YAAE8B,OAAO,EAAE;UAAK,CAAC,CAAC;;UAErE;UACAxB,YAAY,CAAC4B,OAAO,CAACI,GAAG,IAAI;YAC1BD,SAAS,CAACD,GAAG,CAACE,GAAG,CAAC;UACpB,CAAC,CAAC;QACJ;;QAEA;QACA,IAAIhB,EAAE,CAACI,gBAAgB,CAACC,QAAQ,CAAC7B,cAAc,CAAC,EAAE;UAChD;UACA;UACA,MAAMyC,WAAW,GAAGlB,KAAK,CAACE,MAAM,CAACgB,WAAW;UAC5C,MAAMX,aAAa,GAAGW,WAAW,CAACC,WAAW,CAAC1C,cAAc,CAAC;;UAE7D;UACA8B,aAAa,CAACa,UAAU,CAAC,CAAC,CAACC,SAAS,GAAIrB,KAAK,IAAK;YAChD,MAAMsB,MAAM,GAAGtB,KAAK,CAACE,MAAM,CAACC,MAAM;YAClC,IAAImB,MAAM,EAAE;cACV;cACA,IAAI,CAACA,MAAM,CAACC,KAAK,CAACC,IAAI,EAAE;gBACtB,MAAMC,cAAc,GAAG;kBAAE,GAAGH,MAAM,CAACC,KAAK;kBAAEC,IAAI,EAAE;gBAAG,CAAC;gBACpDF,MAAM,CAACI,MAAM,CAACD,cAAc,CAAC;cAC/B;cACAH,MAAM,CAACK,QAAQ,CAAC,CAAC;YACnB;UACF,CAAC;QACH;MACF;;MAEA;MACA,IAAIvB,UAAU,GAAG,CAAC,EAAE;QAClB,IAAI,CAACH,EAAE,CAACI,gBAAgB,CAACC,QAAQ,CAAC1B,aAAa,CAAC,EAAE;UAChD,MAAMgD,YAAY,GAAG3B,EAAE,CAACO,iBAAiB,CAAC5B,aAAa,EAAE;YAAE6B,OAAO,EAAE;UAAK,CAAC,CAAC;UAC3EvB,eAAe,CAAC2B,OAAO,CAACgB,MAAM,IAAID,YAAY,CAACb,GAAG,CAACc,MAAM,CAAC,CAAC;QAC7D;MACF;;MAEA;MACA,IAAIzB,UAAU,GAAG,CAAC,EAAE;QAClB,IAAIH,EAAE,CAACI,gBAAgB,CAACC,QAAQ,CAAC7B,cAAc,CAAC,EAAE;UAChD,MAAMyC,WAAW,GAAGlB,KAAK,CAACE,MAAM,CAACgB,WAAW;UAC5C,MAAMX,aAAa,GAAGW,WAAW,CAACC,WAAW,CAAC1C,cAAc,CAAC;UAC7D8B,aAAa,CAACa,UAAU,CAAC,CAAC,CAACC,SAAS,GAAG,MAAOrB,KAAK,IAAK;YACtD,MAAMsB,MAAM,GAAGtB,KAAK,CAACE,MAAM,CAACC,MAAM;YAClC,IAAImB,MAAM,EAAE;cACV,IAAI,CAACA,MAAM,CAACC,KAAK,CAACO,QAAQ,EAAE;gBAC1B;gBACA,MAAML,cAAc,GAAG;kBAAE,GAAGH,MAAM,CAACC,KAAK;kBAAEO,QAAQ,EAAE;gBAAO,CAAC;gBAC5DR,MAAM,CAACI,MAAM,CAACD,cAAc,CAAC;cAC/B;cACAH,MAAM,CAACK,QAAQ,CAAC,CAAC;YACnB;UACF,CAAC;QACH;MACF;;MAEA;MACA,IAAIvB,UAAU,GAAG,CAAC,EAAE;QAClB,IAAIH,EAAE,CAACI,gBAAgB,CAACC,QAAQ,CAAC7B,cAAc,CAAC,EAAE;UAChD,MAAMyC,WAAW,GAAGlB,KAAK,CAACE,MAAM,CAACgB,WAAW;UAC5C,MAAMX,aAAa,GAAGW,WAAW,CAACC,WAAW,CAAC1C,cAAc,CAAC;UAE7D8B,aAAa,CAACa,UAAU,CAAC,CAAC,CAACC,SAAS,GAAIrB,KAAK,IAAK;YAChD,MAAMsB,MAAM,GAAGtB,KAAK,CAACE,MAAM,CAACC,MAAM;YAClC,IAAImB,MAAM,EAAE;cACV;cACA,MAAMG,cAAc,GAAG;gBACrB,GAAGH,MAAM,CAACC,KAAK;gBACfQ,QAAQ,EAAET,MAAM,CAACC,KAAK,CAACQ,QAAQ,IAAI,KAAK;gBACxCC,KAAK,EAAEV,MAAM,CAACC,KAAK,CAACS,KAAK,IAAI,EAAE;gBAC/BC,QAAQ,EAAEX,MAAM,CAACC,KAAK,CAACU,QAAQ,IAAI;cACrC,CAAC;cACDX,MAAM,CAACI,MAAM,CAACD,cAAc,CAAC;cAC7BH,MAAM,CAACK,QAAQ,CAAC,CAAC;YACnB;UACF,CAAC;QACH;MACF;;MAEA;MACA,IAAIvB,UAAU,GAAG,CAAC,EAAE;QAClB,IAAI,CAACH,EAAE,CAACI,gBAAgB,CAACC,QAAQ,CAACzB,eAAe,CAAC,EAAE;UAClD,MAAMqD,cAAc,GAAGjC,EAAE,CAACO,iBAAiB,CAAC3B,eAAe,EAAE;YAAE4B,OAAO,EAAE;UAAK,CAAC,CAAC;UAC/EyB,cAAc,CAACxB,WAAW,CAAC,UAAU,EAAE,UAAU,EAAE;YAAEC,MAAM,EAAE;UAAM,CAAC,CAAC;UACrEuB,cAAc,CAACxB,WAAW,CAAC,WAAW,EAAE,WAAW,EAAE;YAAEC,MAAM,EAAE;UAAM,CAAC,CAAC;QACzE;MACF;IACF,CAAC;IAEDd,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;MAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;MAC9BZ,OAAO,CAAC,IAAI,CAAC;MACbU,EAAE,CAACkC,KAAK,CAAC,CAAC;IACZ,CAAC;IAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;MAC3BL,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEI,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MACrDJ,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;IAC5B,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMyC,SAAS,GAAG;EAChB;EACAC,MAAM,EAAEA,CAAA,KAAM;IACZ,OAAO,IAAIhD,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACzC,cAAc,EAAE,UAAU,CAAC;QAC9D,MAAM8D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAAC1C,cAAc,CAAC;QACrD,MAAM+D,aAAa,GAAGD,KAAK,CAACD,MAAM,CAAC,CAAC;QAEpCE,aAAa,CAACnB,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACiD,aAAa,CAACrC,MAAM,CAAC;UAC7BF,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDK,aAAa,CAACJ,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACAmB,GAAG,EAAG0B,OAAO,IAAK;IAChB,OAAO,IAAInD,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACzC,cAAc,EAAE,WAAW,CAAC;QAC/D,MAAM8D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAAC1C,cAAc,CAAC;;QAErD;QACA,MAAMiE,UAAU,GAAG;UACjB,GAAGD,OAAO;UACV1D,EAAE,EAAE0D,OAAO,CAAC1D,EAAE,IAAI4D,IAAI,CAACC,GAAG,CAAC,CAAC;UAC5Bd,QAAQ,EAAEW,OAAO,CAACX,QAAQ,IAAI,MAAM;UACpCC,QAAQ,EAAEU,OAAO,CAACV,QAAQ,IAAI,KAAK;UACnCC,KAAK,EAAES,OAAO,CAACT,KAAK,IAAI,EAAE;UAC1BC,QAAQ,EAAEQ,OAAO,CAACR,QAAQ,IAAI;QAChC,CAAC;QAED,MAAMY,UAAU,GAAGN,KAAK,CAACxB,GAAG,CAAC2B,UAAU,CAAC;QAExCG,UAAU,CAACxB,SAAS,GAAG,MAAM;UAC3B9B,OAAO,CAACmD,UAAU,CAAC;UACnBzC,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDU,UAAU,CAACT,OAAO,GAAIxC,KAAK,IAAK;UAC9BJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACA8B,MAAM,EAAGe,OAAO,IAAK;IACnB,OAAO,IAAInD,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACzC,cAAc,EAAE,WAAW,CAAC;QAC/D,MAAM8D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAAC1C,cAAc,CAAC;;QAErD;QACA,MAAMgD,cAAc,GAAG;UACrB,GAAGgB,OAAO;UACVX,QAAQ,EAAEW,OAAO,CAACX,QAAQ,IAAI,MAAM;UACpCC,QAAQ,EAAEU,OAAO,CAACV,QAAQ,IAAI,KAAK;UACnCC,KAAK,EAAES,OAAO,CAACT,KAAK,IAAI,EAAE;UAC1BC,QAAQ,EAAEQ,OAAO,CAACR,QAAQ,IAAI;QAChC,CAAC;QAED,MAAMa,aAAa,GAAGP,KAAK,CAACQ,GAAG,CAACtB,cAAc,CAAC;QAE/CqB,aAAa,CAACzB,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACkD,OAAO,CAAC;UAChBxC,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDW,aAAa,CAACV,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACAoD,MAAM,EAAGjE,EAAE,IAAK;IACd,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACzC,cAAc,EAAE,WAAW,CAAC;QAC/D,MAAM8D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAAC1C,cAAc,CAAC;QAErD,MAAMwE,aAAa,GAAGV,KAAK,CAACS,MAAM,CAACjE,EAAE,CAAC;QAEtCkE,aAAa,CAAC5B,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACR,EAAE,CAAC;UACXkB,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDc,aAAa,CAACb,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,MAAMsD,UAAU,GAAG;EACjB;EACAZ,MAAM,EAAEA,CAAA,KAAM;IACZ,OAAO,IAAIhD,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACxC,gBAAgB,EAAE,UAAU,CAAC;QAChE,MAAM6D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACzC,gBAAgB,CAAC;QACvD,MAAM8D,aAAa,GAAGD,KAAK,CAACD,MAAM,CAAC,CAAC;QAEpCE,aAAa,CAACnB,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACiD,aAAa,CAACrC,MAAM,CAAC;UAC7BF,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDK,aAAa,CAACJ,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACAmB,GAAG,EAAGD,QAAQ,IAAK;IACjB,OAAO,IAAIxB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACxC,gBAAgB,EAAE,WAAW,CAAC;QACjE,MAAM6D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACzC,gBAAgB,CAAC;QAEvD,MAAMmE,UAAU,GAAGN,KAAK,CAACxB,GAAG,CAACD,QAAQ,CAAC;QAEtC+B,UAAU,CAACxB,SAAS,GAAG,MAAM;UAC3B9B,OAAO,CAACuB,QAAQ,CAAC;UACjBb,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDU,UAAU,CAACT,OAAO,GAAIxC,KAAK,IAAK;UAC9BJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACA8B,MAAM,EAAGZ,QAAQ,IAAK;IACpB,OAAO,IAAIxB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACxC,gBAAgB,EAAE,WAAW,CAAC;QACjE,MAAM6D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACzC,gBAAgB,CAAC;QAEvD,MAAMoE,aAAa,GAAGP,KAAK,CAACQ,GAAG,CAACjC,QAAQ,CAAC;QAEzCgC,aAAa,CAACzB,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACuB,QAAQ,CAAC;UACjBb,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDW,aAAa,CAACV,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACAoD,MAAM,EAAGjE,EAAE,IAAK;IACd,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACxC,gBAAgB,EAAE,WAAW,CAAC;QACjE,MAAM6D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACzC,gBAAgB,CAAC;QAEvD,MAAMuE,aAAa,GAAGV,KAAK,CAACS,MAAM,CAACjE,EAAE,CAAC;QAEtCkE,aAAa,CAAC5B,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACR,EAAE,CAAC;UACXkB,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDc,aAAa,CAACb,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,MAAMuD,KAAK,GAAG;EACZ;EACAb,MAAM,EAAEA,CAAA,KAAM;IACZ,OAAO,IAAIhD,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACvC,UAAU,EAAE,UAAU,CAAC;QAC1D,MAAM4D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACxC,UAAU,CAAC;QACjD,MAAM6D,aAAa,GAAGD,KAAK,CAACD,MAAM,CAAC,CAAC;QAEpCE,aAAa,CAACnB,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACiD,aAAa,CAACrC,MAAM,CAAC;UAC7BF,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDK,aAAa,CAACJ,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACAmB,GAAG,EAAGE,GAAG,IAAK;IACZ,OAAO,IAAI3B,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACvC,UAAU,EAAE,WAAW,CAAC;QAC3D,MAAM4D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACxC,UAAU,CAAC;QAEjD,MAAMkE,UAAU,GAAGN,KAAK,CAACxB,GAAG,CAACE,GAAG,CAAC;QAEjC4B,UAAU,CAACxB,SAAS,GAAG,MAAM;UAC3B9B,OAAO,CAAC0B,GAAG,CAAC;UACZhB,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDU,UAAU,CAACT,OAAO,GAAIxC,KAAK,IAAK;UAC9BJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACA8B,MAAM,EAAGT,GAAG,IAAK;IACf,OAAO,IAAI3B,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACvC,UAAU,EAAE,WAAW,CAAC;QAC3D,MAAM4D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACxC,UAAU,CAAC;QAEjD,MAAMmE,aAAa,GAAGP,KAAK,CAACQ,GAAG,CAAC9B,GAAG,CAAC;QAEpC6B,aAAa,CAACzB,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAAC0B,GAAG,CAAC;UACZhB,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDW,aAAa,CAACV,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACAoD,MAAM,EAAGjE,EAAE,IAAK;IACd,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACvC,UAAU,EAAE,WAAW,CAAC;QAC3D,MAAM4D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACxC,UAAU,CAAC;QAEjD,MAAMsE,aAAa,GAAGV,KAAK,CAACS,MAAM,CAACjE,EAAE,CAAC;QAEtCkE,aAAa,CAAC5B,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACR,EAAE,CAAC;UACXkB,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDc,aAAa,CAACb,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,MAAMwD,QAAQ,GAAG;EACfd,MAAM,EAAEA,CAAA,KAAM;IACZ,OAAO,IAAIhD,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAC1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACtC,aAAa,EAAE,UAAU,CAAC;QAC7D,MAAM2D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACvC,aAAa,CAAC;QACpD,MAAM4D,aAAa,GAAGD,KAAK,CAACD,MAAM,CAAC,CAAC;QACpCE,aAAa,CAACnB,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACiD,aAAa,CAACrC,MAAM,CAAC;UAC7BF,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QACDK,aAAa,CAACJ,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MACDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EACDmB,GAAG,EAAGc,MAAM,IAAK;IACf,OAAO,IAAIvC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAC1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACtC,aAAa,EAAE,WAAW,CAAC;QAC9D,MAAM2D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACvC,aAAa,CAAC;QACpD,MAAMiE,UAAU,GAAGN,KAAK,CAACxB,GAAG,CAACc,MAAM,CAAC;QACpCgB,UAAU,CAACxB,SAAS,GAAG,MAAM;UAC3B9B,OAAO,CAACsC,MAAM,CAAC;UACf5B,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QACDU,UAAU,CAACT,OAAO,GAAIxC,KAAK,IAAK;UAC9BJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MACDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EACD8B,MAAM,EAAGG,MAAM,IAAK;IAClB,OAAO,IAAIvC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAC1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACtC,aAAa,EAAE,WAAW,CAAC;QAC9D,MAAM2D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACvC,aAAa,CAAC;QACpD,MAAMkE,aAAa,GAAGP,KAAK,CAACQ,GAAG,CAAClB,MAAM,CAAC;QACvCiB,aAAa,CAACzB,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACsC,MAAM,CAAC;UACf5B,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QACDW,aAAa,CAACV,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MACDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EACDoD,MAAM,EAAGjE,EAAE,IAAK;IACd,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAC1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACtC,aAAa,EAAE,WAAW,CAAC;QAC9D,MAAM2D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACvC,aAAa,CAAC;QACpD,MAAMqE,aAAa,GAAGV,KAAK,CAACS,MAAM,CAACjE,EAAE,CAAC;QACtCkE,aAAa,CAAC5B,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACR,EAAE,CAAC;UACXkB,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QACDc,aAAa,CAACb,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MACDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,MAAMyD,WAAW,GAAG;EAClB;EACAf,MAAM,EAAEA,CAAA,KAAM;IACZ,OAAO,IAAIhD,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACrC,eAAe,EAAE,UAAU,CAAC;QAC/D,MAAM0D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACtC,eAAe,CAAC;QACtD,MAAM2D,aAAa,GAAGD,KAAK,CAACD,MAAM,CAAC,CAAC;QAEpCE,aAAa,CAACnB,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACiD,aAAa,CAACrC,MAAM,CAAC;UAC7BF,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDK,aAAa,CAACJ,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACA0D,OAAO,EAAGvE,EAAE,IAAK;IACf,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACrC,eAAe,EAAE,UAAU,CAAC;QAC/D,MAAM0D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACtC,eAAe,CAAC;QACtD,MAAM0E,UAAU,GAAGhB,KAAK,CAACiB,GAAG,CAACzE,EAAE,CAAC;QAEhCwE,UAAU,CAAClC,SAAS,GAAG,MAAM;UAC3B9B,OAAO,CAACgE,UAAU,CAACpD,MAAM,CAAC;UAC1BF,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDoB,UAAU,CAACnB,OAAO,GAAIxC,KAAK,IAAK;UAC9BJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACAmB,GAAG,EAAG0C,SAAS,IAAK;IAClB,OAAO,IAAInE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACrC,eAAe,EAAE,WAAW,CAAC;QAChE,MAAM0D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACtC,eAAe,CAAC;QACtD,MAAMgE,UAAU,GAAGN,KAAK,CAACxB,GAAG,CAAC0C,SAAS,CAAC;QAEvCZ,UAAU,CAACxB,SAAS,GAAG,MAAM;UAC3B9B,OAAO,CAACkE,SAAS,CAAC;UAClBxD,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDU,UAAU,CAACT,OAAO,GAAIxC,KAAK,IAAK;UAC9BJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACA8B,MAAM,EAAG+B,SAAS,IAAK;IACrB,OAAO,IAAInE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACrC,eAAe,EAAE,WAAW,CAAC;QAChE,MAAM0D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACtC,eAAe,CAAC;QACtD,MAAMiE,aAAa,GAAGP,KAAK,CAACQ,GAAG,CAACU,SAAS,CAAC;QAE1CX,aAAa,CAACzB,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAACkE,SAAS,CAAC;UAClBxD,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDW,aAAa,CAACV,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACAoD,MAAM,EAAGjE,EAAE,IAAK;IACd,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACrC,eAAe,EAAE,WAAW,CAAC;QAChE,MAAM0D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACtC,eAAe,CAAC;QACtD,MAAMoE,aAAa,GAAGV,KAAK,CAACS,MAAM,CAACjE,EAAE,CAAC;QAEtCkE,aAAa,CAAC5B,SAAS,GAAG,MAAM;UAC9B9B,OAAO,CAAC,IAAI,CAAC;UACbU,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDc,aAAa,CAACb,OAAO,GAAIxC,KAAK,IAAK;UACjCJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACA8D,kBAAkB,EAAEA,CAACC,IAAI,GAAG,IAAIhB,IAAI,CAAC,CAAC,KAAK;IACzC,OAAO,IAAIrD,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMK,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACI,IAAI,CAACvB,OAAO,EAAEC,UAAU,CAAC;MAE1DqB,OAAO,CAACwB,SAAS,GAAIrB,KAAK,IAAK;QAC7B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;QAC9B,MAAMe,WAAW,GAAGjB,EAAE,CAACiB,WAAW,CAACrC,eAAe,EAAE,UAAU,CAAC;QAC/D,MAAM0D,KAAK,GAAGrB,WAAW,CAACC,WAAW,CAACtC,eAAe,CAAC;QACtD,MAAM+E,aAAa,GAAGrB,KAAK,CAACsB,KAAK,CAAC,UAAU,CAAC;;QAE7C;QACA,MAAMC,UAAU,GAAIH,IAAI,IAAK;UAC3B,OAAOA,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC;;QAED;QACA,MAAMC,OAAO,GAAGH,UAAU,CAACH,IAAI,CAAC;QAChC,MAAMO,KAAK,GAAGC,WAAW,CAACC,UAAU,CAACH,OAAO,CAAC;QAC7C,MAAMpE,OAAO,GAAG+D,aAAa,CAACtB,MAAM,CAAC4B,KAAK,CAAC;QAE3CrE,OAAO,CAACwB,SAAS,GAAG,MAAM;UACxB9B,OAAO,CAACM,OAAO,CAACM,MAAM,CAAC;UACvBF,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;QAEDtC,OAAO,CAACuC,OAAO,GAAIxC,KAAK,IAAK;UAC3BJ,MAAM,CAACI,KAAK,CAAC;UACbK,EAAE,CAACkC,KAAK,CAAC,CAAC;QACZ,CAAC;MACH,CAAC;MAEDtC,OAAO,CAACuC,OAAO,GAAIpC,KAAK,IAAK;QAC3BR,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,MAAMyE,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF;IACA,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACtD,IAAIF,aAAa,EAAE;MACjB,MAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;MAC1C,KAAK,MAAM7B,OAAO,IAAIgC,QAAQ,EAAE;QAC9B,MAAMpC,SAAS,CAACtB,GAAG,CAAC0B,OAAO,CAAC;MAC9B;MACA;MACA8B,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;IACrC;;IAEA;IACA,MAAMC,eAAe,GAAGN,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;IAClE,IAAIK,eAAe,EAAE;MACnB,MAAMC,UAAU,GAAGJ,IAAI,CAACC,KAAK,CAACE,eAAe,CAAC;MAC9C,KAAK,MAAM/D,QAAQ,IAAIgE,UAAU,EAAE;QACjC,MAAM5B,UAAU,CAACnC,GAAG,CAACD,QAAQ,CAAC,CAACiE,KAAK,CAAC,MAAM;UACzC;QAAA,CACD,CAAC;MACJ;MACA;MACAR,YAAY,CAACK,UAAU,CAAC,oBAAoB,CAAC;IAC/C;IAEA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOhF,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,MAAMoF,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF;IACA,MAAMC,WAAW,GAAG,MAAM5F,MAAM,CAAC,CAAC;;IAElC;IACA,IAAI4F,WAAW,EAAE;MACf,MAAMZ,uBAAuB,CAAC,CAAC;IACjC;IAEA,OAAOY,WAAW;EACpB,CAAC,CAAC,OAAOrF,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,MAAMsF,cAAc,GAAGA,CAAA,KAAM;EAC3B,OAAO,IAAI5F,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI,CAACC,MAAM,CAACC,SAAS,EAAE;MACrBC,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;MACxCL,OAAO,CAAC,KAAK,CAAC;MACd;IACF;IAEA,MAAM0D,aAAa,GAAGxD,MAAM,CAACC,SAAS,CAACwF,cAAc,CAAC3G,OAAO,CAAC;IAE9D0E,aAAa,CAAC5B,SAAS,GAAG,MAAM;MAC9B1B,OAAO,CAACwF,GAAG,CAAC,+BAA+B,CAAC;MAC5C5F,OAAO,CAAC,IAAI,CAAC;IACf,CAAC;IAED0D,aAAa,CAACb,OAAO,GAAIpC,KAAK,IAAK;MACjCL,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEI,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;MAC7DJ,MAAM,CAACQ,KAAK,CAACE,MAAM,CAACN,KAAK,CAAC;IAC5B,CAAC;IAEDqD,aAAa,CAACmC,SAAS,GAAG,MAAM;MAC9BzF,OAAO,CAAC0F,IAAI,CAAC,qEAAqE,CAAC;MACnF;MACAC,UAAU,CAAC,MAAM;QACf7F,MAAM,CAACC,SAAS,CAACwF,cAAc,CAAC3G,OAAO,CAAC;QACxCgB,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,SACEyF,kBAAkB,EAClBE,cAAc,EACd7C,SAAS,EACTa,UAAU,EACVC,KAAK,EACLC,QAAQ,EACRC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}