{"ast":null,"code":"// IndexedDB database utility for expense tracker\n\nconst DB_NAME = 'expense-tracker-db';\nconst DB_VERSION = 2; // Incrementing version for schema updates\nconst EXPENSES_STORE = 'expenses';\nconst CATEGORIES_STORE = 'categories';\nconst TAGS_STORE = 'tags';\n\n// Default categories\nconst DEFAULT_CATEGORIES = [{\n  id: 'food',\n  name: 'Food'\n}, {\n  id: 'transportation',\n  name: 'Transportation'\n}, {\n  id: 'entertainment',\n  name: 'Entertainment'\n}, {\n  id: 'utilities',\n  name: 'Utilities'\n}, {\n  id: 'housing',\n  name: 'Housing'\n}, {\n  id: 'healthcare',\n  name: 'Healthcare'\n}, {\n  id: 'other',\n  name: 'Other'\n}];\n\n// Default tags\nconst DEFAULT_TAGS = [{\n  id: 'essential',\n  name: 'Essential'\n}, {\n  id: 'recurring',\n  name: 'Recurring'\n}, {\n  id: 'emergency',\n  name: 'Emergency'\n}, {\n  id: 'personal',\n  name: 'Personal'\n}, {\n  id: 'work',\n  name: 'Work'\n}, {\n  id: 'family',\n  name: 'Family'\n}, {\n  id: 'vacation',\n  name: 'Vacation'\n}, {\n  id: 'gift',\n  name: 'Gift'\n}, {\n  id: 'savings',\n  name: 'Savings'\n}, {\n  id: 'education',\n  name: 'Education'\n}];\n\n// Initialize the database\nconst initDB = () => {\n  return new Promise((resolve, reject) => {\n    // Check if IndexedDB is supported\n    if (!window.indexedDB) {\n      console.error(\"Your browser doesn't support IndexedDB\");\n      // Fall back to localStorage\n      resolve(false);\n      return;\n    }\n    const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\n    // Handle database upgrade (first time or version change)\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n      const oldVersion = event.oldVersion;\n\n      // First time setup or upgrade from version 0\n      if (oldVersion < 1) {\n        // Create expenses store with auto-incrementing id\n        if (!db.objectStoreNames.contains(EXPENSES_STORE)) {\n          const expensesStore = db.createObjectStore(EXPENSES_STORE, {\n            keyPath: 'id'\n          });\n          expensesStore.createIndex('date', 'date', {\n            unique: false\n          });\n          expensesStore.createIndex('category', 'category', {\n            unique: false\n          });\n        }\n\n        // Create categories store\n        if (!db.objectStoreNames.contains(CATEGORIES_STORE)) {\n          const categoriesStore = db.createObjectStore(CATEGORIES_STORE, {\n            keyPath: 'id'\n          });\n\n          // Add default categories\n          DEFAULT_CATEGORIES.forEach(category => {\n            categoriesStore.add(category);\n          });\n        }\n      }\n\n      // Upgrade to version 2 - adding tags support\n      if (oldVersion < 2) {\n        // Create tags store if it doesn't exist\n        if (!db.objectStoreNames.contains(TAGS_STORE)) {\n          const tagsStore = db.createObjectStore(TAGS_STORE, {\n            keyPath: 'id'\n          });\n\n          // Add default tags\n          DEFAULT_TAGS.forEach(tag => {\n            tagsStore.add(tag);\n          });\n        }\n\n        // Update expenses store to include tags if it exists\n        if (db.objectStoreNames.contains(EXPENSES_STORE)) {\n          // We can't modify the schema of an existing object store in onupgradeneeded\n          // So we need to create a new index for the existing store\n          const transaction = event.target.transaction;\n          const expensesStore = transaction.objectStore(EXPENSES_STORE);\n\n          // Get all existing expenses\n          expensesStore.openCursor().onsuccess = event => {\n            const cursor = event.target.result;\n            if (cursor) {\n              // Add tags array to existing expenses if they don't have it\n              if (!cursor.value.tags) {\n                const updatedExpense = {\n                  ...cursor.value,\n                  tags: []\n                };\n                cursor.update(updatedExpense);\n              }\n              cursor.continue();\n            }\n          };\n        }\n      }\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      resolve(true);\n      db.close();\n    };\n    request.onerror = event => {\n      console.error('IndexedDB error:', event.target.error);\n      reject(event.target.error);\n    };\n  });\n};\n\n// Expense operations\nconst expenseDB = {\n  // Get all expenses\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readonly');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Add a new expense\n  add: expense => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n\n        // Make sure ID is a number\n        const newExpense = {\n          ...expense,\n          id: expense.id || Date.now()\n        };\n        const addRequest = store.add(newExpense);\n        addRequest.onsuccess = () => {\n          resolve(newExpense);\n          db.close();\n        };\n        addRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Update an expense\n  update: expense => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const updateRequest = store.put(expense);\n        updateRequest.onsuccess = () => {\n          resolve(expense);\n          db.close();\n        };\n        updateRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Delete an expense\n  delete: id => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        deleteRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Category operations\nconst categoryDB = {\n  // Get all categories\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readonly');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Add a new category\n  add: category => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const addRequest = store.add(category);\n        addRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        addRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Update a category\n  update: category => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const updateRequest = store.put(category);\n        updateRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        updateRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Delete a category\n  delete: id => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        deleteRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Tags operations\nconst tagDB = {\n  // Get all tags\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readonly');\n        const store = transaction.objectStore(TAGS_STORE);\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        getAllRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Add a new tag\n  add: tag => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        const addRequest = store.add(tag);\n        addRequest.onsuccess = () => {\n          resolve(tag);\n          db.close();\n        };\n        addRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Update a tag\n  update: tag => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        const updateRequest = store.put(tag);\n        updateRequest.onsuccess = () => {\n          resolve(tag);\n          db.close();\n        };\n        updateRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  },\n  // Delete a tag\n  delete: id => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        deleteRequest.onerror = error => {\n          reject(error);\n          db.close();\n        };\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Helper function to migrate data from localStorage to IndexedDB\nconst migrateFromLocalStorage = async () => {\n  try {\n    // Migrate expenses if they exist\n    const savedExpenses = localStorage.getItem('expenses');\n    if (savedExpenses) {\n      const expenses = JSON.parse(savedExpenses);\n      for (const expense of expenses) {\n        await expenseDB.add(expense);\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expenses');\n    }\n\n    // Migrate categories if they exist\n    const savedCategories = localStorage.getItem('expense-categories');\n    if (savedCategories) {\n      const categories = JSON.parse(savedCategories);\n      for (const category of categories) {\n        await categoryDB.add(category).catch(() => {\n          // Category might already exist, just ignore\n        });\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expense-categories');\n    }\n    return true;\n  } catch (error) {\n    console.error('Error migrating data:', error);\n    return false;\n  }\n};\n\n// Initialize database and export methods\nconst initializeDatabase = async () => {\n  try {\n    // Initialize the database\n    const initialized = await initDB();\n\n    // If successful, attempt to migrate data from localStorage\n    if (initialized) {\n      await migrateFromLocalStorage();\n    }\n    return initialized;\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n    return false;\n  }\n};\nexport { initializeDatabase, expenseDB, categoryDB, tagDB };","map":{"version":3,"names":["DB_NAME","DB_VERSION","EXPENSES_STORE","CATEGORIES_STORE","TAGS_STORE","DEFAULT_CATEGORIES","id","name","DEFAULT_TAGS","initDB","Promise","resolve","reject","window","indexedDB","console","error","request","open","onupgradeneeded","event","db","target","result","oldVersion","objectStoreNames","contains","expensesStore","createObjectStore","keyPath","createIndex","unique","categoriesStore","forEach","category","add","tagsStore","tag","transaction","objectStore","openCursor","onsuccess","cursor","value","tags","updatedExpense","update","continue","close","onerror","expenseDB","getAll","store","getAllRequest","expense","newExpense","Date","now","addRequest","updateRequest","put","delete","deleteRequest","categoryDB","tagDB","migrateFromLocalStorage","savedExpenses","localStorage","getItem","expenses","JSON","parse","removeItem","savedCategories","categories","catch","initializeDatabase","initialized"],"sources":["/Users/ddm/expense-tracker/src/utils/db.js"],"sourcesContent":["// IndexedDB database utility for expense tracker\n\nconst DB_NAME = 'expense-tracker-db';\nconst DB_VERSION = 2; // Incrementing version for schema updates\nconst EXPENSES_STORE = 'expenses';\nconst CATEGORIES_STORE = 'categories';\nconst TAGS_STORE = 'tags';\n\n// Default categories\nconst DEFAULT_CATEGORIES = [\n  { id: 'food', name: 'Food' },\n  { id: 'transportation', name: 'Transportation' },\n  { id: 'entertainment', name: 'Entertainment' },\n  { id: 'utilities', name: 'Utilities' },\n  { id: 'housing', name: 'Housing' },\n  { id: 'healthcare', name: 'Healthcare' },\n  { id: 'other', name: 'Other' }\n];\n\n// Default tags\nconst DEFAULT_TAGS = [\n  { id: 'essential', name: 'Essential' },\n  { id: 'recurring', name: 'Recurring' },\n  { id: 'emergency', name: 'Emergency' },\n  { id: 'personal', name: 'Personal' },\n  { id: 'work', name: 'Work' },\n  { id: 'family', name: 'Family' },\n  { id: 'vacation', name: 'Vacation' },\n  { id: 'gift', name: 'Gift' },\n  { id: 'savings', name: 'Savings' },\n  { id: 'education', name: 'Education' }\n];\n\n// Initialize the database\nconst initDB = () => {\n  return new Promise((resolve, reject) => {\n    // Check if IndexedDB is supported\n    if (!window.indexedDB) {\n      console.error(\"Your browser doesn't support IndexedDB\");\n      // Fall back to localStorage\n      resolve(false);\n      return;\n    }\n\n    const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\n    // Handle database upgrade (first time or version change)\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      const oldVersion = event.oldVersion;\n      \n      // First time setup or upgrade from version 0\n      if (oldVersion < 1) {\n        // Create expenses store with auto-incrementing id\n        if (!db.objectStoreNames.contains(EXPENSES_STORE)) {\n          const expensesStore = db.createObjectStore(EXPENSES_STORE, { keyPath: 'id' });\n          expensesStore.createIndex('date', 'date', { unique: false });\n          expensesStore.createIndex('category', 'category', { unique: false });\n        }\n        \n        // Create categories store\n        if (!db.objectStoreNames.contains(CATEGORIES_STORE)) {\n          const categoriesStore = db.createObjectStore(CATEGORIES_STORE, { keyPath: 'id' });\n          \n          // Add default categories\n          DEFAULT_CATEGORIES.forEach(category => {\n            categoriesStore.add(category);\n          });\n        }\n      }\n      \n      // Upgrade to version 2 - adding tags support\n      if (oldVersion < 2) {\n        // Create tags store if it doesn't exist\n        if (!db.objectStoreNames.contains(TAGS_STORE)) {\n          const tagsStore = db.createObjectStore(TAGS_STORE, { keyPath: 'id' });\n          \n          // Add default tags\n          DEFAULT_TAGS.forEach(tag => {\n            tagsStore.add(tag);\n          });\n        }\n        \n        // Update expenses store to include tags if it exists\n        if (db.objectStoreNames.contains(EXPENSES_STORE)) {\n          // We can't modify the schema of an existing object store in onupgradeneeded\n          // So we need to create a new index for the existing store\n          const transaction = event.target.transaction;\n          const expensesStore = transaction.objectStore(EXPENSES_STORE);\n          \n          // Get all existing expenses\n          expensesStore.openCursor().onsuccess = (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n              // Add tags array to existing expenses if they don't have it\n              if (!cursor.value.tags) {\n                const updatedExpense = { ...cursor.value, tags: [] };\n                cursor.update(updatedExpense);\n              }\n              cursor.continue();\n            }\n          };\n        }\n      }\n    };\n\n    request.onsuccess = (event) => {\n      const db = event.target.result;\n      resolve(true);\n      db.close();\n    };\n\n    request.onerror = (event) => {\n      console.error('IndexedDB error:', event.target.error);\n      reject(event.target.error);\n    };\n  });\n};\n\n// Expense operations\nconst expenseDB = {\n  // Get all expenses\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readonly');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Add a new expense\n  add: (expense) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        // Make sure ID is a number\n        const newExpense = {\n          ...expense,\n          id: expense.id || Date.now()\n        };\n        \n        const addRequest = store.add(newExpense);\n        \n        addRequest.onsuccess = () => {\n          resolve(newExpense);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Update an expense\n  update: (expense) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        const updateRequest = store.put(expense);\n        \n        updateRequest.onsuccess = () => {\n          resolve(expense);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Delete an expense\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(EXPENSES_STORE, 'readwrite');\n        const store = transaction.objectStore(EXPENSES_STORE);\n        \n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Category operations\nconst categoryDB = {\n  // Get all categories\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readonly');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Add a new category\n  add: (category) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const addRequest = store.add(category);\n        \n        addRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Update a category\n  update: (category) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const updateRequest = store.put(category);\n        \n        updateRequest.onsuccess = () => {\n          resolve(category);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Delete a category\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(CATEGORIES_STORE, 'readwrite');\n        const store = transaction.objectStore(CATEGORIES_STORE);\n        \n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Tags operations\nconst tagDB = {\n  // Get all tags\n  getAll: () => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readonly');\n        const store = transaction.objectStore(TAGS_STORE);\n        const getAllRequest = store.getAll();\n        \n        getAllRequest.onsuccess = () => {\n          resolve(getAllRequest.result);\n          db.close();\n        };\n        \n        getAllRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Add a new tag\n  add: (tag) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        \n        const addRequest = store.add(tag);\n        \n        addRequest.onsuccess = () => {\n          resolve(tag);\n          db.close();\n        };\n        \n        addRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Update a tag\n  update: (tag) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        \n        const updateRequest = store.put(tag);\n        \n        updateRequest.onsuccess = () => {\n          resolve(tag);\n          db.close();\n        };\n        \n        updateRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  },\n  \n  // Delete a tag\n  delete: (id) => {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction(TAGS_STORE, 'readwrite');\n        const store = transaction.objectStore(TAGS_STORE);\n        \n        const deleteRequest = store.delete(id);\n        \n        deleteRequest.onsuccess = () => {\n          resolve(id);\n          db.close();\n        };\n        \n        deleteRequest.onerror = (error) => {\n          reject(error);\n          db.close();\n        };\n      };\n      \n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n};\n\n// Helper function to migrate data from localStorage to IndexedDB\nconst migrateFromLocalStorage = async () => {\n  try {\n    // Migrate expenses if they exist\n    const savedExpenses = localStorage.getItem('expenses');\n    if (savedExpenses) {\n      const expenses = JSON.parse(savedExpenses);\n      for (const expense of expenses) {\n        await expenseDB.add(expense);\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expenses');\n    }\n    \n    // Migrate categories if they exist\n    const savedCategories = localStorage.getItem('expense-categories');\n    if (savedCategories) {\n      const categories = JSON.parse(savedCategories);\n      for (const category of categories) {\n        await categoryDB.add(category).catch(() => {\n          // Category might already exist, just ignore\n        });\n      }\n      // Clear localStorage after successful migration\n      localStorage.removeItem('expense-categories');\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error migrating data:', error);\n    return false;\n  }\n};\n\n// Initialize database and export methods\nconst initializeDatabase = async () => {\n  try {\n    // Initialize the database\n    const initialized = await initDB();\n    \n    // If successful, attempt to migrate data from localStorage\n    if (initialized) {\n      await migrateFromLocalStorage();\n    }\n    \n    return initialized;\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n    return false;\n  }\n};\n\nexport { initializeDatabase, expenseDB, categoryDB, tagDB }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}